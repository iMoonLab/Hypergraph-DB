{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hypergraph-DB","text":"<p>Hypergraph-DB is a lightweight, flexible, and Python-based database designed to model and manage hypergraphs\u2014a generalized graph structure where edges (hyperedges) can connect any number of vertices. This makes Hypergraph-DB an ideal solution for representing complex relationships between entities in various domains, such as knowledge graphs, social networks, and scientific data modeling.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83d\ude80 Lightweight &amp; Fast: Pure Python implementation with minimal dependencies</li> <li>\ud83d\udd17 Hypergraph Support: Native support for hyperedges connecting multiple vertices</li> <li>\ud83d\udcbe Persistence: Built-in serialization and loading capabilities</li> <li>\ud83d\udcca Visualization: Interactive hypergraph visualization in web browsers</li> <li>\ud83d\udd0d Flexible Queries: Rich query capabilities for vertices and hyperedges</li> <li>\ud83d\udee0\ufe0f Simple API: Intuitive and easy-to-use interface</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>Knowledge Graphs: Model complex relationships between entities</li> <li>Social Networks: Represent group interactions and multi-party relationships</li> <li>Scientific Data: Model complex dependencies in research data</li> <li>Recommendation Systems: Capture multi-way interactions between users, items, and contexts</li> </ul>"},{"location":"#performance","title":"\ud83d\udcc8 Performance","text":"<p>Hypergraph-DB is designed for efficiency. Here are some performance benchmarks:</p> Vertices Hyperedges Add Vertices Add Edges Query Time Total Time 100,000 20,000 0.12s 0.17s 0.04s 0.58s 500,000 100,000 0.85s 1.07s 0.22s 3.34s 1,000,000 200,000 1.75s 1.82s 0.51s 6.60s"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from hyperdb import HypergraphDB\n\n# Create a hypergraph\nhg = HypergraphDB()\n\n# Add vertices with attributes\nhg.add_v(1, {\"name\": \"Alice\", \"age\": 30})\nhg.add_v(2, {\"name\": \"Bob\", \"age\": 25})\nhg.add_v(3, {\"name\": \"Charlie\", \"age\": 35})\n\n# Add hyperedges connecting multiple vertices\nhg.add_e((1, 2), {\"relation\": \"friends\"})\nhg.add_e((1, 2, 3), {\"relation\": \"project_team\"})\n\n# Query the hypergraph\nprint(f\"Vertices: {hg.all_v}\")\nprint(f\"Edges: {hg.all_e}\")\n\n# Visualize the hypergraph\nhg.show()  # Opens visualization in web browser\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started: Installation and basic setup</li> <li>API Reference: Complete API documentation  </li> <li>Visualization Guide: Interactive hypergraph visualization</li> <li>Examples: Practical examples and tutorials</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our GitHub repository for more information.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<ul> <li>Author: Yifan Feng</li> <li>Email: evanfeng97@qq.com</li> <li>GitHub: @iMoonLab</li> </ul> <p>Built with \u2764\ufe0f by the iMoonLab team</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Hypergraph-DB","text":"<p>Thank you for your interest in contributing to Hypergraph-DB! We welcome contributions from the community and are grateful for your help in making this project better.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>There are many ways to contribute to Hypergraph-DB:</p> <ul> <li>\ud83d\udc1b Report bugs - Help us identify and fix issues</li> <li>\ud83d\udca1 Suggest features - Share ideas for new functionality</li> <li>\ud83d\udcd6 Improve documentation - Help make our docs clearer and more comprehensive</li> <li>\ud83d\udd27 Submit code - Fix bugs or implement new features</li> <li>\ud83e\uddea Write tests - Help improve our test coverage</li> <li>\ud83c\udf10 Translate - Help make the project accessible in more languages</li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"\ud83d\udee0\ufe0f Development Setup","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>uv (recommended) or pip</li> <li>Git</li> </ul>"},{"location":"CONTRIBUTING/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":"<ol> <li> <p>Fork and clone the repository:    <pre><code>git clone https://github.com/your-username/Hypergraph-DB.git\ncd Hypergraph-DB\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code># Using uv (recommended)\nuv sync\n\n# Or using pip\npip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Run tests to ensure everything works:    <pre><code># Using uv\nuv run pytest\n\n# Or using pip\npytest\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks (optional but recommended):    <pre><code>uv run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#submitting-changes","title":"\ud83d\udce4 Submitting Changes","text":""},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a new branch from <code>main</code>:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following our style guidelines</p> </li> <li> <p>Add tests for new functionality</p> </li> <li> <p>Update documentation if needed</p> </li> <li> <p>Run tests and ensure they pass:    <pre><code>uv run pytest\n</code></pre></p> </li> <li> <p>Run type checking:    <pre><code>uv run mypy hyperdb\n</code></pre></p> </li> <li> <p>Format your code:    <pre><code>uv run black hyperdb tests\nuv run isort hyperdb tests\n</code></pre></p> </li> <li> <p>Commit your changes with a clear message:    <pre><code>git commit -m \"feat: add new hypergraph algorithm\"\n</code></pre></p> </li> <li> <p>Push your branch:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a Pull Request on GitHub</p> </li> </ol>"},{"location":"CONTRIBUTING/#commit-message-guidelines","title":"Commit Message Guidelines","text":"<p>We follow the Conventional Commits specification:</p> <ul> <li><code>feat:</code> - A new feature</li> <li><code>fix:</code> - A bug fix</li> <li><code>docs:</code> - Documentation only changes</li> <li><code>style:</code> - Changes that do not affect the meaning of the code</li> <li><code>refactor:</code> - A code change that neither fixes a bug nor adds a feature</li> <li><code>test:</code> - Adding missing tests or correcting existing tests</li> <li><code>chore:</code> - Changes to the build process or auxiliary tools</li> </ul>"},{"location":"CONTRIBUTING/#reporting-issues","title":"\ud83d\udc1b Reporting Issues","text":"<p>When reporting issues, please include:</p> <ol> <li>Bug Description: Clear description of the problem</li> <li>Environment: Python version, OS, package version</li> <li>Reproduction Steps: Minimal code example that reproduces the issue</li> <li>Expected Behavior: What you expected to happen</li> <li>Actual Behavior: What actually happened</li> <li>Stack Trace: If applicable, include the full error message</li> </ol> <p>Please provide as much detail as possible when reporting issues.</p>"},{"location":"CONTRIBUTING/#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>We use MkDocs with the Material theme for documentation:</p>"},{"location":"CONTRIBUTING/#building-documentation-locally","title":"Building Documentation Locally","text":"<pre><code># Install documentation dependencies\nuv sync --extra docs\n\n# Serve documentation locally\nuv run mkdocs serve\n\n# Build documentation\nuv run mkdocs build\n</code></pre>"},{"location":"CONTRIBUTING/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Write clear, concise explanations</li> <li>Include code examples for new features</li> <li>Update both English and Chinese versions when possible</li> <li>Use proper Markdown formatting</li> <li>Add diagrams or images when helpful</li> </ul>"},{"location":"CONTRIBUTING/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=hyperdb\n\n# Run specific test file\nuv run pytest tests/test_hypergraph.py\n\n# Run tests matching a pattern\nuv run pytest -k \"test_add_vertex\"\n</code></pre>"},{"location":"CONTRIBUTING/#writing-tests","title":"Writing Tests","text":"<ul> <li>Write tests for all new functionality</li> <li>Use descriptive test names</li> <li>Follow the existing test structure</li> <li>Include edge cases and error conditions</li> <li>Aim for high test coverage</li> </ul>"},{"location":"CONTRIBUTING/#test-structure","title":"Test Structure","text":"<pre><code>def test_feature_name():\n    \"\"\"Test description.\"\"\"\n    # Arrange\n    hg = HypergraphDB()\n\n    # Act\n    result = hg.some_method()\n\n    # Assert\n    assert result == expected_value\n</code></pre>"},{"location":"CONTRIBUTING/#style-guidelines","title":"\ud83d\udcdd Style Guidelines","text":""},{"location":"CONTRIBUTING/#python-code-style","title":"Python Code Style","text":"<p>We use the following tools to maintain code quality:</p> <ul> <li>Black - Code formatting</li> <li>isort - Import sorting</li> <li>mypy - Type checking</li> <li>flake8 - Linting</li> </ul>"},{"location":"CONTRIBUTING/#code-guidelines","title":"Code Guidelines","text":"<ol> <li>Type Hints: Use type hints for all public APIs</li> <li>Docstrings: Follow NumPy docstring style</li> <li>Variable Names: Use descriptive names (<code>vertex_id</code> not <code>vid</code>)</li> <li>Function Names: Use verbs for functions (<code>add_vertex</code> not <code>vertex_add</code>)</li> <li>Class Names: Use PascalCase (<code>HypergraphDB</code>)</li> <li>Constants: Use UPPER_SNAKE_CASE (<code>MAX_VERTICES</code>)</li> </ol>"},{"location":"CONTRIBUTING/#example-docstring","title":"Example Docstring","text":"<pre><code>def add_vertex(self, vertex_id: Hashable, attributes: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Add a vertex to the hypergraph.\n\n    Parameters\n    ----------\n    vertex_id : Hashable\n        Unique identifier for the vertex.\n    attributes : dict, optional\n        Dictionary of vertex attributes, by default None.\n\n    Raises\n    ------\n    ValueError\n        If vertex_id already exists in the hypergraph.\n\n    Examples\n    --------\n    &gt;&gt;&gt; hg = HypergraphDB()\n    &gt;&gt;&gt; hg.add_vertex(1, {\"name\": \"Alice\", \"age\": 30})\n    \"\"\"\n</code></pre>"},{"location":"CONTRIBUTING/#release-process","title":"\ud83c\udff7\ufe0f Release Process","text":"<p>Releases are handled by maintainers and follow semantic versioning:</p> <ul> <li>Major (X.0.0): Breaking changes</li> <li>Minor (0.X.0): New features, backward compatible</li> <li>Patch (0.0.X): Bug fixes, backward compatible</li> </ul>"},{"location":"CONTRIBUTING/#getting-help","title":"\ud83d\ude4b Getting Help","text":"<p>If you need help or have questions:</p> <ol> <li>Check the documentation</li> <li>Search existing issues</li> <li>Create a new discussion</li> <li>Join our community channels (if available)</li> </ol>"},{"location":"CONTRIBUTING/#license","title":"\ud83d\udcc4 License","text":"<p>By contributing to Hypergraph-DB, you agree that your contributions will be licensed under the Apache License 2.0.</p> <p>Thank you for contributing to Hypergraph-DB! \ud83d\ude80</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#020-2025-09-09","title":"[0.2.0] - 2025-09-09","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>\ud83d\udcd6 Chinese documentation support</li> <li>\ud83c\udf10 Internationalization (i18n) configuration</li> <li>\ud83d\udcda Comprehensive API documentation</li> <li>\ud83c\udfa8 Improved visualization interface</li> <li>Migrated documentation from Sphinx to MkDocs</li> <li>Advanced usage patterns and tutorials</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>\ud83d\udd27 Better error handling</li> <li>\u26a1 Performance optimizations</li> <li>\ud83d\udcdd More detailed code examples</li> <li>\ud83e\uddea Enhanced test coverage</li> <li>Updated project structure for modern Python development</li> <li>Migrated from Poetry to uv for dependency management</li> <li>Enhanced development workflow with automated scripts</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>\ud83d\udc1b Fixed visualization rendering issues</li> <li>\ud83d\udcd6 Documentation and code consistency fixes</li> <li>\ud83d\udd17 Fixed internal link issues</li> </ul>"},{"location":"about/changelog/#012-2024-12-22","title":"0.1.2 - 2024-12-22","text":""},{"location":"about/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>\ud83d\udc1b Fixed bugs in <code>remove_e()</code> function</li> <li>\ud83d\udcd6 Updated README documentation</li> </ul>"},{"location":"about/changelog/#011-2024-12-16","title":"0.1.1 - 2024-12-16","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>\ud83e\uddea More comprehensive test suite</li> <li>\ud83d\udcca Dedicated stress tests to ensure system stability and performance</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>\u26a1 Major Performance Improvement: 100x speed boost for hypergraph construction and querying</li> <li>Constructing a hypergraph with 10,000 nodes and performing 40,000 vertex and hyperedge queries</li> <li>v0.1.0 took 90 seconds, v0.1.1 only takes 0.05 seconds</li> <li>Improved API design and consistency</li> <li>Better documentation and examples</li> </ul>"},{"location":"about/changelog/#010-2024-12-16","title":"0.1.0 - 2024-12-16","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>\ud83c\udf89 Initial release of Hypergraph-DB</li> <li>\ud83d\udcca Core hypergraph data structure implementation</li> <li>\ud83c\udfa8 Web visualization interface</li> <li>\ud83d\udcd6 Basic documentation and API reference</li> <li>\ud83e\uddea Basic test suite</li> </ul>"},{"location":"about/changelog/#core-features","title":"Core Features","text":"<ul> <li>\ud83c\udfd7\ufe0f <code>Hypergraph</code> core class</li> <li>\ud83d\udd17 Hyperedge operations</li> <li>\ud83d\udcca Hypervertex operations</li> <li>\ud83d\udcc8 Basic graph algorithms</li> <li>\ud83c\udfaf Neighbor query functionality</li> </ul>"},{"location":"about/changelog/#visualization-features","title":"Visualization Features","text":"<ul> <li>\ud83c\udf10 Web-based hypergraph visualization</li> <li>\ud83c\udfa8 Interactive hypergraph display</li> <li>\ud83d\udcf1 Responsive design</li> <li>\ud83c\udf9b\ufe0f Customizable visual styles</li> </ul>"},{"location":"about/changelog/#api-features","title":"API Features","text":"<ul> <li>\u2795 <code>add_hyperedge()</code> - Add hyperedge</li> <li>\u2795 <code>add_hypervertex()</code> - Add hypervertex</li> <li>\ud83d\uddd1\ufe0f <code>remove_hyperedge()</code> - Remove hyperedge</li> <li>\ud83d\uddd1\ufe0f <code>remove_hypervertex()</code> - Remove hypervertex</li> <li>\ud83d\udcca <code>degree_v()</code> - Calculate hypervertex degree</li> <li>\ud83d\udcca <code>degree_e()</code> - Calculate hyperedge degree</li> <li>\ud83d\udd0d <code>nbr_v_of_e()</code> - Query adjacent hypervertices of hyperedge</li> <li>\ud83d\udd0d <code>nbr_e_of_v()</code> - Query adjacent hyperedges of hypervertex</li> <li>\ud83c\udfa8 <code>draw()</code> - Visualize hypergraph</li> </ul>"},{"location":"about/license/","title":"License","text":""},{"location":"about/license/#apache-license-20","title":"Apache License 2.0","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this control, the\n      entity shall mean the direct or indirect ownership of fifty percent\n      (50%) or more of the outstanding shares, or (i) the beneficial\n      ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (which shall not include works that are designated in a comment\n      as \"Not a Contribution\" to the License).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based upon (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and derivative works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control\n      systems, and issue tracking systems that are managed by, or on behalf\n      of, the Licensor for the purpose of discussing and improving the Work,\n      but excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to use, reproduce, modify, display, perform,\n      sublicense, and distribute the Work and in derivative works thereof.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, trademark, patent,\n          attribution and other notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright notice to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   7. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   8. Accepting Warranty or Additional Support. When redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional support.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same page as the copyright notice for easier identification within\n      third-party archives.\n\n   Copyright 2024 Yifan Feng\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"about/license/#what-does-this-license-mean","title":"What does this license mean?","text":"<p>The Apache License 2.0 is a permissive free software license that allows you to:</p> <ul> <li>\u2705 Use the software for any purpose</li> <li>\u2705 Modify the software and create derivative works</li> <li>\u2705 Distribute original or modified versions</li> <li>\u2705 Use commercially without restrictions</li> <li>\u2705 Use privately for personal projects</li> </ul> <p>With the following conditions:</p> <ul> <li>\ud83d\udcc4 Include license and copyright notice in distributions</li> <li>\ud83d\udd04 State changes if you modify the code</li> <li>\ud83d\udeab No trademark use of the project name without permission</li> <li>\u2696\ufe0f No warranty - software is provided \"as is\"</li> </ul>"},{"location":"about/license/#attribution","title":"Attribution","text":"<p>When using Hypergraph-DB in your projects, please include the following attribution:</p> <pre><code>This project uses Hypergraph-DB\nCopyright 2024 Yifan Feng\nLicensed under the Apache License 2.0\n</code></pre>"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the same Apache License 2.0.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section provides complete documentation for all Hypergraph-DB classes and methods.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#hypergraphdb","title":"HypergraphDB","text":"<p>The main class for creating and manipulating hypergraphs. Provides all essential operations for vertices, hyperedges, and persistence.</p> <p>Key Features: - Add, remove, and update vertices and hyperedges - Query relationships and neighborhood information - Persistence with save/load functionality - Built-in visualization capabilities</p>"},{"location":"api/#hyperdb.HypergraphDB","title":"hyperdb.HypergraphDB  <code>dataclass</code>","text":"<pre><code>HypergraphDB(\n    storage_file: Union[str, Path] = \"my_hypergraph.hgdb\",\n    _v_data: Dict[str, Any] = dict(),\n    _e_data: Dict[Tuple, Any] = dict(),\n    _v_inci: Dict[str, Set[Tuple]] = (\n        lambda: defaultdict(set)\n    )(),\n)\n</code></pre> <p>               Bases: <code>BaseHypergraphDB</code></p> <p>Hypergraph database.</p>"},{"location":"api/#hyperdb.HypergraphDB.all_v","title":"all_v  <code>cached</code> <code>property</code>","text":"<pre><code>all_v: List[str]\n</code></pre> <p>Return a list of all vertices in the hypergraph.</p>"},{"location":"api/#hyperdb.HypergraphDB.all_e","title":"all_e  <code>cached</code> <code>property</code>","text":"<pre><code>all_e: List[Tuple]\n</code></pre> <p>Return a list of all hyperedges in the hypergraph.</p>"},{"location":"api/#hyperdb.HypergraphDB.num_v","title":"num_v  <code>cached</code> <code>property</code>","text":"<pre><code>num_v: int\n</code></pre> <p>Return the number of vertices in the hypergraph.</p>"},{"location":"api/#hyperdb.HypergraphDB.num_e","title":"num_e  <code>cached</code> <code>property</code>","text":"<pre><code>num_e: int\n</code></pre> <p>Return the number of hyperedges in the hypergraph.</p>"},{"location":"api/#hyperdb.HypergraphDB.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def __post_init__(self):\n    assert isinstance(self.storage_file, (str, Path))\n    if isinstance(self.storage_file, str):\n        self.storage_file = Path(self.storage_file)\n    if self.storage_file.exists():\n        self.load(self.storage_file)\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.load","title":"load","text":"<pre><code>load(storage_file: Path) -&gt; dict\n</code></pre> <p>Load the hypergraph database from the storage file.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def load(self, storage_file: Path) -&gt; dict:\n    r\"\"\"\n    Load the hypergraph database from the storage file.\n    \"\"\"\n    try:\n        with open(storage_file, \"rb\") as f:\n            data = pkl.load(f)\n        self._v_data = data.get(\"v_data\", {})\n        self._v_inci = data.get(\"v_inci\", {})\n        self._e_data = data.get(\"e_data\", {})\n        return True\n    except Exception as e:\n        return False\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.save","title":"save","text":"<pre><code>save(storage_file: Path) -&gt; dict\n</code></pre> <p>Save the hypergraph database to the storage file.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def save(self, storage_file: Path) -&gt; dict:\n    r\"\"\"\n    Save the hypergraph database to the storage file.\n    \"\"\"\n    data = {\n        \"v_data\": self._v_data,\n        \"v_inci\": self._v_inci,\n        \"e_data\": self._e_data,\n    }\n    try:\n        with open(storage_file, \"wb\") as f:\n            pkl.dump(data, f)\n        return True\n    except Exception as e:\n        return False\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.v","title":"v","text":"<pre><code>v(v_id: str, default: Any = None) -&gt; dict\n</code></pre> <p>Return the vertex data.</p> <p>Args:     <code>v_id</code> (<code>str</code>): The vertex id.     <code>default</code> (<code>Any</code>): The default value if the vertex does not exist.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def v(self, v_id: str, default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the vertex data.\n\n    Args:\n        ``v_id`` (``str``): The vertex id.\n        ``default`` (``Any``): The default value if the vertex does not exist.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    try:\n        return self._v_data[v_id]\n    except KeyError:\n        return default\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.e","title":"e","text":"<pre><code>e(\n    e_tuple: Union[List, Set, Tuple], default: Any = None\n) -&gt; dict\n</code></pre> <p>Return the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>default</code> (<code>Any</code>): The default value if the hyperedge does not exist.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def e(self, e_tuple: Union[List, Set, Tuple], default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``default`` (``Any``): The default value if the hyperedge does not exist.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (set, list, tuple)\n    ), \"The hyperedge must be a set, list, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    try:\n        return self._e_data[e_tuple]\n    except KeyError:\n        return default\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.encode_e","title":"encode_e","text":"<pre><code>encode_e(e_tuple: Union[List, Set, Tuple]) -&gt; Tuple\n</code></pre> <p>Sort and check the hyperedge tuple.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def encode_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; Tuple:\n    r\"\"\"\n    Sort and check the hyperedge tuple.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    tmp = sorted(list(set(e_tuple)))\n    for v_id in tmp:\n        assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n        assert (\n            v_id in self._v_data\n        ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return tuple(tmp)\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.add_v","title":"add_v","text":"<pre><code>add_v(v_id: Any, v_data: Optional[Dict] = None)\n</code></pre> <p>Add a vertex to the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>dict</code>, optional): The vertex data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def add_v(self, v_id: Any, v_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a vertex to the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``dict``, optional): The vertex data.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    if v_data is not None:\n        assert isinstance(v_data, dict), \"The vertex data must be a dictionary.\"\n    else:\n        v_data = {}\n    if v_id not in self._v_data:\n        self._v_data[v_id] = v_data\n        self._v_inci[v_id] = set()\n    else:\n        self._v_data[v_id].update(v_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.add_e","title":"add_e","text":"<pre><code>add_e(\n    e_tuple: Union[List, Set, Tuple],\n    e_data: Optional[Dict] = None,\n)\n</code></pre> <p>Add a hyperedge to the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>dict</code>, optional): The hyperedge data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def add_e(self, e_tuple: Union[List, Set, Tuple], e_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a hyperedge to the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``dict``, optional): The hyperedge data.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    if e_data is not None:\n        assert isinstance(e_data, dict), \"The hyperedge data must be a dictionary.\"\n    else:\n        e_data = {}\n    e_tuple = self.encode_e(e_tuple)\n    if e_tuple not in self._e_data:\n        self._e_data[e_tuple] = e_data\n        for v in e_tuple:\n            self._v_inci[v].add(e_tuple)\n    else:\n        self._e_data[e_tuple].update(e_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.remove_v","title":"remove_v","text":"<pre><code>remove_v(v_id: Any)\n</code></pre> <p>Remove a vertex from the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def remove_v(self, v_id: Any):\n    r\"\"\"\n    Remove a vertex from the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    del self._v_data[v_id]\n    old_e_tuples, new_e_tuples = [], []\n    for e_tuple in self._v_inci[v_id]:\n        new_e_tuple = self.encode_e(set(e_tuple) - {v_id})\n        if len(new_e_tuple) &gt;= 2:\n            # todo: maybe new e tuple existing in hg, need to merge to hyperedge information\n            self._e_data[new_e_tuple] = deepcopy(self._e_data[e_tuple])\n        del self._e_data[e_tuple]\n        old_e_tuples.append(e_tuple)\n        new_e_tuples.append(new_e_tuple)\n    del self._v_inci[v_id]\n    for old_e_tuple, new_e_tuple in zip(old_e_tuples, new_e_tuples):\n        for _v_id in old_e_tuple:\n            if _v_id != v_id:\n                self._v_inci[_v_id].remove(old_e_tuple)\n                if len(new_e_tuple) &gt;= 2:\n                    self._v_inci[_v_id].add(new_e_tuple)\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.remove_e","title":"remove_e","text":"<pre><code>remove_e(e_tuple: Union[List, Set, Tuple])\n</code></pre> <p>Remove a hyperedge from the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def remove_e(self, e_tuple: Union[List, Set, Tuple]):\n    r\"\"\"\n    Remove a hyperedge from the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    for v in e_tuple:\n        self._v_inci[v].remove(e_tuple)\n    del self._e_data[e_tuple]\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.update_v","title":"update_v","text":"<pre><code>update_v(v_id: Any, v_data: dict)\n</code></pre> <p>Update the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>dict</code>): The vertex data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def update_v(self, v_id: Any, v_data: dict):\n    r\"\"\"\n    Update the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``dict``): The vertex data.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert isinstance(v_data, dict), \"The vertex data must be a dictionary.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    self._v_data[v_id].update(v_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.update_e","title":"update_e","text":"<pre><code>update_e(e_tuple: Union[List, Set, Tuple], e_data: dict)\n</code></pre> <p>Update the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>dict</code>): The hyperedge data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def update_e(self, e_tuple: Union[List, Set, Tuple], e_data: dict):\n    r\"\"\"\n    Update the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``dict``): The hyperedge data.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    assert isinstance(e_data, dict), \"The hyperedge data must be a dictionary.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    self._e_data[e_tuple].update(e_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.has_v","title":"has_v","text":"<pre><code>has_v(v_id: Any) -&gt; bool\n</code></pre> <p>Check if the vertex exists.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def has_v(self, v_id: Any) -&gt; bool:\n    r\"\"\"\n    Check if the vertex exists.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    return v_id in self._v_data\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.has_e","title":"has_e","text":"<pre><code>has_e(e_tuple: Union[List, Set, Tuple]) -&gt; bool\n</code></pre> <p>Check if the hyperedge exists.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def has_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; bool:\n    r\"\"\"\n    Check if the hyperedge exists.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    try:\n        e_tuple = self.encode_e(e_tuple)\n    except AssertionError:\n        return False\n    return e_tuple in self._e_data\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.degree_v","title":"degree_v","text":"<pre><code>degree_v(v_id: Any) -&gt; int\n</code></pre> <p>Return the degree of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def degree_v(self, v_id: Any) -&gt; int:\n    r\"\"\"\n    Return the degree of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return len(self._v_inci[v_id])\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.degree_e","title":"degree_e","text":"<pre><code>degree_e(e_tuple: Union[List, Set, Tuple]) -&gt; int\n</code></pre> <p>Return the degree of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def degree_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; int:\n    r\"\"\"\n    Return the degree of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    return len(e_tuple)\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.nbr_e_of_v","title":"nbr_e_of_v","text":"<pre><code>nbr_e_of_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the incident hyperedges of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_e_of_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the incident hyperedges of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return set(self._v_inci[v_id])\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.nbr_v_of_e","title":"nbr_v_of_e","text":"<pre><code>nbr_v_of_e(e_tuple: Union[List, Set, Tuple]) -&gt; list\n</code></pre> <p>Return the incident vertices of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_v_of_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; list:\n    r\"\"\"\n    Return the incident vertices of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    return set(e_tuple)\n</code></pre>"},{"location":"api/#hyperdb.HypergraphDB.nbr_v","title":"nbr_v","text":"<pre><code>nbr_v(v_id: Any, exclude_self=True) -&gt; list\n</code></pre> <p>Return the neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_v(self, v_id: Any, exclude_self=True) -&gt; list:\n    r\"\"\"\n    Return the neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    nbrs = set()\n    for e_tuple in self._v_inci[v_id]:\n        nbrs.update(e_tuple)\n    if exclude_self:\n        nbrs.remove(v_id)\n    return set(nbrs)\n</code></pre>"},{"location":"api/#basehypergraphdb","title":"BaseHypergraphDB","text":"<p>The foundational base class that defines the core hypergraph structure and basic operations.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB","title":"hyperdb.BaseHypergraphDB  <code>dataclass</code>","text":"<pre><code>BaseHypergraphDB(\n    storage_file: Union[str, Path] = \"my_hypergraph.hgdb\",\n)\n</code></pre> <p>Base class for hypergraph database.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB.storage_file","title":"storage_file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>storage_file: Union[str, Path] = field(\n    default=\"my_hypergraph.hgdb\", compare=False\n)\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.all_v","title":"all_v  <code>cached</code> <code>property</code>","text":"<pre><code>all_v: List[str]\n</code></pre> <p>Return a list of all vertices in the hypergraph.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB.all_e","title":"all_e  <code>cached</code> <code>property</code>","text":"<pre><code>all_e: List[Tuple]\n</code></pre> <p>Return a list of all hyperedges in the hypergraph.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB.num_v","title":"num_v  <code>cached</code> <code>property</code>","text":"<pre><code>num_v: int\n</code></pre> <p>Return the number of vertices in the hypergraph.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB.num_e","title":"num_e  <code>cached</code> <code>property</code>","text":"<pre><code>num_e: int\n</code></pre> <p>Return the number of hyperedges in the hypergraph.</p>"},{"location":"api/#hyperdb.BaseHypergraphDB.save","title":"save","text":"<pre><code>save(file_path: Union[str, Path])\n</code></pre> <p>Save the hypergraph to a file.</p> <p>Args:     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to save the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def save(self, file_path: Union[str, Path]):\n    r\"\"\"\n    Save the hypergraph to a file.\n\n    Args:\n        ``file_path`` (``Union[str, Path]``): The file path to save the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.save_as","title":"save_as","text":"<pre><code>save_as(format: str, file_path: Union[str, Path])\n</code></pre> <p>Save the hypergraph to a specific format.</p> <p>Args:     <code>format</code> (<code>str</code>): The export format (e.g., \"json\", \"csv\", \"graphml\").     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to export the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def save_as(self, format: str, file_path: Union[str, Path]):\n    r\"\"\"\n    Save the hypergraph to a specific format.\n\n    Args:\n        ``format`` (``str``): The export format (e.g., \"json\", \"csv\", \"graphml\").\n        ``file_path`` (``Union[str, Path]``): The file path to export the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.load","title":"load  <code>staticmethod</code>","text":"<pre><code>load(file_path: Union[str, Path])\n</code></pre> <p>Load the hypergraph from a file.</p> <p>Args:     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to load the hypergraph from.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>@staticmethod\ndef load(self, file_path: Union[str, Path]):\n    r\"\"\"\n    Load the hypergraph from a file.\n\n    Args:\n        ``file_path`` (``Union[str, Path]``): The file path to load the hypergraph from.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.load_from","title":"load_from","text":"<pre><code>load_from(format: str, file_path: Union[str, Path])\n</code></pre> <p>Load a hypergraph from a specific format.</p> <p>Args:     <code>format</code> (<code>str</code>): The import format (e.g., \"json\", \"csv\", \"graphml\").     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to import the hypergraph from.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def load_from(self, format: str, file_path: Union[str, Path]):\n    r\"\"\"\n    Load a hypergraph from a specific format.\n\n    Args:\n        ``format`` (``str``): The import format (e.g., \"json\", \"csv\", \"graphml\").\n        ``file_path`` (``Union[str, Path]``): The file path to import the hypergraph from.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.v","title":"v","text":"<pre><code>v(v_id: Any, default: Any = None) -&gt; dict\n</code></pre> <p>Return the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>default</code> (<code>Any</code>): The default value if the vertex does not exist.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def v(self, v_id: Any, default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``default`` (``Any``): The default value if the vertex does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.e","title":"e","text":"<pre><code>e(\n    e_tuple: Union[List, Set, Tuple], default: Any = None\n) -&gt; dict\n</code></pre> <p>Return the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>default</code> (<code>Any</code>): The default value if the hyperedge does not exist.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def e(self, e_tuple: Union[List, Set, Tuple], default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``default`` (``Any``): The default value if the hyperedge does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.encode_e","title":"encode_e","text":"<pre><code>encode_e(e_tuple: Union[List, Set, Tuple]) -&gt; Tuple\n</code></pre> <p>Sort and check the hyperedge tuple.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def encode_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; Tuple:\n    r\"\"\"\n    Sort and check the hyperedge tuple.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.add_v","title":"add_v","text":"<pre><code>add_v(v_id: Any, v_data: Optional[Dict] = None)\n</code></pre> <p>Add a vertex to the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>Dict</code>, optional): The vertex data. Defaults to None.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def add_v(self, v_id: Any, v_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a vertex to the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``Dict``, optional): The vertex data. Defaults to None.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.add_e","title":"add_e","text":"<pre><code>add_e(e_tuple: Tuple, e_data: Optional[Dict] = None)\n</code></pre> <p>Add a hyperedge to the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>Dict</code>, optional): The hyperedge data.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def add_e(self, e_tuple: Tuple, e_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a hyperedge to the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``Dict``, optional): The hyperedge data.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.remove_v","title":"remove_v","text":"<pre><code>remove_v(v_id: Any)\n</code></pre> <p>Remove a vertex from the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def remove_v(self, v_id: Any):\n    r\"\"\"\n    Remove a vertex from the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.remove_e","title":"remove_e","text":"<pre><code>remove_e(e_tuple: Tuple)\n</code></pre> <p>Remove a hyperedge from the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def remove_e(self, e_tuple: Tuple):\n    r\"\"\"\n    Remove a hyperedge from the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.update_v","title":"update_v","text":"<pre><code>update_v(v_id: Any)\n</code></pre> <p>Update the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def update_v(self, v_id: Any):\n    r\"\"\"\n    Update the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.update_e","title":"update_e","text":"<pre><code>update_e(e_tuple: Tuple)\n</code></pre> <p>Update the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def update_e(self, e_tuple: Tuple):\n    r\"\"\"\n    Update the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.has_v","title":"has_v","text":"<pre><code>has_v(v_id: Any) -&gt; bool\n</code></pre> <p>Return True if the vertex exists in the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def has_v(self, v_id: Any) -&gt; bool:\n    r\"\"\"\n    Return True if the vertex exists in the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.has_e","title":"has_e","text":"<pre><code>has_e(e_tuple: Tuple) -&gt; bool\n</code></pre> <p>Return True if the hyperedge exists in the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def has_e(self, e_tuple: Tuple) -&gt; bool:\n    r\"\"\"\n    Return True if the hyperedge exists in the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.degree_v","title":"degree_v","text":"<pre><code>degree_v(v_id: Any) -&gt; int\n</code></pre> <p>Return the degree of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def degree_v(self, v_id: Any) -&gt; int:\n    r\"\"\"\n    Return the degree of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.degree_e","title":"degree_e","text":"<pre><code>degree_e(e_tuple: Tuple) -&gt; int\n</code></pre> <p>Return the degree of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def degree_e(self, e_tuple: Tuple) -&gt; int:\n    r\"\"\"\n    Return the degree of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.nbr_e_of_v","title":"nbr_e_of_v","text":"<pre><code>nbr_e_of_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the hyperedge neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_e_of_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the hyperedge neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.nbr_v_of_e","title":"nbr_v_of_e","text":"<pre><code>nbr_v_of_e(e_tuple: Tuple) -&gt; list\n</code></pre> <p>Return the vertex neighbors of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_v_of_e(self, e_tuple: Tuple) -&gt; list:\n    r\"\"\"\n    Return the vertex neighbors of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.nbr_v","title":"nbr_v","text":"<pre><code>nbr_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the vertex neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the vertex neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.draw","title":"draw","text":"<pre><code>draw(\n    port: int = 8080,\n    open_browser: bool = True,\n    blocking: bool = True,\n)\n</code></pre> <p>Draw the hypergraph data of the current HyperDB instance</p> <p>Args: <code>port</code>: Server port number, defaults to 8080 <code>open_browser</code>: Whether to automatically open the browser, defaults to True     <code>blocking</code>: Whether to block the main thread, defaults to True. Set to False for non-blocking mode.</p> <p>Returns:     HypergraphViewer instance</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def draw(self, port: int = 8080, open_browser: bool = True, blocking: bool = True):\n    \"\"\"\n    Draw the hypergraph data of the current HyperDB instance\n\n    Args:  \n        ``port``: Server port number, defaults to 8080  \n        ``open_browser``: Whether to automatically open the browser, defaults to True\n        ``blocking``: Whether to block the main thread, defaults to True. Set to False for non-blocking mode.\n\n    Returns:\n        HypergraphViewer instance\n    \"\"\"\n    from .draw import draw_hypergraph\n\n    return draw_hypergraph(\n        hypergraph_db=self,\n        port=port,\n        open_browser=open_browser,\n        blocking=blocking\n    )\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.sub","title":"sub","text":"<pre><code>sub(v_name_list: List[str])\n</code></pre> <p>Return the sub-hypergraph.</p> <p>Args:     <code>v_name_list</code> (<code>List[str]</code>): The list of vertex ids.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def sub(self, v_name_list: List[str]):\n    r\"\"\"\n    Return the sub-hypergraph.\n\n    Args:\n        ``v_name_list`` (``List[str]``): The list of vertex ids.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.sub_from_v","title":"sub_from_v","text":"<pre><code>sub_from_v(v_id: Any, depth: int)\n</code></pre> <p>Return the sub-hypergraph from the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>depth</code> (<code>int</code>): The depth of the sub-hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def sub_from_v(self, v_id: Any, depth: int):\n    r\"\"\"\n    Return the sub-hypergraph from the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``depth`` (``int``): The depth of the sub-hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.query_v","title":"query_v","text":"<pre><code>query_v(filters: Dict[str, Any]) -&gt; List[str]\n</code></pre> <p>Query and return vertices that match the given filters.</p> <p>Args:     <code>filters</code> (<code>Dict[str, Any]</code>): A dictionary of conditions to filter vertices.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def query_v(self, filters: Dict[str, Any]) -&gt; List[str]:\n    r\"\"\"\n    Query and return vertices that match the given filters.\n\n    Args:\n        ``filters`` (``Dict[str, Any]``): A dictionary of conditions to filter vertices.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.query_e","title":"query_e","text":"<pre><code>query_e(filters: Dict[str, Any]) -&gt; List[Tuple]\n</code></pre> <p>Query and return hyperedges that match the given filters.</p> <p>Args:     <code>filters</code> (<code>Dict[str, Any]</code>): A dictionary of conditions to filter hyperedges.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def query_e(self, filters: Dict[str, Any]) -&gt; List[Tuple]:\n    r\"\"\"\n    Query and return hyperedges that match the given filters.\n\n    Args:\n        ``filters`` (``Dict[str, Any]``): A dictionary of conditions to filter hyperedges.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#hyperdb.BaseHypergraphDB.stats","title":"stats","text":"<pre><code>stats() -&gt; dict\n</code></pre> <p>Return basic statistics of the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def stats(self) -&gt; dict:\n    r\"\"\"\n    Return basic statistics of the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/#quick-reference","title":"Quick Reference","text":""},{"location":"api/#vertex-operations","title":"Vertex Operations","text":"Method Description <code>add_v(vid, attr=None)</code> Add a vertex with optional attributes <code>remove_v(vid)</code> Remove a vertex and all connected hyperedges <code>update_v(vid, attr)</code> Update vertex attributes <code>v[vid]</code> Access vertex attributes <code>all_v</code> Get all vertex IDs <code>num_v</code> Get total number of vertices"},{"location":"api/#hyperedge-operations","title":"Hyperedge Operations","text":"Method Description <code>add_e(vertices, attr=None)</code> Add a hyperedge connecting multiple vertices <code>remove_e(eid)</code> Remove a hyperedge <code>update_e(eid, attr)</code> Update hyperedge attributes <code>e[eid]</code> Access hyperedge attributes <code>all_e</code> Get all hyperedge IDs <code>num_e</code> Get total number of hyperedges"},{"location":"api/#query-operations","title":"Query Operations","text":"Method Description <code>d_v(vid)</code> Get degree of a vertex (number of incident hyperedges) <code>d_e(eid)</code> Get size of a hyperedge (number of vertices) <code>N_v(vid)</code> Get all vertices connected to a vertex via hyperedges <code>N_e(vid)</code> Get all hyperedges containing a vertex <code>N_v_of_e(eid)</code> Get all vertices in a hyperedge"},{"location":"api/#persistence-operations","title":"Persistence Operations","text":"Method Description <code>save(filepath)</code> Save hypergraph to file <code>load(filepath)</code> Load hypergraph from file <code>copy()</code> Create a deep copy of the hypergraph"},{"location":"api/#visualization","title":"Visualization","text":"Method Description <code>show(port=8080)</code> Launch interactive web visualization"},{"location":"api/#usage-examples","title":"Usage Examples","text":""},{"location":"api/#basic-operations","title":"Basic Operations","text":"<pre><code>from hyperdb import HypergraphDB\n\n# Create hypergraph\nhg = HypergraphDB()\n\n# Add vertices\nhg.add_v(1, {\"name\": \"Alice\"})\nhg.add_v(2, {\"name\": \"Bob\"})\nhg.add_v(3, {\"name\": \"Charlie\"})\n\n# Add hyperedges\nhg.add_e((1, 2), {\"relation\": \"friends\"})\nhg.add_e((1, 2, 3), {\"relation\": \"team\"})\n\n# Query operations\nprint(f\"Alice's degree: {hg.d_v(1)}\")\nprint(f\"Alice's neighbors: {hg.N_v(1)}\")\nprint(f\"Alice's hyperedges: {hg.N_e(1)}\")\n</code></pre>"},{"location":"api/#advanced-queries","title":"Advanced Queries","text":"<pre><code># Find all vertices with specific attributes\ndata_scientists = [vid for vid in hg.all_v \n                   if hg.v[vid].get(\"profession\") == \"Data Scientist\"]\n\n# Find large collaborations (hyperedges with many vertices)\nlarge_teams = [eid for eid in hg.all_e if hg.d_e(eid) &gt;= 4]\n\n# Find vertices that appear in multiple hyperedges\nhighly_connected = [vid for vid in hg.all_v if hg.d_v(vid) &gt;= 3]\n</code></pre>"},{"location":"api/#working-with-attributes","title":"Working with Attributes","text":"<pre><code># Rich vertex attributes\nhg.add_v(\"person1\", {\n    \"name\": \"Dr. Smith\",\n    \"age\": 45,\n    \"skills\": [\"Python\", \"Machine Learning\", \"Statistics\"],\n    \"publications\": 127,\n    \"h_index\": 42\n})\n\n# Rich hyperedge attributes\nhg.add_e((\"person1\", \"person2\", \"person3\"), {\n    \"type\": \"research_paper\",\n    \"title\": \"Advanced Hypergraph Algorithms\",\n    \"year\": 2024,\n    \"venue\": \"ICML\",\n    \"impact_factor\": 3.2,\n    \"citations\": 15\n})\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API includes comprehensive error handling:</p> <pre><code>try:\n    hg.add_v(1, {\"name\": \"Alice\"})\n    hg.add_v(1, {\"name\": \"Bob\"})  # Raises error - vertex already exists\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    hg.remove_v(999)  # Raises error - vertex doesn't exist\nexcept KeyError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Vertex IDs: Use hashable types (int, str, tuple) for best performance</li> <li>Batch Operations: Add multiple vertices/edges at once when possible</li> <li>Memory Usage: Large attribute dictionaries increase memory usage</li> <li>Persistence: Use pickle format for fastest save/load operations</li> </ul>"},{"location":"api/#type-hints","title":"Type Hints","text":"<p>Hypergraph-DB includes comprehensive type hints for better IDE support:</p> <pre><code>from typing import Set, Dict, Any, Tuple, List\nfrom hyperdb import HypergraphDB\n\n# The API is fully typed\nhg: HypergraphDB = HypergraphDB()\nvertex_id: int = 1\nattributes: Dict[str, Any] = {\"name\": \"Alice\"}\nvertices: Tuple[int, ...] = (1, 2, 3)\n</code></pre>"},{"location":"api/base/","title":"BaseHypergraphDB Class","text":""},{"location":"api/base/#hyperdb.base.BaseHypergraphDB","title":"hyperdb.base.BaseHypergraphDB  <code>dataclass</code>","text":"<pre><code>BaseHypergraphDB(\n    storage_file: Union[str, Path] = \"my_hypergraph.hgdb\",\n)\n</code></pre> <p>Base class for hypergraph database.</p>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB-attributes","title":"Attributes","text":""},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.storage_file","title":"storage_file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>storage_file: Union[str, Path] = field(\n    default=\"my_hypergraph.hgdb\", compare=False\n)\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.all_v","title":"all_v  <code>cached</code> <code>property</code>","text":"<pre><code>all_v: List[str]\n</code></pre> <p>Return a list of all vertices in the hypergraph.</p>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.all_e","title":"all_e  <code>cached</code> <code>property</code>","text":"<pre><code>all_e: List[Tuple]\n</code></pre> <p>Return a list of all hyperedges in the hypergraph.</p>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.num_v","title":"num_v  <code>cached</code> <code>property</code>","text":"<pre><code>num_v: int\n</code></pre> <p>Return the number of vertices in the hypergraph.</p>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.num_e","title":"num_e  <code>cached</code> <code>property</code>","text":"<pre><code>num_e: int\n</code></pre> <p>Return the number of hyperedges in the hypergraph.</p>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB-functions","title":"Functions","text":""},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.save","title":"save","text":"<pre><code>save(file_path: Union[str, Path])\n</code></pre> <p>Save the hypergraph to a file.</p> <p>Args:     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to save the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def save(self, file_path: Union[str, Path]):\n    r\"\"\"\n    Save the hypergraph to a file.\n\n    Args:\n        ``file_path`` (``Union[str, Path]``): The file path to save the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.save_as","title":"save_as","text":"<pre><code>save_as(format: str, file_path: Union[str, Path])\n</code></pre> <p>Save the hypergraph to a specific format.</p> <p>Args:     <code>format</code> (<code>str</code>): The export format (e.g., \"json\", \"csv\", \"graphml\").     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to export the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def save_as(self, format: str, file_path: Union[str, Path]):\n    r\"\"\"\n    Save the hypergraph to a specific format.\n\n    Args:\n        ``format`` (``str``): The export format (e.g., \"json\", \"csv\", \"graphml\").\n        ``file_path`` (``Union[str, Path]``): The file path to export the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.load","title":"load  <code>staticmethod</code>","text":"<pre><code>load(file_path: Union[str, Path])\n</code></pre> <p>Load the hypergraph from a file.</p> <p>Args:     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to load the hypergraph from.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>@staticmethod\ndef load(self, file_path: Union[str, Path]):\n    r\"\"\"\n    Load the hypergraph from a file.\n\n    Args:\n        ``file_path`` (``Union[str, Path]``): The file path to load the hypergraph from.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.load_from","title":"load_from","text":"<pre><code>load_from(format: str, file_path: Union[str, Path])\n</code></pre> <p>Load a hypergraph from a specific format.</p> <p>Args:     <code>format</code> (<code>str</code>): The import format (e.g., \"json\", \"csv\", \"graphml\").     <code>file_path</code> (<code>Union[str, Path]</code>): The file path to import the hypergraph from.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def load_from(self, format: str, file_path: Union[str, Path]):\n    r\"\"\"\n    Load a hypergraph from a specific format.\n\n    Args:\n        ``format`` (``str``): The import format (e.g., \"json\", \"csv\", \"graphml\").\n        ``file_path`` (``Union[str, Path]``): The file path to import the hypergraph from.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.v","title":"v","text":"<pre><code>v(v_id: Any, default: Any = None) -&gt; dict\n</code></pre> <p>Return the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>default</code> (<code>Any</code>): The default value if the vertex does not exist.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def v(self, v_id: Any, default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``default`` (``Any``): The default value if the vertex does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.e","title":"e","text":"<pre><code>e(\n    e_tuple: Union[List, Set, Tuple], default: Any = None\n) -&gt; dict\n</code></pre> <p>Return the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>default</code> (<code>Any</code>): The default value if the hyperedge does not exist.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def e(self, e_tuple: Union[List, Set, Tuple], default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``default`` (``Any``): The default value if the hyperedge does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.encode_e","title":"encode_e","text":"<pre><code>encode_e(e_tuple: Union[List, Set, Tuple]) -&gt; Tuple\n</code></pre> <p>Sort and check the hyperedge tuple.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def encode_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; Tuple:\n    r\"\"\"\n    Sort and check the hyperedge tuple.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.add_v","title":"add_v","text":"<pre><code>add_v(v_id: Any, v_data: Optional[Dict] = None)\n</code></pre> <p>Add a vertex to the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>Dict</code>, optional): The vertex data. Defaults to None.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def add_v(self, v_id: Any, v_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a vertex to the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``Dict``, optional): The vertex data. Defaults to None.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.add_e","title":"add_e","text":"<pre><code>add_e(e_tuple: Tuple, e_data: Optional[Dict] = None)\n</code></pre> <p>Add a hyperedge to the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>Dict</code>, optional): The hyperedge data.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def add_e(self, e_tuple: Tuple, e_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a hyperedge to the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``Dict``, optional): The hyperedge data.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.remove_v","title":"remove_v","text":"<pre><code>remove_v(v_id: Any)\n</code></pre> <p>Remove a vertex from the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def remove_v(self, v_id: Any):\n    r\"\"\"\n    Remove a vertex from the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.remove_e","title":"remove_e","text":"<pre><code>remove_e(e_tuple: Tuple)\n</code></pre> <p>Remove a hyperedge from the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def remove_e(self, e_tuple: Tuple):\n    r\"\"\"\n    Remove a hyperedge from the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.update_v","title":"update_v","text":"<pre><code>update_v(v_id: Any)\n</code></pre> <p>Update the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def update_v(self, v_id: Any):\n    r\"\"\"\n    Update the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.update_e","title":"update_e","text":"<pre><code>update_e(e_tuple: Tuple)\n</code></pre> <p>Update the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def update_e(self, e_tuple: Tuple):\n    r\"\"\"\n    Update the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.has_v","title":"has_v","text":"<pre><code>has_v(v_id: Any) -&gt; bool\n</code></pre> <p>Return True if the vertex exists in the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def has_v(self, v_id: Any) -&gt; bool:\n    r\"\"\"\n    Return True if the vertex exists in the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.has_e","title":"has_e","text":"<pre><code>has_e(e_tuple: Tuple) -&gt; bool\n</code></pre> <p>Return True if the hyperedge exists in the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def has_e(self, e_tuple: Tuple) -&gt; bool:\n    r\"\"\"\n    Return True if the hyperedge exists in the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.degree_v","title":"degree_v","text":"<pre><code>degree_v(v_id: Any) -&gt; int\n</code></pre> <p>Return the degree of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def degree_v(self, v_id: Any) -&gt; int:\n    r\"\"\"\n    Return the degree of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.degree_e","title":"degree_e","text":"<pre><code>degree_e(e_tuple: Tuple) -&gt; int\n</code></pre> <p>Return the degree of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def degree_e(self, e_tuple: Tuple) -&gt; int:\n    r\"\"\"\n    Return the degree of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.nbr_e_of_v","title":"nbr_e_of_v","text":"<pre><code>nbr_e_of_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the hyperedge neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_e_of_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the hyperedge neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.nbr_v_of_e","title":"nbr_v_of_e","text":"<pre><code>nbr_v_of_e(e_tuple: Tuple) -&gt; list\n</code></pre> <p>Return the vertex neighbors of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Tuple</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_v_of_e(self, e_tuple: Tuple) -&gt; list:\n    r\"\"\"\n    Return the vertex neighbors of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Tuple``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.nbr_v","title":"nbr_v","text":"<pre><code>nbr_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the vertex neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def nbr_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the vertex neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.sub","title":"sub","text":"<pre><code>sub(v_name_list: List[str])\n</code></pre> <p>Return the sub-hypergraph.</p> <p>Args:     <code>v_name_list</code> (<code>List[str]</code>): The list of vertex ids.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def sub(self, v_name_list: List[str]):\n    r\"\"\"\n    Return the sub-hypergraph.\n\n    Args:\n        ``v_name_list`` (``List[str]``): The list of vertex ids.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.sub_from_v","title":"sub_from_v","text":"<pre><code>sub_from_v(v_id: Any, depth: int)\n</code></pre> <p>Return the sub-hypergraph from the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>depth</code> (<code>int</code>): The depth of the sub-hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def sub_from_v(self, v_id: Any, depth: int):\n    r\"\"\"\n    Return the sub-hypergraph from the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``depth`` (``int``): The depth of the sub-hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.query_v","title":"query_v","text":"<pre><code>query_v(filters: Dict[str, Any]) -&gt; List[str]\n</code></pre> <p>Query and return vertices that match the given filters.</p> <p>Args:     <code>filters</code> (<code>Dict[str, Any]</code>): A dictionary of conditions to filter vertices.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def query_v(self, filters: Dict[str, Any]) -&gt; List[str]:\n    r\"\"\"\n    Query and return vertices that match the given filters.\n\n    Args:\n        ``filters`` (``Dict[str, Any]``): A dictionary of conditions to filter vertices.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.query_e","title":"query_e","text":"<pre><code>query_e(filters: Dict[str, Any]) -&gt; List[Tuple]\n</code></pre> <p>Query and return hyperedges that match the given filters.</p> <p>Args:     <code>filters</code> (<code>Dict[str, Any]</code>): A dictionary of conditions to filter hyperedges.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def query_e(self, filters: Dict[str, Any]) -&gt; List[Tuple]:\n    r\"\"\"\n    Query and return hyperedges that match the given filters.\n\n    Args:\n        ``filters`` (``Dict[str, Any]``): A dictionary of conditions to filter hyperedges.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.stats","title":"stats","text":"<pre><code>stats() -&gt; dict\n</code></pre> <p>Return basic statistics of the hypergraph.</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def stats(self) -&gt; dict:\n    r\"\"\"\n    Return basic statistics of the hypergraph.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"api/base/#hyperdb.base.BaseHypergraphDB.draw","title":"draw","text":"<pre><code>draw(\n    port: int = 8080,\n    open_browser: bool = True,\n    blocking: bool = True,\n)\n</code></pre> <p>Draw the hypergraph data of the current HyperDB instance</p> <p>Args: <code>port</code>: Server port number, defaults to 8080 <code>open_browser</code>: Whether to automatically open the browser, defaults to True     <code>blocking</code>: Whether to block the main thread, defaults to True. Set to False for non-blocking mode.</p> <p>Returns:     HypergraphViewer instance</p> Source code in <code>hyperdb\\base.py</code> <pre><code>def draw(self, port: int = 8080, open_browser: bool = True, blocking: bool = True):\n    \"\"\"\n    Draw the hypergraph data of the current HyperDB instance\n\n    Args:  \n        ``port``: Server port number, defaults to 8080  \n        ``open_browser``: Whether to automatically open the browser, defaults to True\n        ``blocking``: Whether to block the main thread, defaults to True. Set to False for non-blocking mode.\n\n    Returns:\n        HypergraphViewer instance\n    \"\"\"\n    from .draw import draw_hypergraph\n\n    return draw_hypergraph(\n        hypergraph_db=self,\n        port=port,\n        open_browser=open_browser,\n        blocking=blocking\n    )\n</code></pre>"},{"location":"api/hypergraph/","title":"HypergraphDB Class","text":""},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB","title":"hyperdb.hypergraph.HypergraphDB  <code>dataclass</code>","text":"<pre><code>HypergraphDB(\n    storage_file: Union[str, Path] = \"my_hypergraph.hgdb\",\n    _v_data: Dict[str, Any] = dict(),\n    _e_data: Dict[Tuple, Any] = dict(),\n    _v_inci: Dict[str, Set[Tuple]] = (\n        lambda: defaultdict(set)\n    )(),\n)\n</code></pre> <p>               Bases: <code>BaseHypergraphDB</code></p> <p>Hypergraph database.</p>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB-attributes","title":"Attributes","text":""},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.all_v","title":"all_v  <code>cached</code> <code>property</code>","text":"<pre><code>all_v: List[str]\n</code></pre> <p>Return a list of all vertices in the hypergraph.</p>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.all_e","title":"all_e  <code>cached</code> <code>property</code>","text":"<pre><code>all_e: List[Tuple]\n</code></pre> <p>Return a list of all hyperedges in the hypergraph.</p>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.num_v","title":"num_v  <code>cached</code> <code>property</code>","text":"<pre><code>num_v: int\n</code></pre> <p>Return the number of vertices in the hypergraph.</p>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.num_e","title":"num_e  <code>cached</code> <code>property</code>","text":"<pre><code>num_e: int\n</code></pre> <p>Return the number of hyperedges in the hypergraph.</p>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB-functions","title":"Functions","text":""},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def __post_init__(self):\n    assert isinstance(self.storage_file, (str, Path))\n    if isinstance(self.storage_file, str):\n        self.storage_file = Path(self.storage_file)\n    if self.storage_file.exists():\n        self.load(self.storage_file)\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.load","title":"load","text":"<pre><code>load(storage_file: Path) -&gt; dict\n</code></pre> <p>Load the hypergraph database from the storage file.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def load(self, storage_file: Path) -&gt; dict:\n    r\"\"\"\n    Load the hypergraph database from the storage file.\n    \"\"\"\n    try:\n        with open(storage_file, \"rb\") as f:\n            data = pkl.load(f)\n        self._v_data = data.get(\"v_data\", {})\n        self._v_inci = data.get(\"v_inci\", {})\n        self._e_data = data.get(\"e_data\", {})\n        return True\n    except Exception as e:\n        return False\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.save","title":"save","text":"<pre><code>save(storage_file: Path) -&gt; dict\n</code></pre> <p>Save the hypergraph database to the storage file.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def save(self, storage_file: Path) -&gt; dict:\n    r\"\"\"\n    Save the hypergraph database to the storage file.\n    \"\"\"\n    data = {\n        \"v_data\": self._v_data,\n        \"v_inci\": self._v_inci,\n        \"e_data\": self._e_data,\n    }\n    try:\n        with open(storage_file, \"wb\") as f:\n            pkl.dump(data, f)\n        return True\n    except Exception as e:\n        return False\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.v","title":"v","text":"<pre><code>v(v_id: str, default: Any = None) -&gt; dict\n</code></pre> <p>Return the vertex data.</p> <p>Args:     <code>v_id</code> (<code>str</code>): The vertex id.     <code>default</code> (<code>Any</code>): The default value if the vertex does not exist.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def v(self, v_id: str, default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the vertex data.\n\n    Args:\n        ``v_id`` (``str``): The vertex id.\n        ``default`` (``Any``): The default value if the vertex does not exist.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    try:\n        return self._v_data[v_id]\n    except KeyError:\n        return default\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.e","title":"e","text":"<pre><code>e(\n    e_tuple: Union[List, Set, Tuple], default: Any = None\n) -&gt; dict\n</code></pre> <p>Return the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>default</code> (<code>Any</code>): The default value if the hyperedge does not exist.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def e(self, e_tuple: Union[List, Set, Tuple], default: Any = None) -&gt; dict:\n    r\"\"\"\n    Return the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``default`` (``Any``): The default value if the hyperedge does not exist.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (set, list, tuple)\n    ), \"The hyperedge must be a set, list, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    try:\n        return self._e_data[e_tuple]\n    except KeyError:\n        return default\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.encode_e","title":"encode_e","text":"<pre><code>encode_e(e_tuple: Union[List, Set, Tuple]) -&gt; Tuple\n</code></pre> <p>Sort and check the hyperedge tuple.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def encode_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; Tuple:\n    r\"\"\"\n    Sort and check the hyperedge tuple.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    tmp = sorted(list(set(e_tuple)))\n    for v_id in tmp:\n        assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n        assert (\n            v_id in self._v_data\n        ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return tuple(tmp)\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.add_v","title":"add_v","text":"<pre><code>add_v(v_id: Any, v_data: Optional[Dict] = None)\n</code></pre> <p>Add a vertex to the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>dict</code>, optional): The vertex data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def add_v(self, v_id: Any, v_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a vertex to the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``dict``, optional): The vertex data.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    if v_data is not None:\n        assert isinstance(v_data, dict), \"The vertex data must be a dictionary.\"\n    else:\n        v_data = {}\n    if v_id not in self._v_data:\n        self._v_data[v_id] = v_data\n        self._v_inci[v_id] = set()\n    else:\n        self._v_data[v_id].update(v_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.add_e","title":"add_e","text":"<pre><code>add_e(\n    e_tuple: Union[List, Set, Tuple],\n    e_data: Optional[Dict] = None,\n)\n</code></pre> <p>Add a hyperedge to the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>dict</code>, optional): The hyperedge data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def add_e(self, e_tuple: Union[List, Set, Tuple], e_data: Optional[Dict] = None):\n    r\"\"\"\n    Add a hyperedge to the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``dict``, optional): The hyperedge data.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    if e_data is not None:\n        assert isinstance(e_data, dict), \"The hyperedge data must be a dictionary.\"\n    else:\n        e_data = {}\n    e_tuple = self.encode_e(e_tuple)\n    if e_tuple not in self._e_data:\n        self._e_data[e_tuple] = e_data\n        for v in e_tuple:\n            self._v_inci[v].add(e_tuple)\n    else:\n        self._e_data[e_tuple].update(e_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.remove_v","title":"remove_v","text":"<pre><code>remove_v(v_id: Any)\n</code></pre> <p>Remove a vertex from the hypergraph.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def remove_v(self, v_id: Any):\n    r\"\"\"\n    Remove a vertex from the hypergraph.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    del self._v_data[v_id]\n    old_e_tuples, new_e_tuples = [], []\n    for e_tuple in self._v_inci[v_id]:\n        new_e_tuple = self.encode_e(set(e_tuple) - {v_id})\n        if len(new_e_tuple) &gt;= 2:\n            # todo: maybe new e tuple existing in hg, need to merge to hyperedge information\n            self._e_data[new_e_tuple] = deepcopy(self._e_data[e_tuple])\n        del self._e_data[e_tuple]\n        old_e_tuples.append(e_tuple)\n        new_e_tuples.append(new_e_tuple)\n    del self._v_inci[v_id]\n    for old_e_tuple, new_e_tuple in zip(old_e_tuples, new_e_tuples):\n        for _v_id in old_e_tuple:\n            if _v_id != v_id:\n                self._v_inci[_v_id].remove(old_e_tuple)\n                if len(new_e_tuple) &gt;= 2:\n                    self._v_inci[_v_id].add(new_e_tuple)\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.remove_e","title":"remove_e","text":"<pre><code>remove_e(e_tuple: Union[List, Set, Tuple])\n</code></pre> <p>Remove a hyperedge from the hypergraph.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def remove_e(self, e_tuple: Union[List, Set, Tuple]):\n    r\"\"\"\n    Remove a hyperedge from the hypergraph.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    for v in e_tuple:\n        self._v_inci[v].remove(e_tuple)\n    del self._e_data[e_tuple]\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.update_v","title":"update_v","text":"<pre><code>update_v(v_id: Any, v_data: dict)\n</code></pre> <p>Update the vertex data.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.     <code>v_data</code> (<code>dict</code>): The vertex data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def update_v(self, v_id: Any, v_data: dict):\n    r\"\"\"\n    Update the vertex data.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n        ``v_data`` (``dict``): The vertex data.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert isinstance(v_data, dict), \"The vertex data must be a dictionary.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    self._v_data[v_id].update(v_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.update_e","title":"update_e","text":"<pre><code>update_e(e_tuple: Union[List, Set, Tuple], e_data: dict)\n</code></pre> <p>Update the hyperedge data.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).     <code>e_data</code> (<code>dict</code>): The hyperedge data.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def update_e(self, e_tuple: Union[List, Set, Tuple], e_data: dict):\n    r\"\"\"\n    Update the hyperedge data.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n        ``e_data`` (``dict``): The hyperedge data.\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    assert isinstance(e_data, dict), \"The hyperedge data must be a dictionary.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    self._e_data[e_tuple].update(e_data)\n    self._clear_cache()\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.has_v","title":"has_v","text":"<pre><code>has_v(v_id: Any) -&gt; bool\n</code></pre> <p>Check if the vertex exists.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def has_v(self, v_id: Any) -&gt; bool:\n    r\"\"\"\n    Check if the vertex exists.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    return v_id in self._v_data\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.has_e","title":"has_e","text":"<pre><code>has_e(e_tuple: Union[List, Set, Tuple]) -&gt; bool\n</code></pre> <p>Check if the hyperedge exists.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def has_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; bool:\n    r\"\"\"\n    Check if the hyperedge exists.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    try:\n        e_tuple = self.encode_e(e_tuple)\n    except AssertionError:\n        return False\n    return e_tuple in self._e_data\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.degree_v","title":"degree_v","text":"<pre><code>degree_v(v_id: Any) -&gt; int\n</code></pre> <p>Return the degree of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def degree_v(self, v_id: Any) -&gt; int:\n    r\"\"\"\n    Return the degree of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return len(self._v_inci[v_id])\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.degree_e","title":"degree_e","text":"<pre><code>degree_e(e_tuple: Union[List, Set, Tuple]) -&gt; int\n</code></pre> <p>Return the degree of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def degree_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; int:\n    r\"\"\"\n    Return the degree of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    return len(e_tuple)\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.nbr_e_of_v","title":"nbr_e_of_v","text":"<pre><code>nbr_e_of_v(v_id: Any) -&gt; list\n</code></pre> <p>Return the incident hyperedges of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_e_of_v(self, v_id: Any) -&gt; list:\n    r\"\"\"\n    Return the incident hyperedges of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    return set(self._v_inci[v_id])\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.nbr_v_of_e","title":"nbr_v_of_e","text":"<pre><code>nbr_v_of_e(e_tuple: Union[List, Set, Tuple]) -&gt; list\n</code></pre> <p>Return the incident vertices of the hyperedge.</p> <p>Args:     <code>e_tuple</code> (<code>Union[List, Set, Tuple]</code>): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_v_of_e(self, e_tuple: Union[List, Set, Tuple]) -&gt; list:\n    r\"\"\"\n    Return the incident vertices of the hyperedge.\n\n    Args:\n        ``e_tuple`` (``Union[List, Set, Tuple]``): The hyperedge tuple: (v1_name, v2_name, ..., vn_name).\n    \"\"\"\n    assert isinstance(\n        e_tuple, (list, set, tuple)\n    ), \"The hyperedge must be a list, set, or tuple of vertex ids.\"\n    e_tuple = self.encode_e(e_tuple)\n    assert (\n        e_tuple in self._e_data\n    ), f\"The hyperedge {e_tuple} does not exist in the hypergraph.\"\n    return set(e_tuple)\n</code></pre>"},{"location":"api/hypergraph/#hyperdb.hypergraph.HypergraphDB.nbr_v","title":"nbr_v","text":"<pre><code>nbr_v(v_id: Any, exclude_self=True) -&gt; list\n</code></pre> <p>Return the neighbors of the vertex.</p> <p>Args:     <code>v_id</code> (<code>Any</code>): The vertex id.</p> Source code in <code>hyperdb\\hypergraph.py</code> <pre><code>def nbr_v(self, v_id: Any, exclude_self=True) -&gt; list:\n    r\"\"\"\n    Return the neighbors of the vertex.\n\n    Args:\n        ``v_id`` (``Any``): The vertex id.\n    \"\"\"\n    assert isinstance(v_id, Hashable), \"The vertex id must be hashable.\"\n    assert (\n        v_id in self._v_data\n    ), f\"The vertex {v_id} does not exist in the hypergraph.\"\n    nbrs = set()\n    for e_tuple in self._v_inci[v_id]:\n        nbrs.update(e_tuple)\n    if exclude_self:\n        nbrs.remove(v_id)\n    return set(nbrs)\n</code></pre>"},{"location":"api/visualization/","title":"Visualization","text":"<p>Hypergraph-DB provides built-in visualization capabilities through web-based interactive displays.</p>"},{"location":"api/visualization/#hypergraphviewer-class","title":"HypergraphViewer Class","text":""},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer","title":"hyperdb.draw.HypergraphViewer","text":"<pre><code>HypergraphViewer(\n    hypergraph_db: HypergraphDB, port: int = 8080\n)\n</code></pre> <p>Hypergraph visualization tool</p> Source code in <code>hyperdb\\draw.py</code> <pre><code>def __init__(self, hypergraph_db: HypergraphDB, port: int = 8080):\n    self.hypergraph_db = hypergraph_db\n    self.port = port\n    self.html_content = self._generate_html_with_data()\n</code></pre>"},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer.hypergraph_db","title":"hypergraph_db  <code>instance-attribute</code>","text":"<pre><code>hypergraph_db = hypergraph_db\n</code></pre>"},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer.port","title":"port  <code>instance-attribute</code>","text":"<pre><code>port = port\n</code></pre>"},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer.html_content","title":"html_content  <code>instance-attribute</code>","text":"<pre><code>html_content = _generate_html_with_data()\n</code></pre>"},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer.start_server","title":"start_server","text":"<pre><code>start_server(open_browser: bool = True)\n</code></pre> <p>Start simple HTTP server</p> Source code in <code>hyperdb\\draw.py</code> <pre><code>def start_server(self, open_browser: bool = True):\n    \"\"\"Start simple HTTP server\"\"\"\n\n    class CustomHTTPRequestHandler(http.server.BaseHTTPRequestHandler):\n        def __init__(self, html_content, *args, **kwargs):\n            self.html_content = html_content\n            super().__init__(*args, **kwargs)\n\n        def do_GET(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(self.html_content.encode('utf-8'))\n\n        def log_message(self, format, *args):\n            # Disable log output\n            pass\n\n    def run_server():\n        handler = lambda *args, **kwargs: CustomHTTPRequestHandler(self.html_content, *args, **kwargs)\n        self.httpd = socketserver.TCPServer((\"127.0.0.1\", self.port), handler)\n        self.httpd.serve_forever()\n\n    # Start server in new thread\n    server_thread = threading.Thread(target=run_server, daemon=True)\n    server_thread.start()\n\n    if open_browser:\n        # Wait for server to start\n        import time\n        time.sleep(1)\n\n        # Open browser\n        url = f\"http://127.0.0.1:{self.port}\"\n        print(f\"\ud83d\ude80 Hypergraph visualization server started: {url}\")\n        webbrowser.open(url)\n\n    return server_thread\n</code></pre>"},{"location":"api/visualization/#hyperdb.draw.HypergraphViewer.stop_server","title":"stop_server","text":"<pre><code>stop_server()\n</code></pre> <p>Stop the HTTP server</p> Source code in <code>hyperdb\\draw.py</code> <pre><code>def stop_server(self):\n    \"\"\"Stop the HTTP server\"\"\"\n    if hasattr(self, 'httpd'):\n        self.httpd.shutdown()\n        self.httpd.server_close()\n</code></pre>"},{"location":"api/visualization/#usage-example","title":"Usage Example","text":"<pre><code>from hyperdb import HypergraphDB\n\n# Create and populate hypergraph\nhg = HypergraphDB()\nhg.add_v(1, {\"name\": \"Alice\"})\nhg.add_v(2, {\"name\": \"Bob\"})\nhg.add_v(3, {\"name\": \"Charlie\"})\n\nhg.add_e((1, 2), {\"relation\": \"friends\"})\nhg.add_e((1, 2, 3), {\"relation\": \"team\"})\n\n# Visualize - opens in browser\nhg.draw()\n</code></pre>"},{"location":"api/visualization/#visualization-features","title":"Visualization Features","text":"<ul> <li>Interactive Display: Click and drag to explore the hypergraph structure</li> <li>Vertex Information: Hover over vertices to see their attributes</li> <li>Hyperedge Visualization: Visual representation of multi-way connections</li> <li>Web-based: Runs in your default web browser</li> <li>Real-time Updates: Reflects current hypergraph state</li> </ul>"},{"location":"api/visualization/#customization","title":"Customization","text":"<p>The visualization can be customized by modifying the HTML template located in: <pre><code>hyperdb/templates/hypergraph_viewer.html\n</code></pre></p>"},{"location":"api/visualization/#available-options","title":"Available Options","text":"<p>When calling <code>draw()</code>, you can specify:</p> <ul> <li><code>port</code>: Port number for the web server (default: 8080)</li> <li><code>open_browser</code>: Whether to automatically open the browser (default: True)</li> </ul> <pre><code># Use custom port\nhg.draw(port=9000)\n\n# Don't automatically open browser\nhg.draw(open_browser=False)\n</code></pre>"},{"location":"api/visualization/#technical-details","title":"Technical Details","text":"<p>The visualization system:</p> <ol> <li>Converts hypergraph data to JSON format</li> <li>Generates HTML with embedded data and D3.js visualization</li> <li>Starts a local web server</li> <li>Opens the visualization in your default browser</li> </ol> <p>The visualization uses: - D3.js for interactive graphics - Local HTTP server for serving content - JSON data embedding for efficient data transfer</p>"},{"location":"api/visualization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/visualization/#common-issues","title":"Common Issues","text":"<p>Port already in use: <pre><code># Try a different port\nhg.draw(port=8081)\n</code></pre></p> <p>Browser doesn't open: - Manually navigate to <code>http://localhost:8080</code> (or your specified port) - Check firewall settings</p> <p>Visualization appears empty: - Ensure your hypergraph has vertices and edges - Check browser console for JavaScript errors</p>"},{"location":"api/visualization/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Large hypergraphs (&gt;1000 vertices) may render slowly</li> <li>Consider filtering or sampling for very large datasets</li> <li>The visualization loads all data into browser memory</li> </ul>"},{"location":"api/visualization/#future-enhancements","title":"Future Enhancements","text":"<p>Planned improvements include:</p> <ul> <li>Export capabilities (PNG, SVG, PDF)</li> <li>Layout algorithms for better visualization</li> <li>Filtering options for large graphs</li> <li>Custom styling and themes</li> <li>Interactive editing capabilities</li> </ul>"},{"location":"examples/advanced/","title":"Advanced Examples","text":"<p>This page showcases advanced usage patterns and complex applications of Hypergraph-DB.</p>"},{"location":"examples/advanced/#advanced-pattern-1-temporal-hypergraphs","title":"Advanced Pattern 1: Temporal Hypergraphs","text":"<p>Model relationships that evolve over time:</p> <pre><code>from hyperdb import HypergraphDB\nfrom datetime import datetime, timedelta\nimport json\n\nclass TemporalHypergraph(HypergraphDB):\n    \"\"\"Extended HypergraphDB with temporal capabilities.\"\"\"\n\n    def add_temporal_edge(self, vertices, start_time, end_time=None, **kwargs):\n        \"\"\"Add a hyperedge with temporal information.\"\"\"\n        edge_attr = {\n            \"start_time\": start_time.isoformat(),\n            \"end_time\": end_time.isoformat() if end_time else None,\n            \"active\": end_time is None or datetime.now() &lt;= end_time,\n            **kwargs\n        }\n        return self.add_e(vertices, edge_attr)\n\n    def get_active_edges_at_time(self, timestamp):\n        \"\"\"Get all edges active at a specific time.\"\"\"\n        active_edges = []\n        for edge_id in self.all_e:\n            edge_data = self.e[edge_id]\n            start = datetime.fromisoformat(edge_data[\"start_time\"])\n            end = datetime.fromisoformat(edge_data[\"end_time\"]) if edge_data[\"end_time\"] else datetime.now()\n\n            if start &lt;= timestamp &lt;= end:\n                active_edges.append(edge_id)\n        return active_edges\n\n    def get_edge_timeline(self, vertex_id):\n        \"\"\"Get timeline of all edges involving a vertex.\"\"\"\n        timeline = []\n        for edge_id in self.N_e(vertex_id):\n            edge_data = self.e[edge_id]\n            timeline.append({\n                \"edge_id\": edge_id,\n                \"vertices\": list(self.N_v_of_e(edge_id)),\n                \"start\": edge_data[\"start_time\"],\n                \"end\": edge_data[\"end_time\"],\n                \"duration_days\": self._calculate_duration(edge_data)\n            })\n        return sorted(timeline, key=lambda x: x[\"start\"])\n\n    def _calculate_duration(self, edge_data):\n        \"\"\"Calculate edge duration in days.\"\"\"\n        start = datetime.fromisoformat(edge_data[\"start_time\"])\n        end = datetime.fromisoformat(edge_data[\"end_time\"]) if edge_data[\"end_time\"] else datetime.now()\n        return (end - start).days\n\n# Example: Academic collaboration network over time\ntemporal_hg = TemporalHypergraph()\n\n# Add researchers\nresearchers = [\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\"]\nfor researcher in researchers:\n    temporal_hg.add_v(researcher, {\"name\": researcher.title(), \"type\": \"researcher\"})\n\n# Add temporal collaborations\nbase_date = datetime(2020, 1, 1)\n\n# Early collaborations\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\"), \n    base_date, \n    base_date + timedelta(days=180),\n    project=\"Deep Learning Basics\",\n    type=\"research\"\n)\n\n# Expanding collaboration\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\", \"charlie\"), \n    base_date + timedelta(days=90),\n    base_date + timedelta(days=365),\n    project=\"Advanced AI Systems\",\n    type=\"research\"\n)\n\n# Large team formation\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\"), \n    base_date + timedelta(days=200),\n    base_date + timedelta(days=500),\n    project=\"AI for Social Good\",\n    type=\"research\",\n    funding=\"NSF Grant\"\n)\n\n# Ongoing collaboration\ntemporal_hg.add_temporal_edge(\n    (\"charlie\", \"diana\"), \n    base_date + timedelta(days=400),\n    None,  # Still ongoing\n    project=\"Quantum ML\",\n    type=\"research\"\n)\n\n# Analyze temporal patterns\nprint(\"Alice's collaboration timeline:\")\nalice_timeline = temporal_hg.get_edge_timeline(\"alice\")\nfor collab in alice_timeline:\n    print(f\"  {collab['start'][:10]} - {collab['end'][:10] if collab['end'] else 'ongoing'}: \"\n          f\"{len(collab['vertices'])} people, {collab['duration_days']} days\")\n\n# Find active collaborations at specific time\nquery_date = base_date + timedelta(days=300)\nactive_edges = temporal_hg.get_active_edges_at_time(query_date)\nprint(f\"\\nActive collaborations on {query_date.date()}:\")\nfor edge_id in active_edges:\n    participants = list(temporal_hg.N_v_of_e(edge_id))\n    edge_data = temporal_hg.e[edge_id]\n    print(f\"  {edge_data.get('project', 'Unknown')}: {participants}\")\n</code></pre>"},{"location":"examples/advanced/#advanced-pattern-2-multi-layer-hypergraphs","title":"Advanced Pattern 2: Multi-Layer Hypergraphs","text":"<p>Model different types of relationships in separate layers:</p> <pre><code>from hyperdb import HypergraphDB\nfrom enum import Enum\n\nclass RelationshipType(Enum):\n    SOCIAL = \"social\"\n    PROFESSIONAL = \"professional\"\n    FAMILY = \"family\"\n    ACADEMIC = \"academic\"\n\nclass MultiLayerHypergraph:\n    \"\"\"Hypergraph with multiple relationship layers.\"\"\"\n\n    def __init__(self):\n        self.layers = {rel_type: HypergraphDB() for rel_type in RelationshipType}\n        self.global_vertices = {}\n\n    def add_vertex(self, vid, attributes):\n        \"\"\"Add vertex to all layers.\"\"\"\n        self.global_vertices[vid] = attributes\n        for layer in self.layers.values():\n            layer.add_v(vid, attributes)\n\n    def add_edge(self, vertices, layer_type: RelationshipType, attributes):\n        \"\"\"Add edge to specific layer.\"\"\"\n        layer = self.layers[layer_type]\n        edge_id = layer.add_e(vertices, {**attributes, \"layer\": layer_type.value})\n        return edge_id\n\n    def get_layer(self, layer_type: RelationshipType):\n        \"\"\"Get specific layer.\"\"\"\n        return self.layers[layer_type]\n\n    def get_cross_layer_neighbors(self, vertex_id):\n        \"\"\"Find neighbors across all layers.\"\"\"\n        all_neighbors = set()\n        layer_neighbors = {}\n\n        for layer_type, layer in self.layers.items():\n            if vertex_id in layer.all_v:\n                neighbors = layer.N_v(vertex_id)\n                layer_neighbors[layer_type.value] = neighbors\n                all_neighbors.update(neighbors)\n\n        return {\n            \"all_neighbors\": all_neighbors,\n            \"by_layer\": layer_neighbors\n        }\n\n    def find_multi_layer_communities(self, min_layers=2):\n        \"\"\"Find communities that exist across multiple layers.\"\"\"\n        communities = []\n\n        # Get all possible vertex combinations\n        all_vertices = list(self.global_vertices.keys())\n\n        for i in range(len(all_vertices)):\n            for j in range(i + 1, len(all_vertices)):\n                for k in range(j + 1, len(all_vertices)):\n                    vertex_set = {all_vertices[i], all_vertices[j], all_vertices[k]}\n\n                    # Check how many layers contain this community\n                    layers_with_community = []\n                    for layer_type, layer in self.layers.items():\n                        # Check if these vertices are connected in this layer\n                        shared_edges = None\n                        for vertex in vertex_set:\n                            vertex_edges = set(layer.N_e(vertex)) if vertex in layer.all_v else set()\n                            if shared_edges is None:\n                                shared_edges = vertex_edges\n                            else:\n                                shared_edges &amp;= vertex_edges\n\n                        if shared_edges:  # Found shared edges\n                            layers_with_community.append(layer_type.value)\n\n                    if len(layers_with_community) &gt;= min_layers:\n                        communities.append({\n                            \"vertices\": list(vertex_set),\n                            \"layers\": layers_with_community,\n                            \"strength\": len(layers_with_community)\n                        })\n\n        return sorted(communities, key=lambda x: x[\"strength\"], reverse=True)\n\n# Example usage\nmlhg = MultiLayerHypergraph()\n\n# Add people\npeople = {\n    \"alice\": {\"name\": \"Alice\", \"age\": 30, \"profession\": \"Engineer\"},\n    \"bob\": {\"name\": \"Bob\", \"age\": 28, \"profession\": \"Designer\"},\n    \"charlie\": {\"name\": \"Charlie\", \"age\": 32, \"profession\": \"Manager\"},\n    \"diana\": {\"name\": \"Diana\", \"age\": 29, \"profession\": \"Scientist\"},\n    \"eve\": {\"name\": \"Eve\", \"age\": 27, \"profession\": \"Analyst\"}\n}\n\nfor person_id, info in people.items():\n    mlhg.add_vertex(person_id, info)\n\n# Add relationships in different layers\n# Social layer\nmlhg.add_edge((\"alice\", \"bob\"), RelationshipType.SOCIAL, \n              {\"type\": \"friendship\", \"since\": \"2020\", \"strength\": \"strong\"})\nmlhg.add_edge((\"alice\", \"charlie\", \"diana\"), RelationshipType.SOCIAL,\n              {\"type\": \"friend_group\", \"activity\": \"hiking\"})\n\n# Professional layer\nmlhg.add_edge((\"alice\", \"bob\", \"charlie\"), RelationshipType.PROFESSIONAL,\n              {\"type\": \"project_team\", \"project\": \"WebApp\", \"role\": \"development\"})\nmlhg.add_edge((\"charlie\", \"diana\", \"eve\"), RelationshipType.PROFESSIONAL,\n              {\"type\": \"management_team\", \"department\": \"Engineering\"})\n\n# Academic layer\nmlhg.add_edge((\"alice\", \"diana\"), RelationshipType.ACADEMIC,\n              {\"type\": \"research_collaboration\", \"field\": \"AI\"})\nmlhg.add_edge((\"bob\", \"charlie\", \"eve\"), RelationshipType.ACADEMIC,\n              {\"type\": \"study_group\", \"subject\": \"Data Science\"})\n\n# Analysis\nprint(\"Multi-layer analysis:\")\n\n# Analyze Alice's cross-layer connections\nalice_connections = mlhg.get_cross_layer_neighbors(\"alice\")\nprint(f\"Alice's connections across layers:\")\nfor layer, neighbors in alice_connections[\"by_layer\"].items():\n    if neighbors:\n        print(f\"  {layer}: {list(neighbors)}\")\n\n# Find multi-layer communities\ncommunities = mlhg.find_multi_layer_communities(min_layers=2)\nprint(f\"\\nMulti-layer communities:\")\nfor community in communities:\n    print(f\"  {community['vertices']} - appears in {community['strength']} layers: {community['layers']}\")\n\n# Layer-specific analysis\nsocial_layer = mlhg.get_layer(RelationshipType.SOCIAL)\nprofessional_layer = mlhg.get_layer(RelationshipType.PROFESSIONAL)\n\nprint(f\"\\nLayer statistics:\")\nprint(f\"  Social: {social_layer.num_v} vertices, {social_layer.num_e} edges\")\nprint(f\"  Professional: {professional_layer.num_v} vertices, {professional_layer.num_e} edges\")\n</code></pre>"},{"location":"examples/advanced/#advanced-pattern-3-hypergraph-analytics-and-metrics","title":"Advanced Pattern 3: Hypergraph Analytics and Metrics","text":"<p>Implement advanced analytics for hypergraph structures:</p> <pre><code>from hyperdb import HypergraphDB\nfrom collections import defaultdict, Counter\nimport math\nfrom itertools import combinations\n\nclass HypergraphAnalytics:\n    \"\"\"Advanced analytics for hypergraphs.\"\"\"\n\n    def __init__(self, hypergraph: HypergraphDB):\n        self.hg = hypergraph\n\n    def clustering_coefficient(self, vertex_id):\n        \"\"\"Calculate clustering coefficient for a vertex in hypergraph context.\"\"\"\n        # Get neighbors of the vertex\n        neighbors = self.hg.N_v(vertex_id)\n        if len(neighbors) &lt; 2:\n            return 0.0\n\n        # Count triangular relationships (3-way connections)\n        triangular_connections = 0\n        possible_triangles = len(list(combinations(neighbors, 2)))\n\n        for neighbor1, neighbor2 in combinations(neighbors, 2):\n            # Check if vertex_id, neighbor1, neighbor2 form a triangle\n            # (are connected by a hyperedge containing all three)\n            vertex_edges = set(self.hg.N_e(vertex_id))\n            neighbor1_edges = set(self.hg.N_e(neighbor1))\n            neighbor2_edges = set(self.hg.N_e(neighbor2))\n\n            common_edges = vertex_edges &amp; neighbor1_edges &amp; neighbor2_edges\n            if common_edges:\n                triangular_connections += 1\n\n        return triangular_connections / possible_triangles if possible_triangles &gt; 0 else 0.0\n\n    def hyperedge_centrality(self, edge_id):\n        \"\"\"Calculate centrality of a hyperedge based on its connectivity.\"\"\"\n        vertices_in_edge = self.hg.N_v_of_e(edge_id)\n        edge_size = len(vertices_in_edge)\n\n        # Calculate how well-connected the vertices in this edge are\n        total_connections = 0\n        for vertex in vertices_in_edge:\n            total_connections += self.hg.degree_v(vertex)\n\n        # Normalize by edge size\n        avg_connectivity = total_connections / edge_size if edge_size &gt; 0 else 0\n\n        # Weight by edge size (larger edges potentially more important)\n        centrality = avg_connectivity * math.log(edge_size + 1)\n\n        return centrality\n\n    def find_core_vertices(self, k_core=2):\n        \"\"\"Find k-core vertices (vertices with degree &gt;= k).\"\"\"\n        core_vertices = []\n        for vertex in self.hg.all_v:\n            if self.hg.degree_v(vertex) &gt;= k_core:\n                core_vertices.append({\n                    \"vertex\": vertex,\n                    \"degree\": self.hg.degree_v(vertex),\n                    \"attributes\": self.hg.v(vertex)\n                })\n\n        return sorted(core_vertices, key=lambda x: x[\"degree\"], reverse=True)\n\n    def community_detection_simple(self):\n        \"\"\"Simple community detection based on shared hyperedges.\"\"\"\n        communities = []\n        visited_vertices = set()\n\n        for vertex in self.hg.all_v:\n            if vertex in visited_vertices:\n                continue\n\n            # Start a new community\n            community = {vertex}\n            queue = [vertex]\n\n            while queue:\n                current_vertex = queue.pop(0)\n                # Get all vertices connected via hyperedges\n                neighbors = self.hg.N_v(current_vertex)\n\n                for neighbor in neighbors:\n                    if neighbor not in community:\n                        community.add(neighbor)\n                        queue.append(neighbor)\n\n            # Mark all vertices in this community as visited\n            visited_vertices.update(community)\n            communities.append(list(community))\n\n        return communities\n\n    def hyperedge_overlap_analysis(self):\n        \"\"\"Analyze overlaps between hyperedges.\"\"\"\n        edge_list = list(self.hg.all_e)\n        overlaps = []\n\n        for i, edge1 in enumerate(edge_list):\n            for j, edge2 in enumerate(edge_list[i+1:], i+1):\n                vertices1 = self.hg.N_v_of_e(edge1)\n                vertices2 = self.hg.N_v_of_e(edge2)\n\n                intersection = vertices1 &amp; vertices2\n                union = vertices1 | vertices2\n\n                if intersection:  # There is an overlap\n                    jaccard_similarity = len(intersection) / len(union)\n                    overlap_size = len(intersection)\n\n                    overlaps.append({\n                        \"edge1\": edge1,\n                        \"edge2\": edge2,\n                        \"overlap_vertices\": list(intersection),\n                        \"overlap_size\": overlap_size,\n                        \"jaccard_similarity\": jaccard_similarity,\n                        \"edge1_size\": len(vertices1),\n                        \"edge2_size\": len(vertices2)\n                    })\n\n        return sorted(overlaps, key=lambda x: x[\"jaccard_similarity\"], reverse=True)\n\n    def structural_statistics(self):\n        \"\"\"Calculate comprehensive structural statistics.\"\"\"\n        vertices = list(self.hg.all_v)\n        edges = list(self.hg.all_e)\n\n        # Degree statistics\n        vertex_degrees = [self.hg.degree_v(v) for v in vertices]\n        edge_sizes = [self.hg.degree_e(e) for e in edges]\n\n        # Clustering coefficients\n        clustering_coeffs = [self.clustering_coefficient(v) for v in vertices]\n\n        # Edge centralities\n        edge_centralities = [self.hyperedge_centrality(e) for e in edges]\n\n        return {\n            \"basic_stats\": {\n                \"num_vertices\": len(vertices),\n                \"num_edges\": len(edges),\n                \"density\": len(edges) / (2 ** len(vertices) - len(vertices) - 1) if len(vertices) &gt; 1 else 0\n            },\n            \"degree_stats\": {\n                \"avg_vertex_degree\": sum(vertex_degrees) / len(vertex_degrees) if vertex_degrees else 0,\n                \"max_vertex_degree\": max(vertex_degrees) if vertex_degrees else 0,\n                \"min_vertex_degree\": min(vertex_degrees) if vertex_degrees else 0,\n                \"degree_distribution\": Counter(vertex_degrees)\n            },\n            \"edge_stats\": {\n                \"avg_edge_size\": sum(edge_sizes) / len(edge_sizes) if edge_sizes else 0,\n                \"max_edge_size\": max(edge_sizes) if edge_sizes else 0,\n                \"min_edge_size\": min(edge_sizes) if edge_sizes else 0,\n                \"size_distribution\": Counter(edge_sizes)\n            },\n            \"clustering_stats\": {\n                \"avg_clustering\": sum(clustering_coeffs) / len(clustering_coeffs) if clustering_coeffs else 0,\n                \"max_clustering\": max(clustering_coeffs) if clustering_coeffs else 0,\n                \"vertices_with_clustering\": len([c for c in clustering_coeffs if c &gt; 0])\n            },\n            \"centrality_stats\": {\n                \"avg_edge_centrality\": sum(edge_centralities) / len(edge_centralities) if edge_centralities else 0,\n                \"max_edge_centrality\": max(edge_centralities) if edge_centralities else 0\n            }\n        }\n\n# Example usage\nhg = HypergraphDB()\n\n# Create a complex network\nresearchers = {f\"researcher_{i}\": {\"name\": f\"Dr. {chr(65+i)}\", \"field\": [\"AI\", \"ML\", \"NLP\", \"Vision\"][i%4]} \n               for i in range(20)}\n\nfor rid, info in researchers.items():\n    hg.add_v(rid, info)\n\n# Add various sized collaborations\ncollaborations = [\n    # Small collaborations\n    ((\"researcher_0\", \"researcher_1\"), {\"type\": \"paper\", \"size\": \"small\"}),\n    ((\"researcher_2\", \"researcher_3\"), {\"type\": \"paper\", \"size\": \"small\"}),\n\n    # Medium collaborations\n    ((\"researcher_0\", \"researcher_2\", \"researcher_4\"), {\"type\": \"paper\", \"size\": \"medium\"}),\n    ((\"researcher_1\", \"researcher_3\", \"researcher_5\"), {\"type\": \"paper\", \"size\": \"medium\"}),\n    ((\"researcher_6\", \"researcher_7\", \"researcher_8\"), {\"type\": \"paper\", \"size\": \"medium\"}),\n\n    # Large collaborations\n    ((\"researcher_0\", \"researcher_1\", \"researcher_2\", \"researcher_4\", \"researcher_6\"), \n     {\"type\": \"grant\", \"size\": \"large\"}),\n    ((\"researcher_3\", \"researcher_5\", \"researcher_7\", \"researcher_8\", \"researcher_9\", \"researcher_10\"), \n     {\"type\": \"grant\", \"size\": \"large\"}),\n\n    # Very large collaboration\n    (tuple(f\"researcher_{i}\" for i in range(10, 18)), {\"type\": \"conference\", \"size\": \"xlarge\"})\n]\n\nfor collab_vertices, collab_info in collaborations:\n    hg.add_e(collab_vertices, collab_info)\n\n# Perform analytics\nanalytics = HypergraphAnalytics(hg)\n\n# Comprehensive analysis\nstats = analytics.structural_statistics()\nprint(\"Structural Statistics:\")\nprint(f\"  Basic: {stats['basic_stats']}\")\nprint(f\"  Degrees: avg={stats['degree_stats']['avg_vertex_degree']:.2f}, \"\n      f\"max={stats['degree_stats']['max_vertex_degree']}\")\nprint(f\"  Edge sizes: avg={stats['edge_stats']['avg_edge_size']:.2f}, \"\n      f\"max={stats['edge_stats']['max_edge_size']}\")\nprint(f\"  Clustering: avg={stats['clustering_stats']['avg_clustering']:.3f}\")\n\n# Find core researchers\ncore_researchers = analytics.find_core_vertices(k_core=2)\nprint(f\"\\nCore researchers (degree &gt;= 2):\")\nfor researcher in core_researchers[:5]:  # Top 5\n    print(f\"  {researcher['attributes']['name']}: degree {researcher['degree']}\")\n\n# Analyze hyperedge overlaps\noverlaps = analytics.hyperedge_overlap_analysis()\nprint(f\"\\nTop hyperedge overlaps:\")\nfor overlap in overlaps[:3]:  # Top 3\n    print(f\"  Edges {overlap['edge1']} &amp; {overlap['edge2']}: \"\n          f\"{overlap['overlap_size']} shared vertices, \"\n          f\"Jaccard={overlap['jaccard_similarity']:.3f}\")\n\n# Community detection\ncommunities = analytics.community_detection_simple()\nprint(f\"\\nDetected {len(communities)} communities:\")\nfor i, community in enumerate(communities):\n    if len(community) &gt; 1:  # Only show non-trivial communities\n        names = [researchers[r][\"name\"] for r in community]\n        print(f\"  Community {i+1}: {names}\")\n</code></pre>"},{"location":"examples/advanced/#advanced-pattern-4-dynamic-hypergraph-updates","title":"Advanced Pattern 4: Dynamic Hypergraph Updates","text":"<p>Handle dynamic updates and maintain consistency:</p> <pre><code>from hyperdb import HypergraphDB\nimport time\nfrom typing import Dict, List, Set, Callable\n\nclass DynamicHypergraph(HypergraphDB):\n    \"\"\"Extended hypergraph with change tracking and callbacks.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.change_log = []\n        self.callbacks = {\n            'vertex_added': [],\n            'vertex_removed': [],\n            'vertex_updated': [],\n            'edge_added': [],\n            'edge_removed': [],\n            'edge_updated': []\n        }\n        self.version = 1\n\n    def register_callback(self, event_type: str, callback: Callable):\n        \"\"\"Register callback for specific events.\"\"\"\n        if event_type in self.callbacks:\n            self.callbacks[event_type].append(callback)\n\n    def _log_change(self, operation: str, entity_type: str, entity_id, old_value=None, new_value=None):\n        \"\"\"Log changes for history tracking.\"\"\"\n        change = {\n            'timestamp': time.time(),\n            'version': self.version,\n            'operation': operation,\n            'entity_type': entity_type,\n            'entity_id': entity_id,\n            'old_value': old_value,\n            'new_value': new_value\n        }\n        self.change_log.append(change)\n        self.version += 1\n\n    def _trigger_callbacks(self, event_type: str, **kwargs):\n        \"\"\"Trigger registered callbacks.\"\"\"\n        for callback in self.callbacks[event_type]:\n            try:\n                callback(self, **kwargs)\n            except Exception as e:\n                print(f\"Callback error: {e}\")\n\n    def add_v(self, vid, attr=None):\n        \"\"\"Add vertex with change tracking.\"\"\"\n        if vid in self.all_v:\n            raise ValueError(f\"Vertex {vid} already exists\")\n\n        super().add_v(vid, attr)\n        self._log_change('add', 'vertex', vid, None, attr)\n        self._trigger_callbacks('vertex_added', vertex_id=vid, attributes=attr)\n        return vid\n\n    def remove_v(self, vid):\n        \"\"\"Remove vertex with change tracking.\"\"\"\n        if vid not in self.all_v:\n            raise KeyError(f\"Vertex {vid} does not exist\")\n\n        old_attr = self.v[vid].copy()\n        affected_edges = list(self.N_e(vid))\n\n        super().remove_v(vid)\n        self._log_change('remove', 'vertex', vid, old_attr, None)\n        self._trigger_callbacks('vertex_removed', vertex_id=vid, old_attributes=old_attr, \n                               affected_edges=affected_edges)\n        return vid\n\n    def update_v(self, vid, attr):\n        \"\"\"Update vertex with change tracking.\"\"\"\n        if vid not in self.all_v:\n            raise KeyError(f\"Vertex {vid} does not exist\")\n\n        old_attr = self.v[vid].copy()\n        super().update_v(vid, attr)\n        new_attr = self.v[vid].copy()\n\n        self._log_change('update', 'vertex', vid, old_attr, new_attr)\n        self._trigger_callbacks('vertex_updated', vertex_id=vid, \n                               old_attributes=old_attr, new_attributes=new_attr)\n        return vid\n\n    def add_e(self, vertices, attr=None):\n        \"\"\"Add edge with change tracking.\"\"\"\n        edge_id = super().add_e(vertices, attr)\n        self._log_change('add', 'edge', edge_id, None, {'vertices': vertices, 'attributes': attr})\n        self._trigger_callbacks('edge_added', edge_id=edge_id, vertices=vertices, attributes=attr)\n        return edge_id\n\n    def batch_update(self, operations: List[Dict]):\n        \"\"\"Perform batch updates atomically.\"\"\"\n        saved_state = self.copy()\n        successful_ops = []\n\n        try:\n            for op in operations:\n                op_type = op['type']\n                if op_type == 'add_vertex':\n                    self.add_v(op['vertex_id'], op.get('attributes'))\n                elif op_type == 'add_edge':\n                    self.add_e(op['vertices'], op.get('attributes'))\n                elif op_type == 'update_vertex':\n                    self.update_v(op['vertex_id'], op['attributes'])\n                # Add more operation types as needed\n\n                successful_ops.append(op)\n\n        except Exception as e:\n            # Rollback to saved state\n            self.__dict__.update(saved_state.__dict__)\n            print(f\"Batch update failed at operation {len(successful_ops)}: {e}\")\n            print(\"Rolled back all changes.\")\n            raise\n\n        return successful_ops\n\n    def get_changes_since_version(self, version: int):\n        \"\"\"Get all changes since a specific version.\"\"\"\n        return [change for change in self.change_log if change['version'] &gt; version]\n\n    def export_changes(self, start_version: int = 0):\n        \"\"\"Export changes for synchronization.\"\"\"\n        changes = self.get_changes_since_version(start_version)\n        return {\n            'current_version': self.version,\n            'changes': changes\n        }\n\n# Example usage with change tracking\ndhg = DynamicHypergraph()\n\n# Set up callbacks for monitoring\ndef vertex_added_callback(hg, vertex_id, attributes):\n    print(f\"\u2705 Vertex {vertex_id} added with attributes: {attributes}\")\n\ndef edge_added_callback(hg, edge_id, vertices, attributes):\n    print(f\"\ud83d\udd17 Edge {edge_id} added connecting {vertices}\")\n\ndef vertex_removed_callback(hg, vertex_id, old_attributes, affected_edges):\n    print(f\"\u274c Vertex {vertex_id} removed, affecting {len(affected_edges)} edges\")\n\n# Register callbacks\ndhg.register_callback('vertex_added', vertex_added_callback)\ndhg.register_callback('edge_added', edge_added_callback)\ndhg.register_callback('vertex_removed', vertex_removed_callback)\n\n# Perform operations\nprint(\"Performing dynamic operations:\")\n\n# Add vertices\ndhg.add_v(\"alice\", {\"name\": \"Alice\", \"role\": \"researcher\"})\ndhg.add_v(\"bob\", {\"name\": \"Bob\", \"role\": \"engineer\"})\ndhg.add_v(\"charlie\", {\"name\": \"Charlie\", \"role\": \"manager\"})\n\n# Add edges\ndhg.add_e((\"alice\", \"bob\"), {\"type\": \"collaboration\", \"project\": \"AI\"})\ndhg.add_e((\"alice\", \"bob\", \"charlie\"), {\"type\": \"team\", \"department\": \"R&amp;D\"})\n\n# Update vertex\ndhg.update_v(\"alice\", {\"name\": \"Dr. Alice\", \"role\": \"senior_researcher\", \"publications\": 25})\n\n# Batch operations\nbatch_ops = [\n    {\"type\": \"add_vertex\", \"vertex_id\": \"diana\", \"attributes\": {\"name\": \"Diana\", \"role\": \"analyst\"}},\n    {\"type\": \"add_edge\", \"vertices\": (\"charlie\", \"diana\"), \"attributes\": {\"type\": \"supervision\"}},\n    {\"type\": \"update_vertex\", \"vertex_id\": \"bob\", \"attributes\": {\"name\": \"Robert\", \"role\": \"senior_engineer\"}}\n]\n\nprint(\"\\nPerforming batch update:\")\nsuccessful = dhg.batch_update(batch_ops)\nprint(f\"Successfully completed {len(successful)} operations\")\n\n# Show change history\nprint(f\"\\nChange history (version {dhg.version}):\")\nfor change in dhg.change_log[-5:]:  # Last 5 changes\n    print(f\"  v{change['version']}: {change['operation']} {change['entity_type']} {change['entity_id']}\")\n\n# Export changes for synchronization\nchanges_export = dhg.export_changes(start_version=3)\nprint(f\"\\nChanges since version 3: {len(changes_export['changes'])} changes\")\n\n# Remove vertex (will trigger callback about affected edges)\nprint(\"\\nRemoving vertex:\")\ndhg.remove_v(\"alice\")\n\nprint(f\"Final state: {dhg.num_v} vertices, {dhg.num_e} edges\")\n</code></pre> <p>These advanced patterns demonstrate the flexibility and power of Hypergraph-DB for complex scenarios:</p> <ol> <li>Temporal Hypergraphs: Track relationships over time</li> <li>Multi-Layer Networks: Model different relationship types separately</li> <li>Advanced Analytics: Calculate sophisticated metrics and detect patterns  </li> <li>Dynamic Updates: Handle real-time changes with consistency and monitoring</li> </ol> <p>Each pattern can be combined and adapted for specific use cases, providing a robust foundation for complex hypergraph applications.</p>"},{"location":"examples/basic-usage/","title":"Basic Usage Examples","text":"<p>This page provides practical examples of using Hypergraph-DB for common scenarios.</p>"},{"location":"examples/basic-usage/#example-1-academic-collaboration-network","title":"Example 1: Academic Collaboration Network","text":"<p>Model research collaborations between academics:</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create the hypergraph\nhg = HypergraphDB()\n\n# Add researchers as vertices\nresearchers = {\n    \"alice\": {\"name\": \"Dr. Alice Smith\", \"field\": \"Machine Learning\", \"university\": \"MIT\"},\n    \"bob\": {\"name\": \"Dr. Bob Johnson\", \"field\": \"Natural Language Processing\", \"university\": \"Stanford\"},\n    \"charlie\": {\"name\": \"Dr. Charlie Brown\", \"field\": \"Computer Vision\", \"university\": \"CMU\"},\n    \"diana\": {\"name\": \"Dr. Diana Wilson\", \"field\": \"Robotics\", \"university\": \"Berkeley\"},\n    \"eve\": {\"name\": \"Dr. Eve Davis\", \"field\": \"Theory\", \"university\": \"Princeton\"}\n}\n\nfor researcher_id, info in researchers.items():\n    hg.add_v(researcher_id, info)\n\n# Add papers as hyperedges (connecting all co-authors)\npapers = [\n    ((\"alice\", \"bob\"), {\n        \"title\": \"Deep Learning for Natural Language Understanding\",\n        \"year\": 2023,\n        \"venue\": \"ICML\",\n        \"citations\": 45\n    }),\n    ((\"alice\", \"charlie\"), {\n        \"title\": \"Vision-Language Models for Scene Understanding\",\n        \"year\": 2023,\n        \"venue\": \"CVPR\",\n        \"citations\": 38\n    }),\n    ((\"bob\", \"charlie\", \"diana\"), {\n        \"title\": \"Multimodal AI for Autonomous Systems\",\n        \"year\": 2024,\n        \"venue\": \"NeurIPS\",\n        \"citations\": 12\n    }),\n    ((\"alice\", \"bob\", \"charlie\", \"eve\"), {\n        \"title\": \"Theoretical Foundations of Modern AI\",\n        \"year\": 2024,\n        \"venue\": \"JMLR\",\n        \"citations\": 23\n    })\n]\n\nfor authors, paper_info in papers:\n    hg.add_e(authors, paper_info)\n\n# Analysis\nprint(f\"Network: {hg.num_v} researchers, {hg.num_e} papers\")\n\n# Find most collaborative researcher\nmost_collaborative = max(hg.all_v, key=lambda v: hg.degree_v(v))\nprint(f\"Most collaborative: {hg.v(most_collaborative)['name']} \"\n      f\"({hg.degree_v(most_collaborative)} papers)\")\n\n# Find largest collaboration\nlargest_paper = max(hg.all_e, key=lambda e: hg.degree_e(e))\nnum_authors = hg.degree_e(largest_paper)\nprint(f\"Largest collaboration: {num_authors} authors\")\n\n# Visualize the network\nhg.draw()\n</code></pre>"},{"location":"examples/basic-usage/#example-2-e-commerce-recommendation-system","title":"Example 2: E-commerce Recommendation System","text":"<p>Model shopping patterns and product relationships:</p> <pre><code>from hyperdb import HypergraphDB\nfrom collections import defaultdict\n\n# Create product catalog\nhg = HypergraphDB()\n\n# Add products as vertices\nproducts = {\n    \"laptop_1\": {\"name\": \"Gaming Laptop\", \"category\": \"Electronics\", \"price\": 1299.99, \"brand\": \"TechCorp\"},\n    \"mouse_1\": {\"name\": \"Wireless Mouse\", \"category\": \"Electronics\", \"price\": 49.99, \"brand\": \"TechCorp\"},\n    \"keyboard_1\": {\"name\": \"Mechanical Keyboard\", \"category\": \"Electronics\", \"price\": 129.99, \"brand\": \"KeyMaster\"},\n    \"monitor_1\": {\"name\": \"4K Monitor\", \"category\": \"Electronics\", \"price\": 399.99, \"brand\": \"DisplayPro\"},\n    \"headset_1\": {\"name\": \"Gaming Headset\", \"category\": \"Electronics\", \"price\": 89.99, \"brand\": \"AudioMax\"},\n    \"desk_1\": {\"name\": \"Standing Desk\", \"category\": \"Furniture\", \"price\": 299.99, \"brand\": \"ErgoFurn\"},\n    \"chair_1\": {\"name\": \"Ergonomic Chair\", \"category\": \"Furniture\", \"price\": 249.99, \"brand\": \"ErgoFurn\"}\n}\n\nfor product_id, info in products.items():\n    hg.add_v(product_id, info)\n\n# Add shopping baskets as hyperedges\nshopping_sessions = [\n    ((\"laptop_1\", \"mouse_1\", \"keyboard_1\"), {\n        \"session_id\": \"S001\",\n        \"customer\": \"John Doe\",\n        \"total\": 1479.97,\n        \"date\": \"2024-01-15\"\n    }),\n    ((\"monitor_1\", \"headset_1\"), {\n        \"session_id\": \"S002\", \n        \"customer\": \"Jane Smith\",\n        \"total\": 489.98,\n        \"date\": \"2024-01-16\"\n    }),\n    ((\"desk_1\", \"chair_1\", \"monitor_1\"), {\n        \"session_id\": \"S003\",\n        \"customer\": \"Bob Wilson\",\n        \"total\": 949.97,\n        \"date\": \"2024-01-17\"\n    }),\n    ((\"laptop_1\", \"mouse_1\", \"headset_1\", \"monitor_1\"), {\n        \"session_id\": \"S004\",\n        \"customer\": \"Alice Brown\",\n        \"total\": 1839.96,\n        \"date\": \"2024-01-18\"\n    })\n]\n\nfor products_in_basket, session_info in shopping_sessions:\n    hg.add_e(products_in_basket, session_info)\n\n# Recommendation analysis\ndef find_frequently_bought_together(product_id, min_frequency=2):\n    \"\"\"Find products frequently bought together with the given product.\"\"\"\n    # Find all shopping sessions containing this product\n    sessions_with_product = hg.nbr_e_of_v(product_id)\n\n    # Count co-occurrences\n    co_occurrence = defaultdict(int)\n    for session in sessions_with_product:\n        other_products = hg.nbr_v_of_e(session) - {product_id}\n        for other_product in other_products:\n            co_occurrence[other_product] += 1\n\n    # Filter by minimum frequency\n    recommendations = {product: count for product, count in co_occurrence.items() \n                      if count &gt;= min_frequency}\n\n    return sorted(recommendations.items(), key=lambda x: x[1], reverse=True)\n\n# Generate recommendations\nlaptop_recommendations = find_frequently_bought_together(\"laptop_1\")\nprint(\"Products frequently bought with Gaming Laptop:\")\nfor product, frequency in laptop_recommendations:\n    product_name = hg.v[product][\"name\"]\n    print(f\"  {product_name}: {frequency} times\")\n\n# Find most popular product categories\ncategory_popularity = defaultdict(int)\nfor edge in hg.all_e:\n    products_in_session = hg.nbr_v_of_e(edge)\n    for product in products_in_session:\n        category = hg.v[product][\"category\"]\n        category_popularity[category] += 1\n\nprint(\"\\nCategory popularity:\")\nfor category, count in sorted(category_popularity.items(), key=lambda x: x[1], reverse=True):\n    print(f\"  {category}: {count} purchases\")\n</code></pre>"},{"location":"examples/basic-usage/#example-3-social-network-group-analysis","title":"Example 3: Social Network Group Analysis","text":"<p>Analyze group dynamics in social networks:</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create social network\nhg = HypergraphDB()\n\n# Add people\npeople = {\n    1: {\"name\": \"Alice\", \"age\": 28, \"city\": \"New York\", \"interests\": [\"tech\", \"music\"]},\n    2: {\"name\": \"Bob\", \"age\": 32, \"city\": \"San Francisco\", \"interests\": [\"tech\", \"sports\"]},\n    3: {\"name\": \"Charlie\", \"age\": 25, \"city\": \"Boston\", \"interests\": [\"music\", \"art\"]},\n    4: {\"name\": \"Diana\", \"age\": 30, \"city\": \"Seattle\", \"interests\": [\"tech\", \"travel\"]},\n    5: {\"name\": \"Eve\", \"age\": 27, \"city\": \"Austin\", \"interests\": [\"art\", \"food\"]},\n    6: {\"name\": \"Frank\", \"age\": 35, \"city\": \"Chicago\", \"interests\": [\"sports\", \"food\"]},\n    7: {\"name\": \"Grace\", \"age\": 29, \"city\": \"Portland\", \"interests\": [\"travel\", \"music\"]},\n    8: {\"name\": \"Henry\", \"age\": 31, \"city\": \"Denver\", \"interests\": [\"tech\", \"art\"]}\n}\n\nfor person_id, info in people.items():\n    hg.add_v(person_id, info)\n\n# Add group activities as hyperedges\nactivities = [\n    # Small groups\n    ((1, 2), {\"type\": \"coffee_meeting\", \"location\": \"Cafe Central\", \"date\": \"2024-01-10\"}),\n    ((3, 5), {\"type\": \"art_gallery\", \"location\": \"MoMA\", \"date\": \"2024-01-12\"}),\n\n    # Medium groups  \n    ((1, 2, 4), {\"type\": \"tech_meetup\", \"location\": \"TechHub\", \"date\": \"2024-01-15\"}),\n    ((3, 5, 7), {\"type\": \"music_concert\", \"location\": \"Music Hall\", \"date\": \"2024-01-18\"}),\n    ((2, 6), {\"type\": \"sports_game\", \"location\": \"Stadium\", \"date\": \"2024-01-20\"}),\n\n    # Large groups\n    ((1, 2, 3, 4, 5), {\"type\": \"birthday_party\", \"location\": \"Alice's House\", \"date\": \"2024-01-25\"}),\n    ((4, 6, 7, 8), {\"type\": \"travel_planning\", \"location\": \"Online\", \"date\": \"2024-01-28\"}),\n\n    # Very large group\n    ((1, 2, 3, 4, 5, 6, 7, 8), {\"type\": \"company_picnic\", \"location\": \"Central Park\", \"date\": \"2024-02-01\"})\n]\n\nfor participants, activity_info in activities:\n    hg.add_e(participants, activity_info)\n\n# Social network analysis\ndef analyze_social_network(hg):\n    \"\"\"Analyze the social network structure.\"\"\"\n\n    # Find most social person (highest degree)\n    most_social = max(hg.all_v, key=lambda v: hg.degree_v(v))\n    print(f\"Most social person: {hg.v(most_social)['name']} \"\n          f\"(participates in {hg.degree_v(most_social)} activities)\")\n\n    # Analyze group sizes\n    group_sizes = [hg.degree_e(e) for e in hg.all_e]\n    avg_group_size = sum(group_sizes) / len(group_sizes)\n    print(f\"Average group size: {avg_group_size:.1f}\")\n    print(f\"Largest group: {max(group_sizes)} people\")\n    print(f\"Smallest group: {min(group_sizes)} people\")\n\n    # Find common interest groups\n    interest_groups = defaultdict(set)\n    for edge in hg.all_e:\n        participants = hg.nbr_v_of_e(edge)\n        # Find common interests\n        if len(participants) &gt;= 2:\n            common_interests = set(hg.v[list(participants)[0]][\"interests\"])\n            for person in participants:\n                common_interests &amp;= set(hg.v[person][\"interests\"])\n\n            for interest in common_interests:\n                interest_groups[interest].update(participants)\n\n    print(\"\\nInterest-based communities:\")\n    for interest, community in interest_groups.items():\n        if len(community) &gt;= 3:  # Only show communities with 3+ people\n            names = [hg.v[person][\"name\"] for person in community]\n            print(f\"  {interest}: {', '.join(names)}\")\n\nanalyze_social_network(hg)\n\n# Find bridges (people who connect different groups)\ndef find_bridges(hg):\n    \"\"\"Find people who act as bridges between groups.\"\"\"\n    bridges = []\n\n    for person in hg.all_v:\n        # Get all groups this person participates in\n        person_groups = hg.nbr_e_of_v(person)\n\n        if len(person_groups) &gt;= 2:  # Person is in multiple groups\n            # Check if removing this person would disconnect the groups\n            other_connections = 0\n            for group1 in person_groups:\n                for group2 in person_groups:\n                    if group1 != group2:\n                        # Check if groups share other members\n                        group1_members = hg.N_v_of_e(group1) - {person}\n                        group2_members = hg.N_v_of_e(group2) - {person}\n                        if group1_members &amp; group2_members:\n                            other_connections += 1\n                            break\n\n            if other_connections &lt; len(person_groups) - 1:\n                bridges.append(person)\n\n    return bridges\n\nbridges = find_bridges(hg)\nprint(f\"\\nBridge people (connect different groups):\")\nfor bridge in bridges:\n    name = hg.v[bridge][\"name\"]\n    num_groups = hg.degree_v(bridge)\n    print(f\"  {name} (connects {num_groups} groups)\")\n\n# Visualize the social network\nhg.draw()\n</code></pre>"},{"location":"examples/basic-usage/#example-4-knowledge-graph","title":"Example 4: Knowledge Graph","text":"<p>Model complex knowledge relationships:</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create knowledge graph\nkg = HypergraphDB()\n\n# Add entities\nentities = {\n    # People\n    \"einstein\": {\"type\": \"person\", \"name\": \"Albert Einstein\", \"birth\": 1879, \"death\": 1955},\n    \"curie\": {\"type\": \"person\", \"name\": \"Marie Curie\", \"birth\": 1867, \"death\": 1934},\n    \"newton\": {\"type\": \"person\", \"name\": \"Isaac Newton\", \"birth\": 1642, \"death\": 1727},\n\n    # Concepts\n    \"relativity\": {\"type\": \"theory\", \"name\": \"Theory of Relativity\", \"year\": 1915},\n    \"radioactivity\": {\"type\": \"phenomenon\", \"name\": \"Radioactivity\", \"discovered\": 1896},\n    \"gravity\": {\"type\": \"force\", \"name\": \"Gravitational Force\", \"discovered\": 1687},\n\n    # Institutions\n    \"princeton\": {\"type\": \"university\", \"name\": \"Princeton University\", \"founded\": 1746},\n    \"sorbonne\": {\"type\": \"university\", \"name\": \"University of Paris\", \"founded\": 1150},\n\n    # Awards\n    \"nobel_physics\": {\"type\": \"award\", \"name\": \"Nobel Prize in Physics\"},\n    \"nobel_chemistry\": {\"type\": \"award\", \"name\": \"Nobel Prize in Chemistry\"}\n}\n\nfor entity_id, info in entities.items():\n    kg.add_v(entity_id, info)\n\n# Add complex relationships as hyperedges\nrelationships = [\n    # Person-Theory relationships\n    ((\"einstein\", \"relativity\"), {\"relation\": \"developed\", \"year\": 1915}),\n    ((\"curie\", \"radioactivity\"), {\"relation\": \"studied\", \"significance\": \"pioneering\"}),\n    ((\"newton\", \"gravity\"), {\"relation\": \"discovered\", \"year\": 1687}),\n\n    # Person-Institution relationships  \n    ((\"einstein\", \"princeton\"), {\"relation\": \"worked_at\", \"period\": \"1933-1955\"}),\n    ((\"curie\", \"sorbonne\"), {\"relation\": \"studied_at\", \"degree\": \"PhD\"}),\n\n    # Award relationships\n    ((\"einstein\", \"nobel_physics\"), {\"relation\": \"won\", \"year\": 1921, \"for\": \"photoelectric effect\"}),\n    ((\"curie\", \"nobel_physics\"), {\"relation\": \"won\", \"year\": 1903, \"shared_with\": \"Pierre Curie\"}),\n    ((\"curie\", \"nobel_chemistry\"), {\"relation\": \"won\", \"year\": 1911, \"first_woman\": True}),\n\n    # Complex multi-way relationships\n    ((\"einstein\", \"curie\", \"nobel_physics\"), {\n        \"relation\": \"both_won\", \n        \"significance\": \"two great physicists\"\n    }),\n    ((\"relativity\", \"gravity\", \"newton\", \"einstein\"), {\n        \"relation\": \"theory_evolution\",\n        \"description\": \"Newton's gravity evolved into Einstein's relativity\"\n    })\n]\n\nfor entities_in_rel, rel_info in relationships:\n    kg.add_e(entities_in_rel, rel_info)\n\n# Knowledge graph queries\ndef find_related_entities(entity_id, relation_type=None):\n    \"\"\"Find all entities related to the given entity.\"\"\"\n    related = set()\n\n    # Get all relationships involving this entity\n    for edge in kg.N_e(entity_id):\n        edge_info = kg.e[edge]\n\n        # Filter by relation type if specified\n        if relation_type and edge_info.get(\"relation\") != relation_type:\n            continue\n\n        # Add all other entities in this relationship\n        other_entities = kg.N_v_of_e(edge) - {entity_id}\n        related.update(other_entities)\n\n    return related\n\n# Find entities related to Einstein\neinstein_related = find_related_entities(\"einstein\")\nprint(\"Entities related to Einstein:\")\nfor entity in einstein_related:\n    entity_info = kg.v[entity]\n    print(f\"  {entity_info['name']} ({entity_info['type']})\")\n\n# Find award winners\naward_winners = find_related_entities(\"nobel_physics\", \"won\")\nprint(f\"\\nNobel Physics winners in our graph:\")\nfor winner in award_winners:\n    winner_info = kg.v[winner]\n    print(f\"  {winner_info['name']}\")\n\n# Find theory developers\nprint(f\"\\nTheory developers:\")\nfor theory in [\"relativity\", \"radioactivity\"]:\n    developers = find_related_entities(theory, \"developed\") | find_related_entities(theory, \"studied\")\n    theory_name = kg.v[theory][\"name\"]\n    developer_names = [kg.v[dev][\"name\"] for dev in developers]\n    print(f\"  {theory_name}: {', '.join(developer_names)}\")\n\n# Visualize the knowledge graph\nkg.draw()\n</code></pre>"},{"location":"examples/basic-usage/#tips-for-effective-usage","title":"Tips for Effective Usage","text":""},{"location":"examples/basic-usage/#1-choose-meaningful-ids","title":"1. Choose Meaningful IDs","text":"<pre><code># Good: descriptive IDs\nhg.add_v(\"user_123\", {\"name\": \"Alice\"})\nhg.add_v(\"product_laptop_001\", {\"name\": \"Gaming Laptop\"})\n\n# Less ideal: generic IDs without context\nhg.add_v(1, {\"name\": \"Alice\"})\nhg.add_v(2, {\"name\": \"Gaming Laptop\"})\n</code></pre>"},{"location":"examples/basic-usage/#2-use-rich-attributes","title":"2. Use Rich Attributes","text":"<pre><code># Rich attributes provide more analysis possibilities\nhg.add_v(\"paper_001\", {\n    \"title\": \"Deep Learning Advances\",\n    \"year\": 2024,\n    \"venue\": \"ICML\",\n    \"citations\": 45,\n    \"keywords\": [\"deep learning\", \"neural networks\"],\n    \"impact_factor\": 3.2,\n    \"open_access\": True\n})\n</code></pre>"},{"location":"examples/basic-usage/#3-leverage-hypergraph-structure","title":"3. Leverage Hypergraph Structure","text":"<pre><code># Instead of multiple binary edges:\nhg.add_e((1, 2), {\"type\": \"collaboration\"})\nhg.add_e((1, 3), {\"type\": \"collaboration\"})  \nhg.add_e((2, 3), {\"type\": \"collaboration\"})\n\n# Use a single hyperedge for group relationships:\nhg.add_e((1, 2, 3), {\"type\": \"collaboration\", \"project\": \"AI Research\"})\n</code></pre>"},{"location":"examples/basic-usage/#4-plan-for-analysis","title":"4. Plan for Analysis","text":"<pre><code># Add metadata that supports your analysis goals\nhg.add_e((author1, author2, author3), {\n    \"type\": \"research_paper\",\n    \"title\": \"...\",\n    \"domain\": \"machine_learning\",  # For domain analysis\n    \"collaboration_type\": \"international\",  # For collaboration analysis\n    \"funding_source\": \"NSF\",  # For funding analysis\n    \"impact_score\": 8.5  # For impact analysis\n})\n</code></pre>"},{"location":"examples/visualization-examples/","title":"Hypergraph Visualization Examples","text":"<p>This guide provides comprehensive examples of visualizing hypergraphs using Hypergraph-DB's built-in visualization capabilities.</p>"},{"location":"examples/visualization-examples/#important-code-execution-order","title":"\u26a1 Important: Code Execution Order","text":"<p>When using visualization features, please pay attention to the following code execution order to ensure you see complete analysis results:</p> <pre><code># \u2705 Recommended code organization\n# 1. Create data\nhg = HypergraphDB()\nhg.add_v(...)\nhg.add_e(...)\n\n# 2. Perform analysis first (before visualization)\nprint(\"Analysis results:\")\nprint(f\"Network size: {hg.num_v} vertices, {hg.num_e} edges\")\n# Other analysis...\n\n# 3. Start visualization last (program ends when user presses Ctrl+C)\nprint(\"Starting visualization...\")\nhg.draw()  # Blocks until user presses Ctrl+C\n</code></pre> <pre><code># \u274c Code organization to avoid\nhg.draw()  # Program exits immediately when user presses Ctrl+C\nprint(\"These analysis results will never be shown\")  # Never executed\n</code></pre>"},{"location":"examples/visualization-examples/#example-1-social-network-analysis","title":"\ud83c\udfaf Example 1: Social Network Analysis","text":"<p>Let's create and visualize a social network where groups of friends participate in various activities together.</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create the social network hypergraph\nsocial_network = HypergraphDB()\n\n# Add people as vertices\npeople = {\n    \"alice\": {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\", \"interests\": [\"reading\", \"music\"]},\n    \"bob\": {\"name\": \"Bob\", \"age\": 27, \"city\": \"San Francisco\", \"interests\": [\"sports\", \"travel\"]},\n    \"charlie\": {\"name\": \"Charlie\", \"age\": 23, \"city\": \"Boston\", \"interests\": [\"coding\", \"gaming\"]},\n    \"diana\": {\"name\": \"Diana\", \"age\": 26, \"city\": \"Seattle\", \"interests\": [\"art\", \"photography\"]},\n    \"eve\": {\"name\": \"Eve\", \"age\": 24, \"city\": \"Austin\", \"interests\": [\"music\", \"cooking\"]},\n    \"frank\": {\"name\": \"Frank\", \"age\": 28, \"city\": \"Denver\", \"interests\": [\"hiking\", \"travel\"]}\n}\n\nfor person_id, info in people.items():\n    social_network.add_v(person_id, info)\n\n# Add social activities as hyperedges (connecting groups of friends)\nactivities = [\n    # Small gatherings\n    ((\"alice\", \"bob\"), {\n        \"activity\": \"Coffee meetup\",\n        \"date\": \"2024-01-15\",\n        \"location\": \"Central Park\",\n        \"duration\": 2\n    }),\n\n    # Medium group activities\n    ((\"alice\", \"charlie\", \"eve\"), {\n        \"activity\": \"Music concert\",\n        \"date\": \"2024-01-20\",\n        \"location\": \"Madison Square Garden\",\n        \"duration\": 4\n    }),\n\n    # Large group activities\n    ((\"bob\", \"diana\", \"frank\", \"eve\"), {\n        \"activity\": \"Hiking trip\",\n        \"date\": \"2024-02-01\",\n        \"location\": \"Yosemite National Park\",\n        \"duration\": 48\n    }),\n\n    # Full group gathering\n    ((\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\", \"frank\"), {\n        \"activity\": \"Birthday party\",\n        \"date\": \"2024-02-14\",\n        \"location\": \"Alice's apartment\",\n        \"duration\": 6\n    })\n]\n\nfor participants, activity_info in activities:\n    social_network.add_e(participants, activity_info)\n\n# Perform analysis first, then visualize\nprint(\"\ud83d\udcca Network Analysis Results:\")\nprint(\"=\" * 40)\n\n# Analyze the network\nprint(f\"\ud83d\udc65 Network size: {social_network.num_v} people, {social_network.num_e} activities\")\n\n# Find most social person\nmost_social = max(social_network.all_v, key=lambda v: social_network.degree_v(v))\nprint(f\"\ud83c\udf1f Most social person: {social_network.v(most_social)['name']} \"\n      f\"({social_network.degree_v(most_social)} activities)\")\n\n# Show activity count for all participants\nprint(\"\\n\ud83d\udc65 All participants' activity statistics:\")\nfor person_id in social_network.all_v:\n    person_info = social_network.v(person_id)\n    activity_count = social_network.degree_v(person_id)\n    print(f\"  \u2022 {person_info['name']}: {activity_count} activities\")\n\nprint(\"\\n\" + \"=\" * 40)\nprint(\"\ud83c\udfa8 Starting visualization (press Ctrl+C to close)\")\nsocial_network.draw()\n</code></pre>"},{"location":"examples/visualization-examples/#example-2-scientific-collaboration-network","title":"\ud83e\uddec Example 2: Scientific Collaboration Network","text":"<p>Visualize research collaborations in computational biology:</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create research collaboration hypergraph\nresearch_network = HypergraphDB()\n\n# Add researchers as vertices\nresearchers = {\n    \"dr_smith\": {\n        \"name\": \"Dr. Sarah Smith\",\n        \"field\": \"Bioinformatics\",\n        \"institution\": \"MIT\",\n        \"h_index\": 45,\n        \"experience\": 15\n    },\n    \"dr_jones\": {\n        \"name\": \"Dr. Michael Jones\", \n        \"field\": \"Machine Learning\",\n        \"institution\": \"Stanford\",\n        \"h_index\": 38,\n        \"experience\": 12\n    },\n    \"dr_garcia\": {\n        \"name\": \"Dr. Maria Garcia\",\n        \"field\": \"Genomics\",\n        \"institution\": \"Harvard\",\n        \"h_index\": 52,\n        \"experience\": 18\n    },\n    \"dr_chen\": {\n        \"name\": \"Dr. Wei Chen\",\n        \"field\": \"Systems Biology\",\n        \"institution\": \"UCSF\",\n        \"h_index\": 41,\n        \"experience\": 14\n    },\n    \"dr_taylor\": {\n        \"name\": \"Dr. James Taylor\",\n        \"field\": \"Computational Chemistry\",\n        \"institution\": \"Caltech\",\n        \"h_index\": 36,\n        \"experience\": 10\n    }\n}\n\nfor researcher_id, info in researchers.items():\n    research_network.add_v(researcher_id, info)\n\n# Add research papers as hyperedges\npublications = [\n    # Duo collaborations\n    ((\"dr_smith\", \"dr_jones\"), {\n        \"title\": \"Deep Learning for Protein Structure Prediction\",\n        \"journal\": \"Nature Biotechnology\",\n        \"year\": 2023,\n        \"citations\": 127,\n        \"impact_factor\": 46.9\n    }),\n\n    # Trio collaborations\n    ((\"dr_garcia\", \"dr_chen\", \"dr_taylor\"), {\n        \"title\": \"Multi-omics Integration for Disease Prediction\",\n        \"journal\": \"Cell\",\n        \"year\": 2023,\n        \"citations\": 98,\n        \"impact_factor\": 66.9\n    }),\n\n    # Large collaboration\n    ((\"dr_smith\", \"dr_jones\", \"dr_garcia\", \"dr_chen\"), {\n        \"title\": \"AI-Driven Drug Discovery Pipeline\",\n        \"journal\": \"Science\",\n        \"year\": 2024,\n        \"citations\": 45,\n        \"impact_factor\": 56.9\n    }),\n\n    # Cross-institutional mega-collaboration\n    ((\"dr_smith\", \"dr_jones\", \"dr_garcia\", \"dr_chen\", \"dr_taylor\"), {\n        \"title\": \"The Future of Personalized Medicine\",\n        \"journal\": \"Nature Reviews Drug Discovery\",\n        \"year\": 2024,\n        \"citations\": 23,\n        \"impact_factor\": 112.3\n    })\n]\n\nfor authors, paper_info in publications:\n    research_network.add_e(authors, paper_info)\n\n# Perform research impact analysis first\nprint(\"\ufffd Research Collaboration Network Analysis:\")\nprint(\"=\" * 50)\n\n# Basic network statistics\nprint(f\"\ufffd Network size: {research_network.num_v} researchers, {research_network.num_e} publications\")\n\n# Find most collaborative researcher\nmost_collaborative = max(research_network.all_v, \n                        key=lambda v: research_network.degree_v(v))\nresearcher_info = research_network.v(most_collaborative)\nprint(f\"\ud83e\udd1d Most collaborative: {researcher_info['name']} \"\n      f\"({research_network.degree_v(most_collaborative)} papers)\")\n\n# Find highest-impact publication\nhighest_impact = max(research_network.all_e, \n                    key=lambda e: research_network.e(e)['impact_factor'])\nimpact_factor = research_network.e(highest_impact)['impact_factor']\nprint(f\"\u2b50 Highest impact publication: {impact_factor} impact factor\")\n\n# Show detailed information for each researcher\nprint(\"\\n\ud83d\udc68\u200d\ud83d\udd2c Researcher collaboration statistics:\")\nfor researcher_id in research_network.all_v:\n    info = research_network.v(researcher_id)\n    collab_count = research_network.degree_v(researcher_id)\n    print(f\"  \u2022 {info['name']} ({info['institution']})\")\n    print(f\"    Field: {info['field']}, H-index: {info['h_index']}, Collaborations: {collab_count}\")\n\nprint(\"\\n\" + \"=\" * 50)\nprint(\"\ud83d\udd2c Starting research network visualization (press Ctrl+C to close)\")\nresearch_network.draw()\n</code></pre>"},{"location":"examples/visualization-examples/#example-3-e-commerce-purchase-patterns","title":"\ud83d\uded2 Example 3: E-commerce Purchase Patterns","text":"<p>Analyze customer purchase behaviors and product relationships:</p> <pre><code>from hyperdb import HypergraphDB\nimport random\n\n# Create e-commerce hypergraph\necommerce = HypergraphDB()\n\n# Add products as vertices\nproducts = {\n    \"laptop\": {\"name\": \"Gaming Laptop\", \"category\": \"Electronics\", \"price\": 1299.99, \"rating\": 4.5},\n    \"mouse\": {\"name\": \"Wireless Mouse\", \"category\": \"Electronics\", \"price\": 49.99, \"rating\": 4.3},\n    \"keyboard\": {\"name\": \"Mechanical Keyboard\", \"category\": \"Electronics\", \"price\": 129.99, \"rating\": 4.6},\n    \"monitor\": {\"name\": \"4K Monitor\", \"category\": \"Electronics\", \"price\": 399.99, \"rating\": 4.4},\n    \"headset\": {\"name\": \"Gaming Headset\", \"category\": \"Electronics\", \"price\": 89.99, \"rating\": 4.2},\n    \"desk\": {\"name\": \"Standing Desk\", \"category\": \"Furniture\", \"price\": 299.99, \"rating\": 4.1},\n    \"chair\": {\"name\": \"Ergonomic Chair\", \"category\": \"Furniture\", \"price\": 249.99, \"rating\": 4.7},\n    \"lamp\": {\"name\": \"LED Desk Lamp\", \"category\": \"Furniture\", \"price\": 79.99, \"rating\": 4.0}\n}\n\nfor product_id, info in products.items():\n    ecommerce.add_v(product_id, info)\n\n# Add purchase baskets as hyperedges\npurchase_baskets = [\n    # Gaming setup purchase\n    ((\"laptop\", \"mouse\", \"keyboard\", \"headset\"), {\n        \"customer_id\": \"cust_001\",\n        \"purchase_date\": \"2024-01-15\",\n        \"total_amount\": 1569.96,\n        \"customer_type\": \"Gaming Enthusiast\"\n    }),\n\n    # Office setup purchase\n    ((\"monitor\", \"desk\", \"chair\", \"lamp\"), {\n        \"customer_id\": \"cust_002\", \n        \"purchase_date\": \"2024-01-18\",\n        \"total_amount\": 929.96,\n        \"customer_type\": \"Remote Worker\"\n    }),\n\n    # Minimal gaming setup\n    ((\"mouse\", \"keyboard\", \"headset\"), {\n        \"customer_id\": \"cust_003\",\n        \"purchase_date\": \"2024-01-20\",\n        \"total_amount\": 269.97,\n        \"customer_type\": \"Budget Gamer\"\n    }),\n\n    # Luxury workspace\n    ((\"laptop\", \"monitor\", \"desk\", \"chair\", \"lamp\"), {\n        \"customer_id\": \"cust_004\",\n        \"purchase_date\": \"2024-01-25\",\n        \"total_amount\": 2229.95,\n        \"customer_type\": \"Professional\"\n    }),\n\n    # Accessories only\n    ((\"mouse\", \"lamp\"), {\n        \"customer_id\": \"cust_005\",\n        \"purchase_date\": \"2024-01-28\",\n        \"total_amount\": 129.98,\n        \"customer_type\": \"Casual Buyer\"\n    })\n]\n\nfor products_in_basket, purchase_info in purchase_baskets:\n    ecommerce.add_e(products_in_basket, purchase_info)\n\n# Perform market basket analysis first\nprint(\"\ufffd E-commerce Purchase Pattern Analysis:\")\nprint(\"=\" * 45)\n\n# Basic statistics\nprint(f\"\ud83d\udecd\ufe0f Store overview: {ecommerce.num_v} products, {ecommerce.num_e} purchases\")\n\n# Find most popular product\nmost_popular = max(ecommerce.all_v, key=lambda v: ecommerce.degree_v(v))\nproduct_info = ecommerce.v(most_popular)\nprint(f\"\ud83c\udfc6 Most popular product: {product_info['name']} \"\n      f\"({ecommerce.degree_v(most_popular)} purchases)\")\n\n# Find largest purchase\nlargest_purchase = max(ecommerce.all_e, key=lambda e: len(ecommerce.e_v(e)))\nnum_items = len(ecommerce.e_v(largest_purchase))\npurchase_info = ecommerce.e(largest_purchase)\nprint(f\"\ud83d\udcb0 Largest purchase: {num_items} items, ${purchase_info['total_amount']:.2f}\")\n\n# Show product popularity ranking\nprint(f\"\\n\ud83d\udcc8 Product popularity ranking:\")\nproducts_by_popularity = sorted(ecommerce.all_v, \n                               key=lambda v: ecommerce.degree_v(v), \n                               reverse=True)\nfor i, product_id in enumerate(products_by_popularity, 1):\n    info = ecommerce.v(product_id)\n    purchases = ecommerce.degree_v(product_id)\n    print(f\"  {i}. {info['name']} - {purchases} purchases (${info['price']})\")\n\n# Analyze customer types\nprint(f\"\\n\ud83d\udc65 Customer type analysis:\")\ncustomer_types = {}\nfor edge_id in ecommerce.all_e:\n    edge_data = ecommerce.e(edge_id)\n    customer_type = edge_data.get('customer_type', 'Unknown')\n    if customer_type not in customer_types:\n        customer_types[customer_type] = 0\n    customer_types[customer_type] += 1\n\nfor customer_type, count in customer_types.items():\n    print(f\"  \u2022 {customer_type}: {count} purchases\")\n\nprint(\"\\n\" + \"=\" * 45)\nprint(\"\ud83d\uded2 Starting purchase pattern visualization (press Ctrl+C to close)\")\necommerce.draw()\n</code></pre>"},{"location":"examples/visualization-examples/#visualization-customization-tips","title":"\ud83c\udfa8 Visualization Customization Tips","text":""},{"location":"examples/visualization-examples/#1-color-coding-by-properties","title":"1. Color Coding by Properties","text":"<p>The visualization automatically uses different colors for different types of vertices and hyperedges based on their properties.</p>"},{"location":"examples/visualization-examples/#2-size-representation","title":"2. Size Representation","text":"<ul> <li>Vertex size: Often represents degree (number of connections)</li> <li>Hyperedge thickness: Represents the number of vertices it connects</li> </ul>"},{"location":"examples/visualization-examples/#3-interactive-features","title":"3. Interactive Features","text":"<ul> <li>Hover: View detailed information about vertices and hyperedges</li> <li>Click: Select elements to highlight related components</li> <li>Drag: Rearrange the layout for better viewing</li> <li>Zoom: Use mouse wheel to zoom in/out</li> </ul>"},{"location":"examples/visualization-examples/#4-layout-algorithms","title":"4. Layout Algorithms","text":"<p>The visualization uses force-directed layout by default, which: - Groups related vertices together - Minimizes edge crossings - Creates aesthetically pleasing arrangements</p>"},{"location":"examples/visualization-examples/#5-cross-platform-compatibility","title":"5. Cross-Platform Compatibility \ud83c\udd95","text":""},{"location":"examples/visualization-examples/#windows-users-note","title":"Windows Users Note","text":"<p>On Windows systems, we've optimized Ctrl+C handling for the <code>draw()</code> function:</p> <pre><code># Basic usage (blocking mode)\nhg.draw()  # Press Ctrl+C to stop server\n\n# Non-blocking mode (recommended for scripts and automation)\nviewer = hg.draw(blocking=False)\n# Do other work...\nviewer.stop_server()  # Manually stop server\n</code></pre>"},{"location":"examples/visualization-examples/#platform-differences","title":"Platform Differences","text":"Operating System Ctrl+C Behavior Recommended Usage Windows \u2705 Works well after optimization Both modes available macOS/Linux \u2705 Native support excellent Default blocking mode"},{"location":"examples/visualization-examples/#usage-recommendations","title":"Usage Recommendations","text":"<pre><code># 1. Interactive exploration (recommended blocking mode)\nhg.draw(port=8080, blocking=True)\n\n# 2. Script automation (recommended non-blocking mode)\nviewer = hg.draw(port=8080, blocking=False)\n# Perform other analysis...\ntime.sleep(30)  # Give users time to view\nviewer.stop_server()\n\n# 3. Jupyter Notebook usage\nviewer = hg.draw(blocking=False)  # Don't block cell execution\n</code></pre>"},{"location":"examples/visualization-examples/#analysis-through-visualization","title":"\ud83d\udd0d Analysis Through Visualization","text":""},{"location":"examples/visualization-examples/#identifying-patterns","title":"Identifying Patterns","text":"<ol> <li>Clusters: Groups of tightly connected vertices</li> <li>Hubs: Vertices with many connections (high degree)</li> <li>Bridges: Hyperedges that connect different clusters</li> <li>Outliers: Isolated or rarely connected vertices</li> </ol>"},{"location":"examples/visualization-examples/#network-metrics-visualization","title":"Network Metrics Visualization","text":"<pre><code># Example: Analyze network centrality through visualization\ndef analyze_network_visually(hg):\n    print(\"\ud83c\udfaf Network Analysis:\")\n\n    # Degree distribution\n    degrees = [hg.degree_v(v) for v in hg.all_v]\n    print(f\"\ud83d\udcca Average degree: {sum(degrees)/len(degrees):.2f}\")\n\n    # Hub identification\n    hubs = [v for v in hg.all_v if hg.degree_v(v) &gt; sum(degrees)/len(degrees)]\n    print(f\"\ud83c\udf1f Network hubs: {len(hubs)} vertices\")\n\n    # Hyperedge size distribution\n    edge_sizes = [hg.degree_e(e) for e in hg.all_e]\n    print(f\"\ud83d\udd17 Average hyperedge size: {sum(edge_sizes)/len(edge_sizes):.2f}\")\n\n    # Visualize with analysis\n    hg.draw()\n\n# Apply to any of the above examples\nanalyze_network_visually(social_network)\n</code></pre>"},{"location":"examples/visualization-examples/#advanced-visualization-techniques","title":"\ud83d\ude80 Advanced Visualization Techniques","text":""},{"location":"examples/visualization-examples/#dynamic-visualization","title":"Dynamic Visualization","text":"<p>For time-series data, you can create multiple snapshots:</p> <pre><code># Example: Evolving social network\ndef create_network_snapshots(base_network, time_periods):\n    snapshots = []\n    for period in time_periods:\n        # Create filtered network for each time period\n        period_network = HypergraphDB()\n\n        # Add vertices (people don't change)\n        for v in base_network.all_v:\n            period_network.add_v(v, base_network.v(v))\n\n        # Add only hyperedges from this time period\n        for e in base_network.all_e:\n            edge_data = base_network.e(e)\n            if edge_data.get('date', '') &gt;= period['start'] and edge_data.get('date', '') &lt;= period['end']:\n                period_network.add_e(base_network.e_v(e), edge_data)\n\n        snapshots.append((period['name'], period_network))\n\n    return snapshots\n\n# Create quarterly snapshots\nquarters = [\n    {\"name\": \"Q1 2024\", \"start\": \"2024-01-01\", \"end\": \"2024-03-31\"},\n    {\"name\": \"Q2 2024\", \"start\": \"2024-04-01\", \"end\": \"2024-06-30\"}\n]\n\n# Visualize evolution\nfor quarter_name, network in create_network_snapshots(social_network, quarters):\n    print(f\"\ud83d\udcc5 {quarter_name}:\")\n    network.draw()\n</code></pre> <p>This visualization approach helps you understand the structure and evolution of complex relationships in your hypergraph data!</p>"},{"location":"getting-started/hypergraph-basics/","title":"Hypergraph Basics","text":"<p>A hypergraph is a generalization of a graph where edges (called hyperedges) can connect any number of vertices, not just two. This makes hypergraphs particularly powerful for modeling complex relationships in real-world scenarios.</p>"},{"location":"getting-started/hypergraph-basics/#what-is-a-hypergraph","title":"What is a Hypergraph?","text":""},{"location":"getting-started/hypergraph-basics/#traditional-graph-vs-hypergraph","title":"Traditional Graph vs Hypergraph","text":"Traditional GraphHypergraph <p>In a traditional graph: - Vertices (nodes) represent entities - Edges connect exactly two vertices - Relationships are pairwise only</p> <pre><code># Example: Social network friendship\nedges = [\n    (Alice, Bob),      # Alice and Bob are friends\n    (Bob, Charlie),    # Bob and Charlie are friends\n    (Alice, Charlie)   # Alice and Charlie are friends\n]\n</code></pre> <p>In a hypergraph: - Vertices represent entities - Hyperedges can connect any number of vertices - Can model group relationships naturally</p> <pre><code># Example: Group activities\nhyperedges = [\n    (Alice, Bob),              # Alice and Bob have coffee\n    (Alice, Bob, Charlie),     # All three work on a project\n    (Bob, Charlie, David, Eve) # Team meeting\n]\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/hypergraph-basics/#vertices","title":"Vertices","text":"<p>Vertices represent the fundamental entities in your data:</p> <pre><code>from hyperdb import HypergraphDB\n\nhg = HypergraphDB()\n\n# Add vertices with attributes\nhg.add_v(1, {\"name\": \"Alice\", \"age\": 30, \"role\": \"Engineer\"})\nhg.add_v(2, {\"name\": \"Bob\", \"age\": 25, \"role\": \"Designer\"})\nhg.add_v(3, {\"name\": \"Charlie\", \"age\": 35, \"role\": \"Manager\"})\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#hyperedges","title":"Hyperedges","text":"<p>Hyperedges represent relationships between multiple vertices:</p> <pre><code># Binary relationship (like traditional edge)\nhg.add_e((1, 2), {\"type\": \"collaboration\", \"project\": \"WebApp\"})\n\n# Multi-way relationship (unique to hypergraphs)\nhg.add_e((1, 2, 3), {\"type\": \"team\", \"project\": \"Database\"})\n\n# Even larger groups\nhg.add_e((1, 2, 3, 4, 5), {\"type\": \"department\", \"name\": \"Engineering\"})\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#real-world-applications","title":"Real-World Applications","text":""},{"location":"getting-started/hypergraph-basics/#1-academic-collaboration-networks","title":"1. Academic Collaboration Networks","text":"<p>Model research papers and their authors:</p> <pre><code># Authors as vertices\nhg.add_v(\"alice\", {\"name\": \"Dr. Alice Smith\", \"field\": \"ML\"})\nhg.add_v(\"bob\", {\"name\": \"Dr. Bob Jones\", \"field\": \"NLP\"})\nhg.add_v(\"charlie\", {\"name\": \"Dr. Charlie Brown\", \"field\": \"Vision\"})\n\n# Papers as hyperedges connecting all co-authors\nhg.add_e((\"alice\", \"bob\"), {\n    \"title\": \"Deep Learning for NLP\",\n    \"year\": 2023,\n    \"venue\": \"ICML\"\n})\n\nhg.add_e((\"alice\", \"bob\", \"charlie\"), {\n    \"title\": \"Multimodal AI Systems\", \n    \"year\": 2024,\n    \"venue\": \"NeurIPS\"\n})\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#2-e-commerce-transactions","title":"2. E-commerce Transactions","text":"<p>Model shopping baskets with multiple items:</p> <pre><code># Products as vertices\nhg.add_v(\"laptop\", {\"category\": \"Electronics\", \"price\": 999})\nhg.add_v(\"mouse\", {\"category\": \"Electronics\", \"price\": 25})\nhg.add_v(\"keyboard\", {\"category\": \"Electronics\", \"price\": 75})\n\n# Shopping baskets as hyperedges\nhg.add_e((\"laptop\", \"mouse\", \"keyboard\"), {\n    \"transaction_id\": \"T001\",\n    \"customer\": \"John Doe\",\n    \"total\": 1099,\n    \"date\": \"2024-01-15\"\n})\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#3-social-group-activities","title":"3. Social Group Activities","text":"<p>Model group events and activities:</p> <pre><code># People as vertices\npeople = [\"alice\", \"bob\", \"charlie\", \"david\", \"eve\"]\nfor person in people:\n    hg.add_v(person, {\"type\": \"person\"})\n\n# Group activities as hyperedges\nhg.add_e((\"alice\", \"bob\", \"charlie\"), {\n    \"activity\": \"Study Group\",\n    \"subject\": \"Machine Learning\",\n    \"location\": \"Library\"\n})\n\nhg.add_e((\"bob\", \"david\", \"eve\"), {\n    \"activity\": \"Basketball Game\",\n    \"location\": \"Gym\",\n    \"time\": \"Saturday 3pm\"\n})\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#advantages-of-hypergraphs","title":"Advantages of Hypergraphs","text":""},{"location":"getting-started/hypergraph-basics/#1-natural-group-modeling","title":"1. Natural Group Modeling","text":"<ul> <li>No need to artificially decompose group relationships into pairwise connections</li> <li>Preserves the semantic meaning of multi-way interactions</li> </ul>"},{"location":"getting-started/hypergraph-basics/#2-information-preservation","title":"2. Information Preservation","text":"<ul> <li>Traditional graphs lose information when representing group relationships</li> <li>Hypergraphs maintain the original group structure</li> </ul>"},{"location":"getting-started/hypergraph-basics/#3-flexible-queries","title":"3. Flexible Queries","text":"<ul> <li>Find all groups containing a specific member</li> <li>Discover overlapping communities naturally</li> <li>Analyze group sizes and compositions</li> </ul>"},{"location":"getting-started/hypergraph-basics/#mathematical-properties","title":"Mathematical Properties","text":""},{"location":"getting-started/hypergraph-basics/#degree-concepts","title":"Degree Concepts","text":"<p>In hypergraphs, we have several types of degrees:</p> <pre><code># Vertex degree: number of hyperedges containing the vertex\nvertex_degree = hg.d_v(vertex_id)\n\n# Hyperedge size: number of vertices in the hyperedge  \nedge_size = hg.d_e(edge_id)\n\n# Get all neighbors of a vertex (vertices connected via any hyperedge)\nneighbors = hg.N_v(vertex_id)\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#incidence-relationships","title":"Incidence Relationships","text":"<pre><code># Get all hyperedges containing a vertex\nincident_edges = hg.N_e(vertex_id)\n\n# Get all vertices in a hyperedge\nvertices_in_edge = hg.N_v_of_e(edge_id)\n</code></pre>"},{"location":"getting-started/hypergraph-basics/#comparison-with-other-data-structures","title":"Comparison with Other Data Structures","text":"Feature Graph Hypergraph Database Table Relationship Type Pairwise Multi-way Rows &amp; Columns Group Modeling Artificial Natural Complex JOINs Query Flexibility Medium High Very High Mathematical Theory Rich Growing Different Domain Visualization Easy Challenging Tabular"},{"location":"getting-started/hypergraph-basics/#getting-started-with-hypergraph-db","title":"Getting Started with Hypergraph-DB","text":"<p>Now that you understand the basics of hypergraphs, let's explore how to use Hypergraph-DB effectively:</p> <ol> <li>Quick Start Guide - Basic operations and examples</li> <li>API Reference - Complete function documentation</li> <li>Advanced Examples - Complex use cases</li> </ol> <p>Best Practices</p> <ul> <li>Use meaningful attributes for both vertices and hyperedges</li> <li>Consider the semantic meaning when deciding between multiple binary edges vs. one hyperedge</li> <li>Leverage the natural group structure in your data</li> <li>Use visualization to understand complex relationships</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#stable-release","title":"Stable Release","text":"<p>The stable version of Hypergraph-DB is available on PyPI. You can install it with <code>pip</code>:</p> <pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development or to get the latest features, you can install from the GitHub repository:</p> <pre><code>pip install git+https://github.com/iMoonLab/Hypergraph-DB.git\n</code></pre> <p>Development Version</p> <p>The development version may be unstable and not fully tested. If you encounter any bugs, please report them in GitHub Issues.</p>"},{"location":"getting-started/installation/#using-uv-recommended-for-development","title":"Using uv (Recommended for Development)","text":"<p>For faster dependency management, we recommend using uv:</p>"},{"location":"getting-started/installation/#install-uv","title":"Install uv","text":"WindowsmacOS/Linux <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"getting-started/installation/#clone-and-setup","title":"Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/iMoonLab/Hypergraph-DB.git\ncd Hypergraph-DB\n\n# Install with development dependencies\nuv sync --extra dev\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>To verify that Hypergraph-DB is installed correctly:</p> <pre><code>import hyperdb\nprint(f\"Hypergraph-DB version: {hyperdb.__version__}\")\n\n# Create a simple hypergraph\nhg = hyperdb.HypergraphDB()\nhg.add_v(1, {\"name\": \"test\"})\nprint(\"Installation successful!\")\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Hypergraph-DB has minimal dependencies, but you can install optional packages for enhanced functionality:</p>"},{"location":"getting-started/installation/#visualization-dependencies","title":"Visualization Dependencies","text":"<p>If you want to use the built-in visualization features:</p> <pre><code># These are included in the base installation\n# No additional dependencies needed for basic visualization\n</code></pre>"},{"location":"getting-started/installation/#development-dependencies","title":"Development Dependencies","text":"<p>For contributing to the project:</p> <pre><code># Using pip\npip install hypergraph-db[dev]\n\n# Using uv\nuv sync --extra dev\n</code></pre> <p>This includes: - <code>pytest</code> - for running tests - <code>black</code> - for code formatting - <code>isort</code> - for import sorting</p>"},{"location":"getting-started/installation/#documentation-dependencies","title":"Documentation Dependencies","text":"<p>For building documentation:</p> <pre><code># Using pip\npip install hypergraph-db[docs]\n\n# Using uv\nuv sync --extra docs\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Python Version: Ensure you're using Python 3.10 or later</li> <li>Virtual Environment: Consider using a virtual environment to avoid conflicts</li> <li>Permissions: On some systems, you might need to use <code>pip install --user</code></li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the GitHub Issues</li> <li>Create a new issue with detailed information about your setup</li> <li>Contact the maintainers at evanfeng97@qq.com</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will get you up and running with Hypergraph-DB in just a few minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install Hypergraph-DB:</p> <pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"getting-started/quickstart/#your-first-hypergraph","title":"Your First Hypergraph","text":"<p>Let's create a simple hypergraph representing a social network with group activities:</p> <pre><code>from hyperdb import HypergraphDB\n\n# Create a new hypergraph database\nhg = HypergraphDB()\n\n# Add some people as vertices\nhg.add_v(1, {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"})\nhg.add_v(2, {\"name\": \"Bob\", \"age\": 24, \"city\": \"Los Angeles\"})\nhg.add_v(3, {\"name\": \"Charlie\", \"age\": 28, \"city\": \"Chicago\"})\nhg.add_v(4, {\"name\": \"David\", \"age\": 35, \"city\": \"Miami\"})\n\nprint(f\"Added {hg.num_v} vertices\")\n</code></pre>"},{"location":"getting-started/quickstart/#adding-relationships","title":"Adding Relationships","text":"<p>Now let's add some relationships (hyperedges):</p> <pre><code># Pairwise relationships\nhg.add_e((1, 2), {\"relation\": \"friends\", \"since\": \"2020\"})\nhg.add_e((2, 3), {\"relation\": \"colleagues\", \"company\": \"TechCorp\"})\n\n# Group relationships (the power of hypergraphs!)\nhg.add_e((1, 2, 3), {\"relation\": \"study_group\", \"subject\": \"Machine Learning\"})\nhg.add_e((1, 3, 4), {\"relation\": \"project_team\", \"project\": \"WebApp\"})\n\nprint(f\"Added {hg.num_e} hyperedges\")\n</code></pre>"},{"location":"getting-started/quickstart/#basic-queries","title":"Basic Queries","text":"<p>Explore your hypergraph with simple queries:</p> <pre><code># Get all vertices and edges\nprint(\"All vertices:\", hg.all_v)\nprint(\"All edges:\", hg.all_e)\n\n# Get information about specific vertices\nalice_info = hg.v[1]\nprint(\"Alice's info:\", alice_info)\n\n# Find all hyperedges containing Alice (vertex 1)\nalice_edges = hg.N_e(1)\nprint(\"Hyperedges containing Alice:\", alice_edges)\n\n# Get degree information\nalice_degree = hg.d_v(1)  # Number of hyperedges containing Alice\nprint(f\"Alice is connected to {alice_degree} hyperedges\")\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-attributes","title":"Working with Attributes","text":"<p>Hypergraph-DB allows rich attributes on both vertices and hyperedges:</p> <pre><code># Update vertex attributes\nhg.update_v(1, {\"profession\": \"Data Scientist\", \"skills\": [\"Python\", \"ML\"]})\n\n# Update edge attributes\nedge_id = list(hg.all_e)[0]  # Get first edge ID\nhg.update_e(edge_id, {\"strength\": \"strong\", \"frequency\": \"daily\"})\n\n# Access updated information\nprint(\"Updated Alice info:\", hg.v[1])\nprint(\"Updated edge info:\", hg.e[edge_id])\n</code></pre>"},{"location":"getting-started/quickstart/#persistence","title":"Persistence","text":"<p>Save and load your hypergraph:</p> <pre><code># Save to file\nhg.save(\"my_social_network.pkl\")\n\n# Load from file\nhg_loaded = HypergraphDB()\nhg_loaded.load(\"my_social_network.pkl\")\n\nprint(f\"Loaded hypergraph with {hg_loaded.num_v} vertices and {hg_loaded.num_e} edges\")\n</code></pre>"},{"location":"getting-started/quickstart/#visualization","title":"Visualization","text":"<p>Visualize your hypergraph in a web browser:</p> <pre><code># This opens an interactive visualization in your default browser\nhg.show()\n</code></pre> <p>The visualization will show: - Vertices as nodes with their attributes - Hyperedges connecting multiple vertices - Interactive features for exploring the structure</p>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete example putting it all together:</p> <pre><code>from hyperdb import HypergraphDB\n\ndef create_research_collaboration_network():\n    \"\"\"Create a hypergraph representing research collaborations.\"\"\"\n\n    hg = HypergraphDB()\n\n    # Add researchers\n    researchers = {\n        1: {\"name\": \"Dr. Alice\", \"field\": \"ML\", \"university\": \"MIT\"},\n        2: {\"name\": \"Dr. Bob\", \"field\": \"NLP\", \"university\": \"Stanford\"},\n        3: {\"name\": \"Dr. Charlie\", \"field\": \"Vision\", \"university\": \"CMU\"},\n        4: {\"name\": \"Dr. Diana\", \"field\": \"Robotics\", \"university\": \"Berkeley\"},\n        5: {\"name\": \"Dr. Eve\", \"field\": \"Theory\", \"university\": \"Princeton\"}\n    }\n\n    for id, info in researchers.items():\n        hg.add_v(id, info)\n\n    # Add research papers (as hyperedges connecting collaborators)\n    papers = [\n        ((1, 2), {\"title\": \"Deep Learning for NLP\", \"year\": 2023, \"venue\": \"ICML\"}),\n        ((1, 3), {\"title\": \"Computer Vision Advances\", \"year\": 2023, \"venue\": \"CVPR\"}),\n        ((2, 3, 4), {\"title\": \"Multimodal AI\", \"year\": 2024, \"venue\": \"NeurIPS\"}),\n        ((1, 2, 3, 5), {\"title\": \"AI Theory and Practice\", \"year\": 2024, \"venue\": \"JMLR\"})\n    ]\n\n    for authors, paper_info in papers:\n        hg.add_e(authors, paper_info)\n\n    return hg\n\n# Create the network\nresearch_hg = create_research_collaboration_network()\n\n# Analyze the network\nprint(f\"Research network: {research_hg.num_v} researchers, {research_hg.num_e} papers\")\n\n# Find Dr. Alice's collaborations\nalice_papers = research_hg.N_e(1)\nprint(f\"Dr. Alice has collaborated on {len(alice_papers)} papers\")\n\n# Find the largest collaboration\nlargest_collab = max(research_hg.all_e, key=lambda e: research_hg.d_e(e))\ncollab_size = research_hg.d_e(largest_collab)\nprint(f\"Largest collaboration has {collab_size} authors\")\n\n# Visualize the research network\nresearch_hg.show()\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've learned the basics, explore more advanced features:</p> <ul> <li>Hypergraph Concepts - Deep dive into hypergraph theory</li> <li>API Reference - Complete documentation of all functions</li> <li>Advanced Examples - Complex use cases and patterns</li> <li>Visualization Guide - Interactive visualization features</li> </ul>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#pattern-1-multi-level-relationships","title":"Pattern 1: Multi-level Relationships","text":"<pre><code># Different types of relationships at different levels\nhg.add_e((1, 2), {\"type\": \"friendship\"})\nhg.add_e((1, 2, 3), {\"type\": \"team\"})\nhg.add_e((1, 2, 3, 4, 5), {\"type\": \"department\"})\n</code></pre>"},{"location":"getting-started/quickstart/#pattern-2-temporal-networks","title":"Pattern 2: Temporal Networks","text":"<pre><code># Add time information to track evolution\nhg.add_e((1, 2), {\"type\": \"collaboration\", \"start\": \"2023-01\", \"end\": \"2023-06\"})\nhg.add_e((1, 2, 3), {\"type\": \"collaboration\", \"start\": \"2023-07\", \"end\": \"2024-01\"})\n</code></pre>"},{"location":"getting-started/quickstart/#pattern-3-weighted-relationships","title":"Pattern 3: Weighted Relationships","text":"<pre><code># Add weights to represent relationship strength\nhg.add_e((1, 2, 3), {\"type\": \"project\", \"weight\": 0.8, \"importance\": \"high\"})\n</code></pre> <p>Performance Tips</p> <ul> <li>Use meaningful vertex and edge IDs for easier debugging</li> <li>Batch operations when adding many vertices/edges</li> <li>Use <code>show()</code> periodically to visualize and understand your data structure</li> <li>Save your work frequently with <code>save()</code> method</li> </ul>"},{"location":"visualization/","title":"Visualization Guide","text":"<p>Hypergraph-DB provides powerful interactive visualization capabilities to help you intuitively explore and understand hypergraph data structures.</p>"},{"location":"visualization/#visualization-overview","title":"\ud83c\udfa8 Visualization Overview","text":""},{"location":"visualization/#core-features","title":"\u2728 Core Features","text":"<ul> <li>\ud83c\udf10 Interactive Web Interface: Real-time visualization based on modern browsers</li> <li>\ud83d\udd0d Multi-level Exploration: Seamless switching from global views to local details</li> <li>\ud83d\udcca Smart Layout: Adaptive graph layout algorithms</li> <li>\ud83c\udfaf Real-time Data: Direct reflection of current hypergraph state</li> <li>\ud83d\udcf1 Responsive Design: Support for desktop and mobile devices</li> </ul>"},{"location":"visualization/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"visualization/#basic-usage","title":"Basic Usage","text":"<pre><code>from hyperdb import HypergraphDB\n\n# Create hypergraph\nhg = HypergraphDB()\n\n# Add data\nhg.add_v(1, {\"name\": \"Alice\", \"type\": \"Person\"})\nhg.add_v(2, {\"name\": \"Bob\", \"type\": \"Person\"}) \nhg.add_v(3, {\"name\": \"Project A\", \"type\": \"Project\"})\n\n# Add hyperedges\nhg.add_e((1, 2), {\"relation\": \"friends\"})\nhg.add_e((1, 2, 3), {\"relation\": \"collaboration\"})\n\n# Launch visualization\nhg.draw()  # Automatically opens browser\n</code></pre>"},{"location":"visualization/#visualization-configuration","title":"Visualization Configuration","text":"<pre><code># Custom port\nhg.draw(port=8888)\n\n# Generate HTML without opening browser\nviewer = hg.get_viewer(auto_open=False)\nhtml_content = viewer.get_html()\n</code></pre>"},{"location":"visualization/#detailed-feature-guide","title":"\ud83d\udcda Detailed Feature Guide","text":"\ud83d\udcd6 Section \ud83d\udccb Content Basic Operations Navigation, zooming, selection and other basic operations Interface Guide Detailed description of user interface components Advanced Customization Advanced customization options and techniques"},{"location":"visualization/#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"visualization/#data-exploration","title":"\ud83d\udcca Data Exploration","text":"<ul> <li>Relationship Analysis: Understanding complex multi-way relationships</li> <li>Pattern Discovery: Identifying important patterns in data</li> <li>Anomaly Detection: Finding outliers in data</li> </ul>"},{"location":"visualization/#research-applications","title":"\ud83d\udcc8 Research Applications","text":"<ul> <li>Social Networks: Analyzing multi-person group interactions</li> <li>Knowledge Graphs: Visualizing complex relationships between concepts</li> <li>Biological Networks: Displaying protein interaction networks</li> </ul>"},{"location":"visualization/#teaching-and-demonstration","title":"\ud83c\udf93 Teaching and Demonstration","text":"<ul> <li>Algorithm Visualization: Showing graph algorithm execution</li> <li>Concept Explanation: Intuitive explanation of hypergraph theory</li> <li>Case Studies: Demonstration of real-world applications</li> </ul>"},{"location":"visualization/#technical-architecture","title":"\ud83d\udd27 Technical Architecture","text":""},{"location":"visualization/#frontend-technology-stack","title":"Frontend Technology Stack","text":"<ul> <li>React 18: Modern user interface</li> <li>G6 Graph Library: Professional graph visualization engine</li> <li>Tailwind CSS: Elegant styling system</li> </ul>"},{"location":"visualization/#backend-integration","title":"Backend Integration","text":"<ul> <li>Python HTTP Server: Lightweight local server</li> <li>JSON Data Transfer: Efficient data exchange format</li> <li>Real-time Sync: Instant reflection of data changes</li> </ul>"},{"location":"visualization/#browser-compatibility","title":"\ud83d\udcf1 Browser Compatibility","text":"\ud83c\udf10 Browser \u2705 Supported Version \ud83d\udccb Notes Chrome 90+ Recommended, best performance Firefox 88+ Fully supported Safari 14+ Fully supported Edge 90+ Fully supported"},{"location":"visualization/#important-notes","title":"\ud83d\udea8 Important Notes","text":""},{"location":"visualization/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Large-scale Data: For more than 1000 vertices, filtering is recommended</li> <li>Memory Usage: Visualization consumes browser memory</li> <li>Network Ports: Ensure specified port is not occupied</li> </ul>"},{"location":"visualization/#security-reminders","title":"Security Reminders","text":"<ul> <li>Local Server: For local development only, not recommended for public exposure</li> <li>Data Sensitivity: Visualization displays all data in browser</li> </ul> <p>Ready to start exploring the visual world of hypergraphs? Begin your visualization journey with the Basic Operations Guide!</p>"},{"location":"visualization/advanced-customization/","title":"Advanced Customization","text":"<p>This guide explores the advanced customization capabilities of Hypergraph-DB visualization, enabling you to create unique and professional hypergraph visualizations.</p>"},{"location":"visualization/advanced-customization/#advanced-styling-system","title":"Advanced Styling System","text":""},{"location":"visualization/advanced-customization/#dynamic-style-engine","title":"\ud83c\udfa8 Dynamic Style Engine","text":""},{"location":"visualization/advanced-customization/#data-driven-style-mapping","title":"Data-Driven Style Mapping","text":"<pre><code>class StyleMapper {\n    constructor(visualization) {\n        this.viz = visualization;\n        this.mappings = new Map();\n    }\n\n    // Create style mapping rules\n    createMapping(property, attribute, scale) {\n        const mapping = {\n            property,    // Visual property (color, size, opacity)\n            attribute,   // Data attribute (degree, weight, type)\n            scale        // Scale function\n        };\n\n        this.mappings.set(property, mapping);\n        return this;\n    }\n\n    // Apply style mappings\n    applyMappings(elements) {\n        elements.forEach(element =&gt; {\n            this.mappings.forEach((mapping, property) =&gt; {\n                const value = element.data[mapping.attribute];\n                const mappedValue = mapping.scale(value);\n                element.style[property] = mappedValue;\n            });\n        });\n    }\n}\n\n// Usage example\nconst mapper = new StyleMapper(visualization);\n\n// Map node size based on degree\nmapper.createMapping('size', 'degree', \n    d3.scaleLinear().domain([1, 20]).range([5, 30])\n);\n\n// Map node color based on type\nmapper.createMapping('color', 'type', \n    d3.scaleOrdinal()\n      .domain(['researcher', 'institution', 'paper'])\n      .range(['#e74c3c', '#3498db', '#2ecc71'])\n);\n\n// Map edge opacity based on weight\nmapper.createMapping('opacity', 'weight',\n    d3.scaleLinear().domain([0, 1]).range([0.3, 1.0])\n);\n</code></pre>"},{"location":"visualization/advanced-customization/#advanced-animation-system","title":"\ud83c\udf08 Advanced Animation System","text":""},{"location":"visualization/advanced-customization/#complex-transition-animations","title":"Complex Transition Animations","text":"<pre><code>class AnimationEngine {\n    constructor() {\n        this.animations = new Map();\n        this.timeline = gsap.timeline();\n    }\n\n    // Create node entrance animation\n    animateNodeEntry(nodes) {\n        return gsap.fromTo(nodes.nodes(), \n            {\n                scale: 0,\n                opacity: 0,\n                rotation: 180\n            },\n            {\n                scale: 1,\n                opacity: 1,\n                rotation: 0,\n                duration: 0.8,\n                ease: \"back.out(1.7)\",\n                stagger: 0.1\n            }\n        );\n    }\n\n    // Create edge drawing animation\n    animateEdgeDrawing(edges) {\n        // Set initial path length to 0\n        edges.each(function() {\n            const pathLength = this.getTotalLength();\n            d3.select(this)\n                .attr('stroke-dasharray', pathLength)\n                .attr('stroke-dashoffset', pathLength);\n        });\n\n        // Animate path drawing\n        return gsap.to(edges.nodes(), {\n            strokeDashoffset: 0,\n            duration: 1.5,\n            ease: \"power2.inOut\",\n            stagger: 0.05\n        });\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#3d-visualization","title":"3D Visualization","text":""},{"location":"visualization/advanced-customization/#webgl-integration","title":"\ud83c\udf10 WebGL Integration","text":""},{"location":"visualization/advanced-customization/#threejs-basic-setup","title":"Three.js Basic Setup","text":"<pre><code>class Hypergraph3D {\n    constructor(container) {\n        this.container = container;\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, \n            window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\n        this.init();\n    }\n\n    init() {\n        // Setup renderer\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setClearColor(0xffffff);\n        this.container.appendChild(this.renderer.domElement);\n\n        // Setup camera position\n        this.camera.position.set(0, 0, 100);\n\n        // Add lighting\n        const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n        this.scene.add(ambientLight);\n\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        directionalLight.position.set(50, 50, 50);\n        this.scene.add(directionalLight);\n\n        this.animate();\n    }\n\n    createNode(data) {\n        const geometry = new THREE.SphereGeometry(data.size || 5, 32, 32);\n        const material = new THREE.MeshLambertMaterial({ \n            color: data.color || 0x3498db \n        });\n        const mesh = new THREE.Mesh(geometry, material);\n\n        mesh.position.set(data.x || 0, data.y || 0, data.z || 0);\n        mesh.userData = data;\n\n        this.scene.add(mesh);\n        return mesh;\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#custom-layout-algorithms","title":"Custom Layout Algorithms","text":""},{"location":"visualization/advanced-customization/#machine-learning-driven-layouts","title":"\ud83e\udde0 Machine Learning-Driven Layouts","text":""},{"location":"visualization/advanced-customization/#t-sne-layout","title":"t-SNE Layout","text":"<pre><code>class TSNELayout {\n    constructor(nodes, options = {}) {\n        this.nodes = nodes;\n        this.perplexity = options.perplexity || 30;\n        this.learningRate = options.learningRate || 200;\n        this.maxIterations = options.maxIterations || 1000;\n\n        this.similarities = this.computeSimilarities();\n        this.positions = this.initializePositions();\n    }\n\n    computeSimilarities() {\n        const n = this.nodes.length;\n        const similarities = new Array(n).fill(null).map(() =&gt; new Array(n).fill(0));\n\n        // Compute node feature similarity\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = 0; j &lt; n; j++) {\n                if (i !== j) {\n                    similarities[i][j] = this.featureSimilarity(\n                        this.nodes[i], this.nodes[j]\n                    );\n                }\n            }\n        }\n\n        return similarities;\n    }\n\n    featureSimilarity(nodeA, nodeB) {\n        // Calculate similarity based on node attributes\n        const features = ['degree', 'betweenness', 'clustering'];\n        let similarity = 0;\n\n        features.forEach(feature =&gt; {\n            const diff = Math.abs((nodeA[feature] || 0) - (nodeB[feature] || 0));\n            similarity += Math.exp(-diff);\n        });\n\n        return similarity / features.length;\n    }\n\n    run() {\n        for (let iter = 0; iter &lt; this.maxIterations; iter++) {\n            this.updatePositions();\n\n            if (iter % 100 === 0) {\n                console.log(`t-SNE iteration ${iter}`);\n            }\n        }\n\n        return this.positions;\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#performance-optimization","title":"Performance Optimization","text":""},{"location":"visualization/advanced-customization/#virtualization-and-lod","title":"\u26a1 Virtualization and LOD","text":""},{"location":"visualization/advanced-customization/#viewport-culling","title":"Viewport Culling","text":"<pre><code>class ViewportCulling {\n    constructor(visualization) {\n        this.viz = visualization;\n        this.viewportBounds = null;\n        this.margin = 100; // Viewport margin\n    }\n\n    updateViewportBounds() {\n        const transform = this.viz.getTransform();\n        const { width, height } = this.viz.getSize();\n\n        this.viewportBounds = {\n            left: -transform.x / transform.k - this.margin,\n            top: -transform.y / transform.k - this.margin,\n            right: (-transform.x + width) / transform.k + this.margin,\n            bottom: (-transform.y + height) / transform.k + this.margin\n        };\n    }\n\n    isInViewport(element) {\n        if (!this.viewportBounds) return true;\n\n        const { left, top, right, bottom } = this.viewportBounds;\n\n        return element.x &gt;= left &amp;&amp; element.x &lt;= right &amp;&amp;\n               element.y &gt;= top &amp;&amp; element.y &lt;= bottom;\n    }\n\n    filterVisibleElements(elements) {\n        this.updateViewportBounds();\n        return elements.filter(element =&gt; this.isInViewport(element));\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#level-of-detail-control","title":"Level of Detail Control","text":"<pre><code>class LevelOfDetail {\n    constructor() {\n        this.thresholds = [\n            { scale: 0.1, level: 'minimal' },\n            { scale: 0.5, level: 'low' },\n            { scale: 1.0, level: 'medium' },\n            { scale: 2.0, level: 'high' },\n            { scale: 5.0, level: 'maximum' }\n        ];\n    }\n\n    getLODLevel(scale) {\n        for (let i = this.thresholds.length - 1; i &gt;= 0; i--) {\n            if (scale &gt;= this.thresholds[i].scale) {\n                return this.thresholds[i].level;\n            }\n        }\n        return 'minimal';\n    }\n\n    applyLOD(elements, scale) {\n        const level = this.getLODLevel(scale);\n\n        elements.forEach(element =&gt; {\n            switch (level) {\n                case 'minimal':\n                    this.applyMinimalLOD(element);\n                    break;\n                case 'low':\n                    this.applyLowLOD(element);\n                    break;\n                case 'medium':\n                    this.applyMediumLOD(element);\n                    break;\n                case 'high':\n                    this.applyHighLOD(element);\n                    break;\n                case 'maximum':\n                    this.applyMaximumLOD(element);\n                    break;\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#web-workers-for-parallel-computing","title":"\ud83c\udfc3 Web Workers for Parallel Computing","text":""},{"location":"visualization/advanced-customization/#layout-computation-worker","title":"Layout Computation Worker","text":"<pre><code>// layout-worker.js\nclass LayoutWorker {\n    constructor() {\n        self.onmessage = this.handleMessage.bind(this);\n    }\n\n    handleMessage(event) {\n        const { type, data } = event.data;\n\n        switch (type) {\n            case 'forceLayout':\n                this.computeForceLayout(data);\n                break;\n            case 'clustering':\n                this.computeClustering(data);\n                break;\n        }\n    }\n\n    computeForceLayout(data) {\n        const { nodes, edges, iterations } = data;\n\n        for (let i = 0; i &lt; iterations; i++) {\n            // Force-directed calculation\n            this.applyForces(nodes, edges);\n\n            // Report progress periodically\n            if (i % 10 === 0) {\n                self.postMessage({\n                    type: 'progress',\n                    iteration: i,\n                    total: iterations\n                });\n            }\n        }\n\n        // Return results\n        self.postMessage({\n            type: 'layoutComplete',\n            positions: nodes.map(n =&gt; ({ id: n.id, x: n.x, y: n.y }))\n        });\n    }\n}\n\nnew LayoutWorker();\n</code></pre>"},{"location":"visualization/advanced-customization/#interactive-data-exploration","title":"Interactive Data Exploration","text":""},{"location":"visualization/advanced-customization/#multi-dimensional-filtering","title":"\ud83d\udd0d Multi-dimensional Filtering","text":""},{"location":"visualization/advanced-customization/#dynamic-filter-component","title":"Dynamic Filter Component","text":"<pre><code>class MultiDimensionalFilter {\n    constructor(data, container) {\n        this.data = data;\n        this.container = container;\n        this.filters = new Map();\n        this.callbacks = [];\n\n        this.createFilterUI();\n    }\n\n    createFilterUI() {\n        const filterPanel = d3.select(this.container)\n            .append('div')\n            .attr('class', 'filter-panel');\n\n        // Analyze data attributes\n        const attributes = this.analyzeAttributes();\n\n        attributes.forEach(attr =&gt; {\n            this.createAttributeFilter(filterPanel, attr);\n        });\n    }\n\n    analyzeAttributes() {\n        const attributes = [];\n        const sample = this.data[0];\n\n        Object.keys(sample).forEach(key =&gt; {\n            const values = this.data.map(d =&gt; d[key]);\n            const uniqueValues = [...new Set(values)];\n\n            const attribute = {\n                name: key,\n                type: this.detectType(values),\n                values: uniqueValues,\n                min: Math.min(...values.filter(v =&gt; typeof v === 'number')),\n                max: Math.max(...values.filter(v =&gt; typeof v === 'number'))\n            };\n\n            attributes.push(attribute);\n        });\n\n        return attributes;\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#real-time-data-binding","title":"\ud83d\udcca Real-time Data Binding","text":""},{"location":"visualization/advanced-customization/#data-stream-visualization","title":"Data Stream Visualization","text":"<pre><code>class RealTimeHypergraph {\n    constructor(container) {\n        this.container = container;\n        this.data = { nodes: [], edges: [] };\n        this.updateQueue = [];\n        this.isAnimating = false;\n\n        this.visualization = new HypergraphVisualization(container);\n        this.startUpdateLoop();\n    }\n\n    // Add data update to queue\n    queueUpdate(update) {\n        this.updateQueue.push({\n            ...update,\n            timestamp: Date.now()\n        });\n    }\n\n    // Start update loop\n    startUpdateLoop() {\n        const processUpdates = () =&gt; {\n            if (this.updateQueue.length &gt; 0 &amp;&amp; !this.isAnimating) {\n                this.processNextUpdate();\n            }\n            requestAnimationFrame(processUpdates);\n        };\n\n        processUpdates();\n    }\n\n    // WebSocket connection for real-time data\n    connectWebSocket(url) {\n        this.ws = new WebSocket(url);\n\n        this.ws.onmessage = (event) =&gt; {\n            const update = JSON.parse(event.data);\n            this.queueUpdate(update);\n        };\n\n        this.ws.onopen = () =&gt; {\n            console.log('WebSocket connected');\n        };\n\n        this.ws.onclose = () =&gt; {\n            console.log('WebSocket disconnected');\n            // Attempt reconnection\n            setTimeout(() =&gt; this.connectWebSocket(url), 5000);\n        };\n    }\n}\n</code></pre>"},{"location":"visualization/advanced-customization/#next-steps","title":"Next Steps","text":"<p>Now that you've mastered advanced customization techniques for Hypergraph-DB, you can:</p> <ol> <li>\ud83d\ude80 Apply these techniques to real projects</li> <li>\ud83d\udcd6 Check the API Reference</li> <li>\ud83d\udca1 Explore Practical Examples</li> <li>\ud83e\udd1d Join Community Discussions</li> </ol> <p>Create amazing hypergraph visualization experiences!</p>"},{"location":"visualization/basic-operations/","title":"Basic Operations Guide","text":"<p>This guide will help you master the basic operations of the hypergraph visualization interface.</p>"},{"location":"visualization/basic-operations/#mouse-operations","title":"\ud83d\uddb1\ufe0f Mouse Operations","text":""},{"location":"visualization/basic-operations/#basic-interactions","title":"Basic Interactions","text":"\ud83c\udfaf Operation \ud83d\udcdd Description \ud83d\udca1 Tips Left Click Select vertex or hyperedge Click empty area to deselect Left Drag Move view Hold and drag to pan entire graph Right Click Open context menu Quick access to common functions Mouse Hover Show detailed information Hover over elements to view properties"},{"location":"visualization/basic-operations/#zoom-operations","title":"Zoom Operations","text":"<pre><code>// Mouse wheel zoom\nScroll Up = Zoom in\nScroll Down = Zoom out\n\n// Keyboard shortcuts\nCtrl + Mouse Wheel = Fine zoom control\nCtrl + 0 = Reset zoom\n</code></pre>"},{"location":"visualization/basic-operations/#keyboard-shortcuts","title":"\u2328\ufe0f Keyboard Shortcuts","text":""},{"location":"visualization/basic-operations/#navigation-shortcuts","title":"Navigation Shortcuts","text":"\ud83d\udd11 Key \u26a1 Function \ud83d\udccb Description <code>Space</code> Pan mode Hold spacebar and drag to move view <code>F</code> Fit to window Auto-adjust view to show all content <code>R</code> Reset view Return to initial view state <code>Ctrl + F</code> Search Open search box to find specific elements"},{"location":"visualization/basic-operations/#selection-shortcuts","title":"Selection Shortcuts","text":"\ud83d\udd11 Key \u26a1 Function \ud83d\udccb Description <code>Ctrl + A</code> Select all Select all visible elements <code>Ctrl + Click</code> Multi-select Add or remove elements from selection <code>Shift + Click</code> Range select Select all elements between two elements <code>Esc</code> Clear selection Clear current selection"},{"location":"visualization/basic-operations/#element-selection","title":"\ud83c\udfaf Element Selection","text":""},{"location":"visualization/basic-operations/#vertex-selection","title":"Vertex Selection","text":"<pre><code># Create vertices with different types\nhg.add_v(\"person_1\", {\"name\": \"Alice\", \"type\": \"Person\", \"age\": 30})\nhg.add_v(\"project_1\", {\"name\": \"AI Research\", \"type\": \"Project\"})\nhg.add_v(\"skill_1\", {\"name\": \"Machine Learning\", \"type\": \"Skill\"})\n</code></pre> <p>Selection Effects: - \u2728 Highlight: Selected vertices change color - \ud83d\udcca Info Panel: Detailed properties shown on the right - \ud83d\udd17 Associated Display: Related hyperedges are also highlighted</p>"},{"location":"visualization/basic-operations/#hyperedge-selection","title":"Hyperedge Selection","text":"<pre><code># Create different types of hyperedges\nhg.add_e((\"person_1\", \"project_1\"), {\"relation\": \"leads\", \"start_date\": \"2024-01-01\"})\nhg.add_e((\"person_1\", \"project_1\", \"skill_1\"), {\"relation\": \"applies_skill_in_project\"})\n</code></pre> <p>Selection Effects: - \ud83c\udfa8 Edge Highlight: Selected hyperedges become bold or change color - \ud83d\udccb Relationship Info: Shows hyperedge properties and connected vertices - \ud83c\udfaf Endpoint Emphasis: Connected vertices are also highlighted</p>"},{"location":"visualization/basic-operations/#view-navigation","title":"\ud83d\udd0d View Navigation","text":""},{"location":"visualization/basic-operations/#zoom-levels","title":"Zoom Levels","text":"<pre><code>\ud83d\udd0d Zoom Level Description:\n\u251c\u2500\u2500 25% - Ultra wide view, suitable for overall overview\n\u251c\u2500\u2500 50% - Wide view, for viewing large-scale structure\n\u251c\u2500\u2500 100% - Standard view, default display level\n\u251c\u2500\u2500 200% - Magnified view, for viewing details\n\u2514\u2500\u2500 400% - Ultra magnified view, editing mode\n</code></pre>"},{"location":"visualization/basic-operations/#auto-layout","title":"Auto Layout","text":"<p>The system provides multiple layout algorithms:</p> \ud83c\udfa8 Layout Type \ud83d\udcdd Use Case \u2699\ufe0f Features Force-directed General purpose Natural distribution, good aesthetics Circular Small-scale data Circular arrangement, clear structure Hierarchical Hierarchical data Tree structure, clear levels Grid Regular data Grid arrangement, neat alignment"},{"location":"visualization/basic-operations/#information-viewing","title":"\ud83d\udcca Information Viewing","text":""},{"location":"visualization/basic-operations/#hover-tooltips","title":"Hover Tooltips","text":"<p>Hovering the mouse over any element shows:</p> <pre><code>Vertex Information:\n  - Unique identifier\n  - All property key-value pairs\n  - Number of connected hyperedges\n  - Neighbor vertex statistics\n\nHyperedge Information:\n  - List of connected vertices\n  - Relationship type and properties\n  - Weight and strength\n  - Metadata like creation time\n</code></pre>"},{"location":"visualization/basic-operations/#details-panel","title":"Details Panel","text":"<p>After selecting an element, the right panel shows complete information:</p> <ul> <li>\ud83d\udd0d Basic Info: ID, type, label</li> <li>\ud83d\udccb Property List: All key-value pairs</li> <li>\ud83d\udd17 Relationship Network: Connected other elements</li> <li>\ud83d\udcca Statistics: Degree, centrality and other metrics</li> </ul>"},{"location":"visualization/basic-operations/#toolbar-functions","title":"\ud83c\udf9b\ufe0f Toolbar Functions","text":""},{"location":"visualization/basic-operations/#main-toolbar","title":"Main Toolbar","text":"<pre><code>\ud83e\uddf0 Toolbar Layout:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\ud83c\udfe0] [\ud83d\udd0d] [\u2699\ufe0f] [\ud83d\udcc1] [\ud83d\udcbe] [\u2753]    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2502    \u2502    \u2502    \u2502    \u2502    \u2502\n  \u2502    \u2502    \u2502    \u2502    \u2502    \u2514\u2500 Help\n  \u2502    \u2502    \u2502    \u2502    \u2514\u2500 Export data\n  \u2502    \u2502    \u2502    \u2514\u2500 Load data\n  \u2502    \u2502    \u2514\u2500 Settings panel\n  \u2502    \u2514\u2500 Search function\n  \u2514\u2500 Return to home\n</code></pre>"},{"location":"visualization/basic-operations/#secondary-toolbar","title":"Secondary Toolbar","text":"\ud83d\udd27 Tool \ud83d\udcdd Function \ud83c\udfaf Purpose \ud83c\udfa8 Style Change colors and sizes Personalized display \ud83d\udccf Measure Calculate distances and paths Analysis tools \ud83d\udd0d Filter Hide specific elements Simplify view \ud83d\udcf8 Screenshot Save current view Sharing and recording"},{"location":"visualization/basic-operations/#operation-tips","title":"\ud83d\udca1 Operation Tips","text":""},{"location":"visualization/basic-operations/#efficient-navigation","title":"Efficient Navigation","text":"<ol> <li>Quick Locate: Use search function to quickly find specific elements</li> <li>Smart Zoom: Double-click elements to auto-zoom to appropriate level</li> <li>Context Switching: Right-click menu provides quick operations</li> <li>Batch Operations: Use multi-select for batch processing</li> </ol>"},{"location":"visualization/basic-operations/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Tips for large dataset visualization\nviewer = hg.get_viewer()\n\n# Show only vertices with high degree\nviewer.filter_by_degree(min_degree=3)\n\n# Limit display count\nviewer.limit_vertices(max_count=100)\n\n# Enable LOD (Level of Detail)\nviewer.enable_lod(True)\n</code></pre> <p>After mastering these basic operations, you can efficiently use the hypergraph visualization features! Next, learn about the Interface Guide to deeply understand each functional area.</p>"},{"location":"visualization/interface-guide/","title":"Interface Guide","text":"<p>The Hypergraph-DB visualization interface provides an intuitive web-based interface for exploring hypergraph data. This guide covers all interface components and their functionality.</p>"},{"location":"visualization/interface-guide/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>To launch the visualization interface:</p> <pre><code>import hyperdb\nhg = hyperdb.HypergraphDB()\n# Add your data...\nhg.draw()  # Opens web interface at http://localhost:8080\n</code></pre>"},{"location":"visualization/interface-guide/#interface-layout","title":"\ud83d\udccb Interface Layout","text":"<p>The visualization interface consists of three main areas:</p>"},{"location":"visualization/interface-guide/#top-header","title":"\ud83c\udfe0 Top Header","text":"\ufffd Section \ud83c\udfaf Function \ufffd Description Logo &amp; Title Brand Identity \"Hypergraph Visualization\" title Database Info Statistics Card Shows vertex and edge counts Search Bar Global Search Find vertices by ID, type, or description <p>Database Information Display: <pre><code>Database: \"current_hypergraph\"\nVertices: \"1,234 vertices\"  \nHyperedges: \"567 hyperedges\"\n</code></pre></p>"},{"location":"visualization/interface-guide/#search-functionality","title":"\ud83d\udd0d Search Functionality","text":"<ul> <li>Search by ID: Enter vertex identifier</li> <li>Search by Type: Find vertices by entity type (PERSON, CONCEPT, etc.)</li> <li>Search by Description: Full-text search in descriptions</li> <li>Real-time Results: Updates as you type</li> </ul>"},{"location":"visualization/interface-guide/#left-sidebar-vertex-explorer","title":"\ud83d\udccb Left Sidebar - Vertex Explorer","text":""},{"location":"visualization/interface-guide/#vertex-list-features","title":"Vertex List Features","text":"<pre><code>\ud83c\udfaf Vertex Browser\n\u251c\u2500\u2500 \ud83d\udcca Sorted by Degree (High to Low)\n\u251c\u2500\u2500 \ud83c\udff7\ufe0f Entity Type Indicators\n\u2502   \u251c\u2500\u2500 \ufffd PERSON (teal color)\n\u2502   \u251c\u2500\u2500 \ufffd CONCEPT (purple color) \n\u2502   \u251c\u2500\u2500 \ufffd ORGANIZATION (orange color)\n\u2502   \u251c\u2500\u2500 \ufffd LOCATION (green color)\n\u2502   \u2514\u2500\u2500 \u26a1 EVENT, PRODUCT (other colors)\n\u251c\u2500\u2500 \ufffd Degree Display (connection count)\n\u2514\u2500\u2500 \ufffd Description Preview (truncated to 100 chars)\n</code></pre>"},{"location":"visualization/interface-guide/#vertex-card-information","title":"Vertex Card Information","text":"<p>Each vertex displays: - ID: Unique identifier - Type Badge: Color-coded entity type - Degree: Number of connections - Description: Brief text preview</p>"},{"location":"visualization/interface-guide/#interactive-features","title":"Interactive Features","text":"<ul> <li>\ud83d\uddb1\ufe0f Click: Select vertex and load its subgraph</li> <li>\ufffd Search: Filter vertices in real-time</li> <li>\ufffd Auto-sort: Ordered by connection degree</li> <li>\ufffd\ufe0f Preview: Hover to see full information</li> </ul>"},{"location":"visualization/interface-guide/#main-canvas-graph-visualization","title":"\ud83c\udfa8 Main Canvas - Graph Visualization","text":""},{"location":"visualization/interface-guide/#visualization-modes","title":"Visualization Modes","text":"\ud83c\udfad Mode \ud83d\udcdd Description \ud83c\udfaf Best For Hypergraph Mode Shows true hyperedge structure Complex multi-way relationships Graph Mode Traditional node-link display Simple binary relationships"},{"location":"visualization/interface-guide/#graph-elements","title":"Graph Elements","text":""},{"location":"visualization/interface-guide/#vertex-rendering","title":"\ud83c\udfaf Vertex Rendering","text":"<pre><code>// Vertex visual properties based on entity type\nconst vertexColors = {\n  PERSON: \"#00C9C9\",      // Teal\n  CONCEPT: \"#a680ff\",     // Purple  \n  ORGANIZATION: \"#F08F56\", // Orange\n  LOCATION: \"#16f69c\",    // Green\n  EVENT: \"#004ac9\",       // Blue\n  PRODUCT: \"#f056d1\"      // Pink\n}\n\n// Size scaled by degree (connections)\nnodeSize = Math.max(8, Math.min(32, degree * 2))\n</code></pre>"},{"location":"visualization/interface-guide/#hyperedge-display","title":"\ud83d\udd17 Hyperedge Display","text":"<pre><code>// Hyperedge visualization options\nconst edgeStyles = {\n  // Binary edges (2 vertices)\n  binary: {\n    stroke: \"#8b5cf6\",\n    strokeWidth: 2,\n    strokeDasharray: null\n  },\n\n  // Multi-way hyperedges (3+ vertices)  \n  multiway: {\n    stroke: \"#8b5cf6\",\n    strokeWidth: 3,\n    strokeDasharray: \"5,5\"\n  }\n}\n</code></pre>"},{"location":"visualization/interface-guide/#interactive-controls","title":"Interactive Controls","text":"\ud83c\udfae Control \ud83d\uddb1\ufe0f Action \ud83c\udfaf Function Mouse Wheel Scroll Zoom in/out Mouse Drag Left click + drag Pan canvas Node Click Left click Select/deselect vertex Node Hover Mouse over Show vertex tooltip Canvas Click Click empty space Clear selection"},{"location":"visualization/interface-guide/#layout-algorithms","title":"Layout Algorithms","text":"<p>The interface uses force-directed layout with these features: - Automatic positioning based on graph structure - Collision detection prevents node overlap - Smooth animations for layout changes - Responsive design adapts to different screen sizes</p>"},{"location":"visualization/interface-guide/#right-panel-vertex-details","title":"\ud83d\udcca Right Panel - Vertex Details","text":""},{"location":"visualization/interface-guide/#information-display","title":"Information Display","text":"<p>When a vertex is selected, the right panel shows:</p>"},{"location":"visualization/interface-guide/#basic-properties","title":"Basic Properties","text":"<pre><code>Vertex Details:\n  ID: \"person_123\"\n  Type: \"PERSON\"  \n  Degree: 8 connections\n  Description: \"Full description text...\"\n</code></pre>"},{"location":"visualization/interface-guide/#connection-analysis","title":"Connection Analysis","text":"<ul> <li>Direct neighbors: List of connected vertices</li> <li>Hyperedge participation: Which hyperedges contain this vertex</li> <li>Connection statistics: Degree distribution and patterns</li> </ul>"},{"location":"visualization/interface-guide/#subgraph-visualization","title":"Subgraph Visualization","text":"<ul> <li>Local view: Shows vertex and its immediate neighborhood</li> <li>Hyperedge structure: Displays all hyperedges containing the vertex</li> <li>Interactive exploration: Click neighbors to explore further</li> </ul>"},{"location":"visualization/interface-guide/#control-options","title":"\ud83c\udf9b\ufe0f Control Options","text":""},{"location":"visualization/interface-guide/#visualization-mode-toggle","title":"Visualization Mode Toggle","text":"<p>Switch between visualization modes:</p> <pre><code>// Toggle between hypergraph and graph modes\nconst modes = {\n  hyper: \"Show true hyperedge structure\",\n  graph: \"Traditional node-link display\"  \n}\n</code></pre>"},{"location":"visualization/interface-guide/#loading-states","title":"Loading States","text":"<p>The interface provides visual feedback: - Loading spinner while processing large datasets - Error messages for connection or data issues - Progress indicators for long operations</p>"},{"location":"visualization/interface-guide/#visual-themes","title":"\ud83c\udfa8 Visual Themes","text":""},{"location":"visualization/interface-guide/#color-schemes","title":"Color Schemes","text":"\ud83c\udfa8 Entity Type \ud83c\udf08 Color \ud83d\udd0d Hex Code PERSON Teal <code>#00C9C9</code> CONCEPT Purple <code>#a680ff</code> ORGANIZATION Orange <code>#F08F56</code> LOCATION Green <code>#16f69c</code> EVENT Blue <code>#004ac9</code> PRODUCT Pink <code>#f056d1</code>"},{"location":"visualization/interface-guide/#responsive-design","title":"Responsive Design","text":"<p>The interface adapts to different screen sizes:</p> <pre><code>Screen Breakpoints:\n\u251c\u2500\u2500 \ud83d\udcf1 Mobile (&lt; 768px): Stacked layout\n\u251c\u2500\u2500 \ud83d\udcdf Tablet (768-1024px): Sidebar toggle  \n\u2514\u2500\u2500 \ud83d\udda5\ufe0f Desktop (&gt; 1024px): Full three-panel layout\n</code></pre>"},{"location":"visualization/interface-guide/#performance-features","title":"\ud83d\ude80 Performance Features","text":""},{"location":"visualization/interface-guide/#optimizations","title":"Optimizations","text":"<ul> <li>Lazy loading: Only renders visible elements</li> <li>Virtual scrolling: Efficient handling of large vertex lists</li> <li>Canvas optimization: WebGL-accelerated rendering via G6</li> <li>Data streaming: Progressive loading for large datasets</li> </ul>"},{"location":"visualization/interface-guide/#browser-compatibility","title":"Browser Compatibility","text":"<ul> <li>Modern browsers: Chrome, Firefox, Safari, Edge</li> <li>WebGL support: Required for optimal performance</li> <li>Responsive design: Works on mobile and desktop</li> </ul>"},{"location":"visualization/interface-guide/#keyboard-shortcuts","title":"\u26a1 Keyboard Shortcuts","text":"\u2328\ufe0f Shortcut \ud83c\udfaf Function <code>Ctrl/Cmd + C</code> Stop visualization server <code>F</code> Fit graph to screen <code>Escape</code> Clear selection <code>Space</code> Center graph <code>+/-</code> Zoom in/out <p>Ready to explore? Check out our Basic Operations guide to start interacting with your hypergraph data!</p>"},{"location":"zh/","title":"Hypergraph-DB","text":"<p>Hypergraph-DB \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u7075\u6d3b\u4e14\u57fa\u4e8e Python \u7684\u6570\u636e\u5e93\uff0c\u4e13\u4e3a\u5efa\u6a21\u548c\u7ba1\u7406**\u8d85\u56fe**\u800c\u8bbe\u8ba1\u2014\u2014\u8fd9\u662f\u4e00\u79cd\u5e7f\u4e49\u7684\u56fe\u7ed3\u6784\uff0c\u5176\u4e2d\u8fb9\uff08\u8d85\u8fb9\uff09\u53ef\u4ee5\u8fde\u63a5\u4efb\u610f\u6570\u91cf\u7684\u9876\u70b9\u3002\u8fd9\u4f7f\u5f97 Hypergraph-DB \u6210\u4e3a\u5728\u5404\u79cd\u9886\u57df\uff08\u5982\u77e5\u8bc6\u56fe\u8c31\u3001\u793e\u4ea4\u7f51\u7edc\u548c\u79d1\u5b66\u6570\u636e\u5efa\u6a21\uff09\u4e2d\u8868\u793a\u5b9e\u4f53\u95f4\u590d\u6742\u5173\u7cfb\u7684\u7406\u60f3\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"zh/#_1","title":"\u2728 \u7279\u6027","text":"<ul> <li>\ud83d\ude80 \u8f7b\u91cf\u5feb\u901f: \u7eaf Python \u5b9e\u73b0\uff0c\u4f9d\u8d56\u6700\u5c11</li> <li>\ud83d\udd17 \u8d85\u56fe\u652f\u6301: \u539f\u751f\u652f\u6301\u8fde\u63a5\u591a\u4e2a\u9876\u70b9\u7684\u8d85\u8fb9</li> <li>\ud83d\udcbe \u6301\u4e45\u5316: \u5185\u7f6e\u5e8f\u5217\u5316\u548c\u52a0\u8f7d\u529f\u80fd</li> <li>\ud83d\udcca \u53ef\u89c6\u5316: \u5728 Web \u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u4ea4\u4e92\u5f0f\u8d85\u56fe\u53ef\u89c6\u5316</li> <li>\ud83d\udd0d \u7075\u6d3b\u67e5\u8be2: \u4e30\u5bcc\u7684\u9876\u70b9\u548c\u8d85\u8fb9\u67e5\u8be2\u529f\u80fd</li> <li>\ud83d\udee0\ufe0f \u7b80\u5355 API: \u76f4\u89c2\u6613\u7528\u7684\u63a5\u53e3</li> </ul>"},{"location":"zh/#_2","title":"\ud83c\udfaf \u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u77e5\u8bc6\u56fe\u8c31: \u5efa\u6a21\u5b9e\u4f53\u95f4\u7684\u590d\u6742\u5173\u7cfb</li> <li>\u793e\u4ea4\u7f51\u7edc: \u8868\u793a\u7fa4\u4f53\u4ea4\u4e92\u548c\u591a\u65b9\u5173\u7cfb</li> <li>\u79d1\u5b66\u6570\u636e: \u5728\u7814\u7a76\u6570\u636e\u4e2d\u5efa\u6a21\u590d\u6742\u4f9d\u8d56\u5173\u7cfb</li> <li>\u63a8\u8350\u7cfb\u7edf: \u6355\u83b7\u7528\u6237\u3001\u7269\u54c1\u548c\u4e0a\u4e0b\u6587\u4e4b\u95f4\u7684\u591a\u8def\u4ea4\u4e92</li> </ul>"},{"location":"zh/#_3","title":"\ud83d\udcc8 \u6027\u80fd","text":"<p>Hypergraph-DB \u4e13\u4e3a\u9ad8\u6548\u6027\u800c\u8bbe\u8ba1\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\uff1a</p> \u9876\u70b9\u6570 \u8d85\u8fb9\u6570 \u6dfb\u52a0\u9876\u70b9 \u6dfb\u52a0\u8fb9 \u67e5\u8be2\u65f6\u95f4 \u603b\u65f6\u95f4 100,000 20,000 0.12s 0.17s 0.04s 0.58s 500,000 100,000 0.85s 1.07s 0.22s 3.34s 1,000,000 200,000 1.75s 1.82s 0.51s 6.60s"},{"location":"zh/#_4","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/#_5","title":"\u5b89\u88c5","text":"<pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"zh/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u5e26\u5c5e\u6027\u7684\u9876\u70b9\nhg.add_v(1, {\"name\": \"Alice\", \"age\": 30})\nhg.add_v(2, {\"name\": \"Bob\", \"age\": 25})\nhg.add_v(3, {\"name\": \"Charlie\", \"age\": 35})\n\n# \u6dfb\u52a0\u8fde\u63a5\u591a\u4e2a\u9876\u70b9\u7684\u8d85\u8fb9\nhg.add_e((1, 2), {\"relation\": \"friends\"})\nhg.add_e((1, 2, 3), {\"relation\": \"project_team\"})\n\n# \u67e5\u8be2\u8d85\u56fe\nprint(f\"\u9876\u70b9: {hg.all_v}\")\nprint(f\"\u8fb9: {hg.all_e}\")\n\n# \u53ef\u89c6\u5316\u8d85\u56fe\nhg.draw()  # \u5728\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u53ef\u89c6\u5316\n</code></pre>"},{"location":"zh/#_7","title":"\ud83d\udcda \u6587\u6863","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb: \u5b89\u88c5\u548c\u57fa\u672c\u8bbe\u7f6e</li> <li>API \u53c2\u8003: \u5b8c\u6574\u7684 API \u6587\u6863  </li> <li>\u53ef\u89c6\u5316\u6307\u5357: \u4ea4\u4e92\u5f0f\u8d85\u56fe\u53ef\u89c6\u5316</li> <li>\u793a\u4f8b: \u5b9e\u7528\u793a\u4f8b\u548c\u6559\u7a0b</li> </ul>"},{"location":"zh/#_8","title":"\ud83e\udd1d \u8d21\u732e","text":"<p>\u6b22\u8fce\u8d21\u732e\uff01\u8bf7\u67e5\u770b\u6211\u4eec\u7684 GitHub \u4ed3\u5e93 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"zh/#_9","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 Apache License 2.0 \u8bb8\u53ef\u8bc1 - \u8be6\u89c1 LICENSE \u6587\u4ef6\u3002</p>"},{"location":"zh/#_10","title":"\ud83d\udcec \u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u4f5c\u8005: \u4e30\u4e00\u5e06</li> <li>\u90ae\u7bb1: evanfeng97@qq.com</li> <li>GitHub: @iMoonLab</li> </ul> <p>\u7531 iMoonLab \u56e2\u961f\u7528 \u2764\ufe0f \u6784\u5efa</p>"},{"location":"zh/CONTRIBUTING/","title":"\u4e3a Hypergraph-DB \u505a\u8d21\u732e","text":"<p>\u611f\u8c22\u60a8\u5bf9\u4e3a Hypergraph-DB \u505a\u8d21\u732e\u7684\u5174\u8da3\uff01\u6211\u4eec\u6b22\u8fce\u793e\u533a\u7684\u8d21\u732e\uff0c\u5e76\u611f\u8c22\u60a8\u5e2e\u52a9\u6211\u4eec\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002</p>"},{"location":"zh/CONTRIBUTING/#_1","title":"\u884c\u4e3a\u51c6\u5219","text":"<p>\u672c\u9879\u76ee\u548c\u6240\u6709\u53c2\u4e0e\u8005\u90fd\u53d7\u6211\u4eec\u7684\u884c\u4e3a\u51c6\u5219\u7ea6\u675f\u3002\u901a\u8fc7\u53c2\u4e0e\uff0c\u60a8\u9700\u8981\u9075\u5b88\u6b64\u51c6\u5219\u3002</p>"},{"location":"zh/CONTRIBUTING/#_2","title":"\ud83e\udd1d \u5982\u4f55\u8d21\u732e","text":"<p>\u6709\u591a\u79cd\u65b9\u5f0f\u4e3a Hypergraph-DB \u505a\u8d21\u732e\uff1a</p> <ul> <li>\ud83d\udc1b \u62a5\u544a\u9519\u8bef - \u5e2e\u52a9\u6211\u4eec\u8bc6\u522b\u548c\u4fee\u590d\u95ee\u9898</li> <li>\ud83d\udca1 \u5efa\u8bae\u529f\u80fd - \u5206\u4eab\u65b0\u529f\u80fd\u7684\u60f3\u6cd5</li> <li>\ud83d\udcd6 \u6539\u8fdb\u6587\u6863 - \u5e2e\u52a9\u6211\u4eec\u7684\u6587\u6863\u66f4\u6e05\u6670\u3001\u66f4\u5168\u9762</li> <li>\ud83d\udd27 \u63d0\u4ea4\u4ee3\u7801 - \u4fee\u590d\u9519\u8bef\u6216\u5b9e\u73b0\u65b0\u529f\u80fd</li> <li>\ud83e\uddea \u7f16\u5199\u6d4b\u8bd5 - \u5e2e\u52a9\u63d0\u9ad8\u6211\u4eec\u7684\u6d4b\u8bd5\u8986\u76d6\u7387</li> <li>\ud83c\udf10 \u7ffb\u8bd1 - \u5e2e\u52a9\u9879\u76ee\u652f\u6301\u66f4\u591a\u8bed\u8a00</li> </ul>"},{"location":"zh/CONTRIBUTING/#_3","title":"\ud83d\udee0\ufe0f \u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":""},{"location":"zh/CONTRIBUTING/#_4","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.8 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>uv\uff08\u63a8\u8350\uff09\u6216 pip</li> <li>Git</li> </ul>"},{"location":"zh/CONTRIBUTING/#_5","title":"\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883","text":"<ol> <li> <p>Fork \u5e76\u514b\u9686\u4ed3\u5e93:    <pre><code>git clone https://github.com/your-username/Hypergraph-DB.git\ncd Hypergraph-DB\n</code></pre></p> </li> <li> <p>\u5b89\u88c5\u4f9d\u8d56:    <pre><code># \u4f7f\u7528 uv\uff08\u63a8\u8350\uff09\nuv sync\n\n# \u6216\u4f7f\u7528 pip\npip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>\u8fd0\u884c\u6d4b\u8bd5\u786e\u4fdd\u4e00\u5207\u6b63\u5e38:    <pre><code># \u4f7f\u7528 uv\nuv run pytest\n\n# \u6216\u4f7f\u7528 pip\npytest\n</code></pre></p> </li> <li> <p>\u8bbe\u7f6e pre-commit \u94a9\u5b50\uff08\u53ef\u9009\u4f46\u63a8\u8350\uff09:    <pre><code>uv run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"zh/CONTRIBUTING/#_6","title":"\ud83d\udce4 \u63d0\u4ea4\u66f4\u6539","text":""},{"location":"zh/CONTRIBUTING/#pull-request","title":"Pull Request \u6d41\u7a0b","text":"<ol> <li> <p>\u4ece <code>main</code> \u521b\u5efa\u65b0\u5206\u652f:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>\u6839\u636e\u6211\u4eec\u7684\u98ce\u683c\u6307\u5357\u8fdb\u884c\u66f4\u6539</p> </li> <li> <p>\u4e3a\u65b0\u529f\u80fd\u6dfb\u52a0\u6d4b\u8bd5</p> </li> <li> <p>\u5982\u9700\u8981\uff0c\u66f4\u65b0\u6587\u6863</p> </li> <li> <p>\u8fd0\u884c\u6d4b\u8bd5\u5e76\u786e\u4fdd\u901a\u8fc7:    <pre><code>uv run pytest\n</code></pre></p> </li> <li> <p>\u8fd0\u884c\u7c7b\u578b\u68c0\u67e5:    <pre><code>uv run mypy hyperdb\n</code></pre></p> </li> <li> <p>\u683c\u5f0f\u5316\u60a8\u7684\u4ee3\u7801:    <pre><code>uv run black hyperdb tests\nuv run isort hyperdb tests\n</code></pre></p> </li> <li> <p>\u63d0\u4ea4\u66f4\u6539\u5e76\u4f7f\u7528\u6e05\u6670\u7684\u6d88\u606f:    <pre><code>git commit -m \"feat: \u6dfb\u52a0\u65b0\u7684\u8d85\u56fe\u7b97\u6cd5\"\n</code></pre></p> </li> <li> <p>\u63a8\u9001\u60a8\u7684\u5206\u652f:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>\u5728 GitHub \u4e0a\u521b\u5efa Pull Request</p> </li> </ol>"},{"location":"zh/CONTRIBUTING/#_7","title":"\u63d0\u4ea4\u6d88\u606f\u6307\u5357","text":"<p>\u6211\u4eec\u9075\u5faa\u7ea6\u5b9a\u5f0f\u63d0\u4ea4\u89c4\u8303\uff1a</p> <ul> <li><code>feat:</code> - \u65b0\u529f\u80fd</li> <li><code>fix:</code> - \u9519\u8bef\u4fee\u590d</li> <li><code>docs:</code> - \u4ec5\u6587\u6863\u66f4\u6539</li> <li><code>style:</code> - \u4e0d\u5f71\u54cd\u4ee3\u7801\u542b\u4e49\u7684\u66f4\u6539</li> <li><code>refactor:</code> - \u65e2\u4e0d\u4fee\u590d\u9519\u8bef\u4e5f\u4e0d\u6dfb\u52a0\u529f\u80fd\u7684\u4ee3\u7801\u66f4\u6539</li> <li><code>test:</code> - \u6dfb\u52a0\u7f3a\u5931\u6d4b\u8bd5\u6216\u4fee\u6b63\u73b0\u6709\u6d4b\u8bd5</li> <li><code>chore:</code> - \u6784\u5efa\u8fc7\u7a0b\u6216\u8f85\u52a9\u5de5\u5177\u7684\u66f4\u6539</li> </ul>"},{"location":"zh/CONTRIBUTING/#_8","title":"\ud83d\udc1b \u62a5\u544a\u95ee\u9898","text":"<p>\u62a5\u544a\u95ee\u9898\u65f6\uff0c\u8bf7\u5305\u542b\uff1a</p> <ol> <li>\u9519\u8bef\u63cf\u8ff0: \u6e05\u695a\u63cf\u8ff0\u95ee\u9898</li> <li>\u73af\u5883: Python \u7248\u672c\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5305\u7248\u672c</li> <li>\u91cd\u73b0\u6b65\u9aa4: \u80fd\u91cd\u73b0\u95ee\u9898\u7684\u6700\u5c0f\u4ee3\u7801\u793a\u4f8b</li> <li>\u671f\u671b\u884c\u4e3a: \u60a8\u671f\u671b\u53d1\u751f\u4ec0\u4e48</li> <li>\u5b9e\u9645\u884c\u4e3a: \u5b9e\u9645\u53d1\u751f\u4e86\u4ec0\u4e48</li> <li>\u5806\u6808\u8ddf\u8e2a: \u5982\u679c\u9002\u7528\uff0c\u5305\u542b\u5b8c\u6574\u7684\u9519\u8bef\u6d88\u606f</li> </ol> <p>\u8bf7\u5728\u62a5\u544a\u95ee\u9898\u65f6\u63d0\u4f9b\u5c3d\u53ef\u80fd\u8be6\u7ec6\u7684\u4fe1\u606f\u3002</p>"},{"location":"zh/CONTRIBUTING/#_9","title":"\ud83d\udcd6 \u6587\u6863","text":"<p>\u6211\u4eec\u4f7f\u7528 MkDocs \u548c Material \u4e3b\u9898\u6765\u7f16\u5199\u6587\u6863\uff1a</p>"},{"location":"zh/CONTRIBUTING/#_10","title":"\u672c\u5730\u6784\u5efa\u6587\u6863","text":"<pre><code># \u5b89\u88c5\u6587\u6863\u4f9d\u8d56\nuv sync --extra docs\n\n# \u672c\u5730\u670d\u52a1\u6587\u6863\nuv run mkdocs serve\n\n# \u6784\u5efa\u6587\u6863\nuv run mkdocs build\n</code></pre>"},{"location":"zh/CONTRIBUTING/#_11","title":"\u6587\u6863\u6307\u5357","text":"<ul> <li>\u7f16\u5199\u6e05\u6670\u3001\u7b80\u6d01\u7684\u8bf4\u660e</li> <li>\u4e3a\u65b0\u529f\u80fd\u5305\u542b\u4ee3\u7801\u793a\u4f8b</li> <li>\u5c3d\u53ef\u80fd\u540c\u65f6\u66f4\u65b0\u4e2d\u82f1\u6587\u7248\u672c</li> <li>\u4f7f\u7528\u6b63\u786e\u7684 Markdown \u683c\u5f0f</li> <li>\u5728\u6709\u5e2e\u52a9\u65f6\u6dfb\u52a0\u56fe\u8868\u6216\u56fe\u50cf</li> </ul>"},{"location":"zh/CONTRIBUTING/#_12","title":"\ud83e\uddea \u6d4b\u8bd5","text":""},{"location":"zh/CONTRIBUTING/#_13","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\nuv run pytest\n\n# \u8fd0\u884c\u5e26\u8986\u76d6\u7387\u7684\u6d4b\u8bd5\nuv run pytest --cov=hyperdb\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\u6587\u4ef6\nuv run pytest tests/test_hypergraph.py\n\n# \u8fd0\u884c\u5339\u914d\u6a21\u5f0f\u7684\u6d4b\u8bd5\nuv run pytest -k \"test_add_vertex\"\n</code></pre>"},{"location":"zh/CONTRIBUTING/#_14","title":"\u7f16\u5199\u6d4b\u8bd5","text":"<ul> <li>\u4e3a\u6240\u6709\u65b0\u529f\u80fd\u7f16\u5199\u6d4b\u8bd5</li> <li>\u4f7f\u7528\u63cf\u8ff0\u6027\u6d4b\u8bd5\u540d\u79f0</li> <li>\u9075\u5faa\u73b0\u6709\u6d4b\u8bd5\u7ed3\u6784</li> <li>\u5305\u542b\u8fb9\u754c\u60c5\u51b5\u548c\u9519\u8bef\u6761\u4ef6</li> <li>\u529b\u6c42\u9ad8\u6d4b\u8bd5\u8986\u76d6\u7387</li> </ul>"},{"location":"zh/CONTRIBUTING/#_15","title":"\u6d4b\u8bd5\u7ed3\u6784","text":"<pre><code>def test_feature_name():\n    \"\"\"\u6d4b\u8bd5\u63cf\u8ff0\u3002\"\"\"\n    # \u51c6\u5907\n    hg = HypergraphDB()\n\n    # \u6267\u884c\n    result = hg.some_method()\n\n    # \u65ad\u8a00\n    assert result == expected_value\n</code></pre>"},{"location":"zh/CONTRIBUTING/#_16","title":"\ud83d\udcdd \u4ee3\u7801\u98ce\u683c\u6307\u5357","text":""},{"location":"zh/CONTRIBUTING/#python","title":"Python \u4ee3\u7801\u98ce\u683c","text":"<p>\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u5de5\u5177\u6765\u7ef4\u62a4\u4ee3\u7801\u8d28\u91cf\uff1a</p> <ul> <li>Black - \u4ee3\u7801\u683c\u5f0f\u5316</li> <li>isort - \u5bfc\u5165\u6392\u5e8f</li> <li>mypy - \u7c7b\u578b\u68c0\u67e5</li> <li>flake8 - \u4ee3\u7801\u68c0\u67e5</li> </ul>"},{"location":"zh/CONTRIBUTING/#_17","title":"\u4ee3\u7801\u6307\u5357","text":"<ol> <li>\u7c7b\u578b\u63d0\u793a: \u4e3a\u6240\u6709\u516c\u5171 API \u4f7f\u7528\u7c7b\u578b\u63d0\u793a</li> <li>\u6587\u6863\u5b57\u7b26\u4e32: \u9075\u5faa NumPy \u6587\u6863\u5b57\u7b26\u4e32\u98ce\u683c</li> <li>\u53d8\u91cf\u540d: \u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u79f0\uff08<code>vertex_id</code> \u800c\u4e0d\u662f <code>vid</code>\uff09</li> <li>\u51fd\u6570\u540d: \u51fd\u6570\u4f7f\u7528\u52a8\u8bcd\uff08<code>add_vertex</code> \u800c\u4e0d\u662f <code>vertex_add</code>\uff09</li> <li>\u7c7b\u540d: \u4f7f\u7528 PascalCase\uff08<code>HypergraphDB</code>\uff09</li> <li>\u5e38\u91cf: \u4f7f\u7528 UPPER_SNAKE_CASE\uff08<code>MAX_VERTICES</code>\uff09</li> </ol>"},{"location":"zh/CONTRIBUTING/#_18","title":"\u6587\u6863\u5b57\u7b26\u4e32\u793a\u4f8b","text":"<pre><code>def add_vertex(self, vertex_id: Hashable, attributes: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"\u5411\u8d85\u56fe\u6dfb\u52a0\u9876\u70b9\u3002\n\n    Parameters\n    ----------\n    vertex_id : Hashable\n        \u9876\u70b9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n    attributes : dict, optional\n        \u9876\u70b9\u5c5e\u6027\u5b57\u5178\uff0c\u9ed8\u8ba4\u4e3a None\u3002\n\n    Raises\n    ------\n    ValueError\n        \u5982\u679c vertex_id \u5df2\u5728\u8d85\u56fe\u4e2d\u5b58\u5728\u3002\n\n    Examples\n    --------\n    &gt;&gt;&gt; hg = HypergraphDB()\n    &gt;&gt;&gt; hg.add_vertex(1, {\"name\": \"Alice\", \"age\": 30})\n    \"\"\"\n</code></pre>"},{"location":"zh/CONTRIBUTING/#_19","title":"\ud83c\udff7\ufe0f \u53d1\u5e03\u6d41\u7a0b","text":"<p>\u53d1\u5e03\u7531\u7ef4\u62a4\u8005\u5904\u7406\uff0c\u9075\u5faa\u8bed\u4e49\u7248\u672c\u63a7\u5236\uff1a</p> <ul> <li>\u4e3b\u7248\u672c (X.0.0): \u7834\u574f\u6027\u66f4\u6539</li> <li>\u6b21\u7248\u672c (0.X.0): \u65b0\u529f\u80fd\uff0c\u5411\u540e\u517c\u5bb9</li> <li>\u8865\u4e01\u7248\u672c (0.0.X): \u9519\u8bef\u4fee\u590d\uff0c\u5411\u540e\u517c\u5bb9</li> </ul>"},{"location":"zh/CONTRIBUTING/#_20","title":"\ud83d\ude4b \u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u679c\u60a8\u9700\u8981\u5e2e\u52a9\u6216\u6709\u7591\u95ee\uff1a</p> <ol> <li>\u67e5\u770b\u6587\u6863</li> <li>\u641c\u7d22\u73b0\u6709\u95ee\u9898</li> <li>\u521b\u5efa\u65b0\u8ba8\u8bba</li> <li>\u52a0\u5165\u6211\u4eec\u7684\u793e\u533a\u9891\u9053\uff08\u5982\u679c\u53ef\u7528\uff09</li> </ol>"},{"location":"zh/CONTRIBUTING/#_21","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>\u901a\u8fc7\u4e3a Hypergraph-DB \u505a\u8d21\u732e\uff0c\u60a8\u540c\u610f\u60a8\u7684\u8d21\u732e\u5c06\u5728 Apache License 2.0 \u4e0b\u83b7\u5f97\u8bb8\u53ef\u3002</p> <p>\u611f\u8c22\u60a8\u4e3a Hypergraph-DB \u505a\u8d21\u732e\uff01\ud83d\ude80</p>"},{"location":"zh/about/changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>Hypergraph-DB \u9879\u76ee\u7684\u6240\u6709\u91cd\u8981\u53d8\u66f4\u90fd\u8bb0\u5f55\u5728\u6b64\u6587\u4ef6\u4e2d\u3002</p> <p>\u683c\u5f0f\u57fa\u4e8e Keep a Changelog\uff0c \u5e76\u4e14\u672c\u9879\u76ee\u9075\u5faa \u8bed\u4e49\u5316\u7248\u672c\u63a7\u5236\u3002</p>"},{"location":"zh/about/changelog/#020-2025-09-09","title":"[0.2.0] - 2025-09-09","text":""},{"location":"zh/about/changelog/#_2","title":"\u65b0\u589e","text":"<ul> <li>\ud83d\udcd6 \u6dfb\u52a0\u4e2d\u6587\u6587\u6863\u652f\u6301</li> <li>\ud83c\udf10 \u56fd\u9645\u5316 (i18n) \u914d\u7f6e</li> <li>\ud83d\udcda \u66f4\u5b8c\u6574\u7684 API \u6587\u6863</li> <li>\ud83c\udfa8 \u6539\u8fdb\u7684\u53ef\u89c6\u5316\u754c\u9762</li> <li>\u4ece Sphinx \u8fc1\u79fb\u5230 MkDocs \u6587\u6863\u7cfb\u7edf</li> <li>\u9ad8\u7ea7\u4f7f\u7528\u6a21\u5f0f\u548c\u6559\u7a0b</li> </ul>"},{"location":"zh/about/changelog/#_3","title":"\u6539\u8fdb","text":"<ul> <li>\ud83d\udd27 \u66f4\u597d\u7684\u9519\u8bef\u5904\u7406</li> <li>\u26a1 \u6027\u80fd\u4f18\u5316</li> <li>\ud83d\udcdd \u66f4\u8be6\u7ec6\u7684\u4ee3\u7801\u793a\u4f8b</li> <li>\ud83e\uddea \u589e\u5f3a\u7684\u6d4b\u8bd5\u8986\u76d6</li> <li>\u66f4\u65b0\u9879\u76ee\u7ed3\u6784\u4ee5\u9002\u5e94\u73b0\u4ee3 Python \u5f00\u53d1</li> <li>\u4ece Poetry \u8fc1\u79fb\u5230 uv \u8fdb\u884c\u4f9d\u8d56\u7ba1\u7406</li> <li>\u901a\u8fc7\u81ea\u52a8\u5316\u811a\u672c\u589e\u5f3a\u5f00\u53d1\u5de5\u4f5c\u6d41</li> </ul>"},{"location":"zh/about/changelog/#_4","title":"\u4fee\u590d","text":"<ul> <li>\ud83d\udc1b \u4fee\u590d\u53ef\u89c6\u5316\u6e32\u67d3\u95ee\u9898</li> <li>\ud83d\udcd6 \u6587\u6863\u4e0e\u4ee3\u7801\u4e00\u81f4\u6027\u4fee\u590d</li> <li>\ud83d\udd17 \u4fee\u590d\u5185\u90e8\u94fe\u63a5\u95ee\u9898</li> </ul>"},{"location":"zh/about/changelog/#012-2024-12-22","title":"[0.1.2] - 2024-12-22","text":""},{"location":"zh/about/changelog/#_5","title":"\u4fee\u590d","text":"<ul> <li>\ud83d\udc1b \u4fee\u590d <code>remove_e()</code> \u51fd\u6570\u7684\u9519\u8bef</li> <li>\ud83d\udcd6 \u66f4\u65b0 README \u6587\u6863</li> </ul>"},{"location":"zh/about/changelog/#011-2024-12-16","title":"[0.1.1] - 2024-12-16","text":""},{"location":"zh/about/changelog/#_6","title":"\u65b0\u589e","text":"<ul> <li>\ud83e\uddea \u66f4\u5168\u9762\u7684\u6d4b\u8bd5\u5957\u4ef6</li> <li>\ud83d\udcca \u4e13\u7528\u538b\u529b\u6d4b\u8bd5\u4ee5\u786e\u4fdd\u7cfb\u7edf\u7a33\u5b9a\u6027\u548c\u6027\u80fd</li> </ul>"},{"location":"zh/about/changelog/#_7","title":"\u6539\u8fdb","text":"<ul> <li>\u26a1 \u91cd\u5927\u6027\u80fd\u63d0\u5347: \u8d85\u56fe\u6784\u5efa\u548c\u67e5\u8be2\u901f\u5ea6\u63d0\u5347100\u500d</li> <li>\u6784\u5efa\u5305\u542b10,000\u4e2a\u8282\u70b9\u7684\u8d85\u56fe\u5e76\u6267\u884c40,000\u6b21\u9876\u70b9\u548c\u8d85\u8fb9\u67e5\u8be2</li> <li>v0.1.0\u8017\u65f690\u79d2\uff0cv0.1.1\u4ec5\u97000.05\u79d2</li> <li>\u6539\u8fdb\u7684 API \u8bbe\u8ba1\u548c\u4e00\u81f4\u6027</li> <li>\u66f4\u597d\u7684\u6587\u6863\u548c\u793a\u4f8b</li> </ul>"},{"location":"zh/about/changelog/#010-2024-12-16","title":"[0.1.0] - 2024-12-16","text":""},{"location":"zh/about/changelog/#_8","title":"\u65b0\u589e","text":"<ul> <li>\ud83c\udf89 Hypergraph-DB \u9996\u6b21\u53d1\u5e03</li> <li>\ud83d\udcca \u57fa\u7840\u8d85\u56fe\u6570\u636e\u7ed3\u6784\u5b9e\u73b0</li> <li>\ud83c\udfa8 Web \u53ef\u89c6\u5316\u754c\u9762</li> <li>\ud83d\udcd6 \u57fa\u7840\u6587\u6863\u548c API \u53c2\u8003</li> <li>\ud83e\uddea \u57fa\u7840\u6d4b\u8bd5\u5957\u4ef6</li> </ul>"},{"location":"zh/about/changelog/#_9","title":"\u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\ud83c\udfd7\ufe0f <code>Hypergraph</code> \u6838\u5fc3\u7c7b</li> <li>\ud83d\udd17 \u8d85\u8fb9\uff08hyperedge\uff09\u64cd\u4f5c</li> <li>\ud83d\udcca \u8d85\u70b9\uff08hypervertex\uff09\u64cd\u4f5c</li> <li>\ud83d\udcc8 \u57fa\u7840\u56fe\u7b97\u6cd5</li> <li>\ud83c\udfaf \u90bb\u5c45\u67e5\u8be2\u529f\u80fd</li> </ul>"},{"location":"zh/about/changelog/#_10","title":"\u53ef\u89c6\u5316\u529f\u80fd","text":"<ul> <li>\ud83c\udf10 Web \u754c\u9762\u8d85\u56fe\u53ef\u89c6\u5316</li> <li>\ud83c\udfa8 \u4ea4\u4e92\u5f0f\u8d85\u56fe\u5c55\u793a</li> <li>\ud83d\udcf1 \u54cd\u5e94\u5f0f\u8bbe\u8ba1</li> <li>\ud83c\udf9b\ufe0f \u53ef\u5b9a\u5236\u7684\u89c6\u89c9\u6837\u5f0f</li> </ul>"},{"location":"zh/about/changelog/#api","title":"API \u529f\u80fd","text":"<ul> <li>\u2795 <code>add_hyperedge()</code> - \u6dfb\u52a0\u8d85\u8fb9</li> <li>\u2795 <code>add_hypervertex()</code> - \u6dfb\u52a0\u8d85\u70b9</li> <li>\ud83d\uddd1\ufe0f <code>remove_hyperedge()</code> - \u5220\u9664\u8d85\u8fb9</li> <li>\ud83d\uddd1\ufe0f <code>remove_hypervertex()</code> - \u5220\u9664\u8d85\u70b9</li> <li>\ud83d\udcca <code>degree_v()</code> - \u8ba1\u7b97\u8d85\u70b9\u5ea6\u6570</li> <li>\ud83d\udcca <code>degree_e()</code> - \u8ba1\u7b97\u8d85\u8fb9\u5ea6\u6570</li> <li>\ud83d\udd0d <code>nbr_v_of_e()</code> - \u67e5\u8be2\u8d85\u8fb9\u7684\u90bb\u63a5\u8d85\u70b9</li> <li>\ud83d\udd0d <code>nbr_e_of_v()</code> - \u67e5\u8be2\u8d85\u70b9\u7684\u90bb\u63a5\u8d85\u8fb9</li> <li>\ud83c\udfa8 <code>draw()</code> - \u53ef\u89c6\u5316\u8d85\u56fe</li> </ul>"},{"location":"zh/about/license/","title":"\u8bb8\u53ef\u8bc1","text":"<p>Hypergraph-DB \u9879\u76ee\u91c7\u7528 Apache License 2.0 \u5f00\u6e90\u8bb8\u53ef\u8bc1\u3002</p>"},{"location":"zh/about/license/#apache-license-20","title":"Apache License 2.0","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship covered by this License,\n      whether in Source or Object form, made available under the License,\n      as indicated by a copyright notice that is included in or attached\n      to the work. (Each such work is hereinafter referred to as \"Work\".)\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based upon (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this definition, \"Derivative Works\" shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and derivative works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control\n      systems, and issue tracking systems that are managed by, or on behalf\n      of, the Licensor for the purpose of discussing and improving the Work,\n      but excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to use, reproduce, modify, distribute, prepare\n      Derivative Works of, and publicly display, publicly perform,\n      sublicense, and/or sell copies of the Work, and to permit persons\n      to whom the Work is furnished to do so, subject to the following\n      conditions:\n\n      The above copyright notice and this permission notice shall be\n      included in all copies or substantial portions of the Work.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, trademark, patent,\n          attribution and other notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright notice to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. When redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold harmless each Contributor for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in comments for\n      the particular comment syntax of the programming language, text\n      markup language, or other file type.\n\n      Copyright [yyyy] [name of copyright owner]\n\n      Licensed under the Apache License, Version 2.0 (the \"License\");\n      you may not use this file except in compliance with the License.\n      You may obtain a copy of the License at\n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n      Unless required by applicable law or agreed to in writing, software\n      distributed under the License is distributed on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      See the License for the specific language governing permissions and\n      limitations under the License.\n</code></pre>"},{"location":"zh/about/license/#_2","title":"\u4e2d\u6587\u8bf4\u660e","text":""},{"location":"zh/about/license/#_3","title":"\u8bb8\u53ef\u8bc1\u6982\u8ff0","text":"<p>Apache License 2.0 \u662f\u4e00\u4e2a\u5bbd\u677e\u7684\u5f00\u6e90\u8bb8\u53ef\u8bc1\uff0c\u5141\u8bb8\u60a8\uff1a</p> <ul> <li>\u2705 \u5546\u4e1a\u4f7f\u7528: \u53ef\u7528\u4e8e\u5546\u4e1a\u9879\u76ee</li> <li>\u2705 \u4fee\u6539: \u53ef\u4ee5\u4fee\u6539\u6e90\u4ee3\u7801</li> <li>\u2705 \u5206\u53d1: \u53ef\u4ee5\u5206\u53d1\u539f\u59cb\u6216\u4fee\u6539\u540e\u7684\u7248\u672c</li> <li>\u2705 \u4e13\u5229\u6388\u6743: \u5305\u542b\u660e\u786e\u7684\u4e13\u5229\u6388\u6743\u6761\u6b3e</li> <li>\u2705 \u79c1\u4eba\u4f7f\u7528: \u53ef\u7528\u4e8e\u79c1\u4eba\u9879\u76ee</li> </ul>"},{"location":"zh/about/license/#_4","title":"\u4e49\u52a1\u548c\u9650\u5236","text":"<p>\u4f7f\u7528 Hypergraph-DB \u65f6\uff0c\u60a8\u9700\u8981\uff1a</p> <ul> <li>\ud83d\udccb \u4fdd\u7559\u7248\u6743\u58f0\u660e: \u5728\u4ee3\u7801\u4e2d\u4fdd\u7559\u539f\u59cb\u7248\u6743\u548c\u8bb8\u53ef\u8bc1\u58f0\u660e</li> <li>\ud83d\udccb \u6807\u660e\u53d8\u66f4: \u5982\u679c\u4fee\u6539\u4e86\u6587\u4ef6\uff0c\u9700\u8981\u6ce8\u660e\u53d8\u66f4</li> <li>\ud83d\udccb \u5305\u542b\u8bb8\u53ef\u8bc1: \u5206\u53d1\u65f6\u5fc5\u987b\u5305\u542b Apache License 2.0</li> </ul> <p>\u4e0d\u9700\u8981\uff1a</p> <ul> <li>\u274c \u5f00\u6e90\u884d\u751f\u4f5c\u54c1: \u57fa\u4e8e\u6b64\u9879\u76ee\u7684\u4f5c\u54c1\u4e0d\u9700\u8981\u5f00\u6e90</li> <li>\u274c \u62ab\u9732\u6e90\u4ee3\u7801: \u4e0d\u9700\u8981\u63d0\u4f9b\u4fee\u6539\u540e\u7684\u6e90\u4ee3\u7801</li> <li>\u274c \u76f8\u540c\u8bb8\u53ef\u8bc1: \u884d\u751f\u4f5c\u54c1\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u8bb8\u53ef\u8bc1</li> </ul>"},{"location":"zh/about/license/#_5","title":"\u514d\u8d23\u58f0\u660e","text":"<p>\u8f6f\u4ef6\u6309\"\u539f\u6837\"\u63d0\u4f9b\uff0c\u4e0d\u63d0\u4f9b\u4efb\u4f55\u660e\u793a\u6216\u6697\u793a\u7684\u4fdd\u8bc1\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u9002\u9500\u6027\u4fdd\u8bc1</li> <li>\u7279\u5b9a\u7528\u9014\u9002\u7528\u6027\u4fdd\u8bc1</li> <li>\u975e\u4fb5\u6743\u4fdd\u8bc1</li> </ul>"},{"location":"zh/about/license/#_6","title":"\u7248\u6743\u4fe1\u606f","text":"<pre><code>Copyright 2024 Yifan Feng (iMoonLab)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"zh/about/license/#_7","title":"\u7b2c\u4e09\u65b9\u4f9d\u8d56","text":"<p>Hypergraph-DB \u53ef\u80fd\u5305\u542b\u4ee5\u4e0b\u5f00\u6e90\u7ec4\u4ef6\uff1a</p> <ul> <li>Python \u6807\u51c6\u5e93: Python Software Foundation License</li> <li>\u53ef\u89c6\u5316\u7ec4\u4ef6: \u57fa\u4e8e\u5f00\u6e90 JavaScript \u5e93\uff08\u5982 D3.js\uff09</li> </ul> <p>\u6240\u6709\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u90fd\u9075\u5faa\u5176\u5404\u81ea\u7684\u5f00\u6e90\u8bb8\u53ef\u8bc1\u3002</p>"},{"location":"zh/about/license/#_8","title":"\u8d21\u732e\u8bb8\u53ef","text":"<p>\u901a\u8fc7\u5411\u6b64\u9879\u76ee\u8d21\u732e\u4ee3\u7801\uff0c\u60a8\u540c\u610f\uff1a</p> <ol> <li>\u60a8\u7684\u8d21\u732e\u5c06\u9075\u5faa Apache License 2.0</li> <li>\u60a8\u62e5\u6709\u8d21\u732e\u4ee3\u7801\u7684\u6743\u5229</li> <li>\u60a8\u7684\u8d21\u732e\u4e0d\u4fb5\u72af\u4efb\u4f55\u7b2c\u4e09\u65b9\u7684\u6743\u5229</li> </ol>"},{"location":"zh/about/license/#_9","title":"\u8054\u7cfb\u65b9\u5f0f","text":"<p>\u5982\u6709\u8bb8\u53ef\u8bc1\u76f8\u5173\u95ee\u9898\uff0c\u8bf7\u8054\u7cfb\uff1a</p> <ul> <li>\u9879\u76ee\u7ef4\u62a4\u8005: Yifan Feng</li> <li>\u90ae\u7bb1: evanfeng97@qq.com</li> <li>GitHub: https://github.com/iMoonLab/Hypergraph-DB</li> </ul>"},{"location":"zh/about/license/#_10","title":"\u76f8\u5173\u8d44\u6e90","text":"<ul> <li>Apache Software Foundation: https://www.apache.org/</li> <li>Apache License 2.0 \u5b98\u65b9\u6587\u672c: https://www.apache.org/licenses/LICENSE-2.0</li> <li>\u5f00\u6e90\u8bb8\u53ef\u8bc1\u6bd4\u8f83: https://choosealicense.com/</li> </ul>"},{"location":"zh/api/","title":"API \u53c2\u8003\u6982\u8ff0","text":"<p>Hypergraph-DB \u63d0\u4f9b\u4e86\u7b80\u6d01\u800c\u5f3a\u5927\u7684 API \u6765\u521b\u5efa\u3001\u64cd\u4f5c\u548c\u67e5\u8be2\u8d85\u56fe\u3002\u672c\u8282\u63d0\u4f9b\u6240\u6709\u53ef\u7528\u7c7b\u548c\u65b9\u6cd5\u7684\u5b8c\u6574\u53c2\u8003\u3002</p>"},{"location":"zh/api/#_1","title":"\u6838\u5fc3\u7c7b","text":""},{"location":"zh/api/#hypergraphdb","title":"HypergraphDB","text":"<p>\u4e3b\u8981\u7684\u8d85\u56fe\u6570\u636e\u5e93\u7c7b\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684\u8d85\u56fe\u64cd\u4f5c\u529f\u80fd\u3002</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u65b0\u7684\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u4ece\u6587\u4ef6\u52a0\u8f7d\u73b0\u6709\u8d85\u56fe\nhg = HypergraphDB(\"my_hypergraph.hgdb\")\n</code></pre> <p>\u67e5\u770b\u5b8c\u6574 HypergraphDB API \u2192</p>"},{"location":"zh/api/#basehypergraphdb","title":"BaseHypergraphDB","text":"<p>\u62bd\u8c61\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u8d85\u56fe\u6570\u636e\u5e93\u7684\u6838\u5fc3\u63a5\u53e3\u3002</p> <pre><code>from hyperdb import BaseHypergraphDB\n\n# \u4e3b\u8981\u7528\u4e8e\u7ee7\u627f\u548c\u6269\u5c55\nclass CustomHypergraphDB(BaseHypergraphDB):\n    # \u81ea\u5b9a\u4e49\u5b9e\u73b0\n    pass\n</code></pre> <p>\u67e5\u770b\u5b8c\u6574 BaseHypergraphDB API \u2192</p>"},{"location":"zh/api/#api_1","title":"\u5feb\u901f API \u53c2\u8003","text":""},{"location":"zh/api/#_2","title":"\u57fa\u7840\u64cd\u4f5c","text":"\u65b9\u6cd5 \u63cf\u8ff0 \u793a\u4f8b <code>add_v(id, data)</code> \u6dfb\u52a0\u9876\u70b9 <code>hg.add_v(\"A\", {\"name\": \"Alice\"})</code> <code>add_e(tuple, data)</code> \u6dfb\u52a0\u8d85\u8fb9 <code>hg.add_e((\"A\", \"B\"), {\"type\": \"friend\"})</code> <code>remove_v(id)</code> \u79fb\u9664\u9876\u70b9 <code>hg.remove_v(\"A\")</code> <code>remove_e(tuple)</code> \u79fb\u9664\u8d85\u8fb9 <code>hg.remove_e((\"A\", \"B\"))</code> <code>v(id)</code> \u83b7\u53d6\u9876\u70b9\u6570\u636e <code>data = hg.v(\"A\")</code> <code>e(tuple)</code> \u83b7\u53d6\u8d85\u8fb9\u6570\u636e <code>data = hg.e((\"A\", \"B\"))</code>"},{"location":"zh/api/#_3","title":"\u67e5\u8be2\u64cd\u4f5c","text":"\u65b9\u6cd5 \u63cf\u8ff0 \u793a\u4f8b <code>has_v(id)</code> \u68c0\u67e5\u9876\u70b9\u662f\u5426\u5b58\u5728 <code>hg.has_v(\"A\")</code> <code>has_e(tuple)</code> \u68c0\u67e5\u8d85\u8fb9\u662f\u5426\u5b58\u5728 <code>hg.has_e((\"A\", \"B\"))</code> <code>degree_v(id)</code> \u9876\u70b9\u5ea6\u6570 <code>deg = hg.degree_v(\"A\")</code> <code>degree_e(tuple)</code> \u8d85\u8fb9\u5927\u5c0f <code>size = hg.degree_e((\"A\", \"B\"))</code> <code>nbr_v(id)</code> \u9876\u70b9\u7684\u90bb\u5c45\u9876\u70b9 <code>neighbors = hg.nbr_v(\"A\")</code> <code>nbr_e_of_v(id)</code> \u9876\u70b9\u7684\u90bb\u5c45\u8d85\u8fb9 <code>edges = hg.nbr_e_of_v(\"A\")</code> <code>nbr_v_of_e(tuple)</code> \u8d85\u8fb9\u7684\u90bb\u5c45\u9876\u70b9 <code>vertices = hg.nbr_v_of_e((\"A\", \"B\"))</code>"},{"location":"zh/api/#_4","title":"\u5168\u5c40\u5c5e\u6027","text":"\u5c5e\u6027 \u63cf\u8ff0 \u793a\u4f8b <code>all_v</code> \u6240\u6709\u9876\u70b9 <code>vertices = hg.all_v</code> <code>all_e</code> \u6240\u6709\u8d85\u8fb9 <code>edges = hg.all_e</code> <code>num_v</code> \u9876\u70b9\u6570\u91cf <code>count = hg.num_v</code> <code>num_e</code> \u8d85\u8fb9\u6570\u91cf <code>count = hg.num_e</code>"},{"location":"zh/api/#_5","title":"\u6301\u4e45\u5316\u64cd\u4f5c","text":"\u65b9\u6cd5 \u63cf\u8ff0 \u793a\u4f8b <code>save(path)</code> \u4fdd\u5b58\u5230\u6587\u4ef6 <code>hg.save(\"graph.hgdb\")</code> <code>load(path)</code> \u4ece\u6587\u4ef6\u52a0\u8f7d <code>hg.load(\"graph.hgdb\")</code>"},{"location":"zh/api/#_6","title":"\u53ef\u89c6\u5316","text":"\u65b9\u6cd5 \u63cf\u8ff0 \u793a\u4f8b <code>draw(port, open_browser)</code> \u542f\u52a8\u53ef\u89c6\u5316 <code>hg.draw(port=8080)</code> <p>\u67e5\u770b\u5b8c\u6574\u53ef\u89c6\u5316 API \u2192</p>"},{"location":"zh/api/#_7","title":"\u5e38\u7528\u6a21\u5f0f","text":""},{"location":"zh/api/#_8","title":"\u521b\u5efa\u548c\u586b\u5145\u8d85\u56fe","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6279\u91cf\u6dfb\u52a0\u9876\u70b9\nusers = [\n    (\"user1\", {\"name\": \"\u5f20\u4e09\", \"age\": 25}),\n    (\"user2\", {\"name\": \"\u674e\u56db\", \"age\": 30}),\n    (\"user3\", {\"name\": \"\u738b\u4e94\", \"age\": 28})\n]\n\nfor user_id, user_data in users:\n    hg.add_v(user_id, user_data)\n\n# \u6279\u91cf\u6dfb\u52a0\u8d85\u8fb9\nrelationships = [\n    ((\"user1\", \"user2\"), {\"type\": \"\u670b\u53cb\"}),\n    ((\"user1\", \"user2\", \"user3\"), {\"type\": \"\u9879\u76ee\u56e2\u961f\"})\n]\n\nfor vertices, edge_data in relationships:\n    hg.add_e(vertices, edge_data)\n</code></pre>"},{"location":"zh/api/#_9","title":"\u67e5\u8be2\u548c\u5206\u6790","text":"<pre><code># \u5206\u6790\u8d85\u56fe\u7ed3\u6784\nprint(f\"\u8d85\u56fe\u5305\u542b {hg.num_v} \u4e2a\u9876\u70b9\u548c {hg.num_e} \u6761\u8d85\u8fb9\")\n\n# \u627e\u51fa\u5ea6\u6570\u6700\u9ad8\u7684\u9876\u70b9\nmost_connected = max(hg.all_v, key=lambda v: hg.degree_v(v))\nprint(f\"\u6700\u6d3b\u8dc3\u7684\u7528\u6237: {hg.v(most_connected)['name']}\")\n\n# \u5206\u6790\u8d85\u8fb9\u5927\u5c0f\u5206\u5e03\nedge_sizes = [hg.degree_e(e) for e in hg.all_e]\navg_size = sum(edge_sizes) / len(edge_sizes)\nprint(f\"\u5e73\u5747\u8d85\u8fb9\u5927\u5c0f: {avg_size:.2f}\")\n</code></pre>"},{"location":"zh/api/#_10","title":"\u6570\u636e\u66f4\u65b0","text":"<pre><code># \u66f4\u65b0\u9876\u70b9\u6570\u636e\nhg.update_v(\"user1\", {\"age\": 26, \"location\": \"\u5317\u4eac\"})\n\n# \u66f4\u65b0\u8d85\u8fb9\u6570\u636e\nhg.update_e((\"user1\", \"user2\"), {\"strength\": 0.9})\n\n# \u68c0\u67e5\u66f4\u65b0\u7ed3\u679c\nupdated_user = hg.v(\"user1\")\nupdated_edge = hg.e((\"user1\", \"user2\"))\n</code></pre>"},{"location":"zh/api/#_11","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"zh/api/#_12","title":"\u5e38\u89c1\u5f02\u5e38","text":"<pre><code>try:\n    # \u5c1d\u8bd5\u6dfb\u52a0\u9876\u70b9\n    hg.add_v(\"user1\", {\"name\": \"\u5f20\u4e09\"})\n\n    # \u5c1d\u8bd5\u6dfb\u52a0\u8d85\u8fb9\uff08\u9876\u70b9\u5fc5\u987b\u5df2\u5b58\u5728\uff09\n    hg.add_e((\"user1\", \"user999\"), {\"type\": \"\u670b\u53cb\"})\n\nexcept AssertionError as e:\n    print(f\"\u65ad\u8a00\u9519\u8bef: {e}\")\n\nexcept KeyError as e:\n    print(f\"\u952e\u9519\u8bef: {e}\")\n\nexcept Exception as e:\n    print(f\"\u5176\u4ed6\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"zh/api/#_13","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u9876\u70b9 ID: \u4f7f\u7528\u53ef\u54c8\u5e0c\u7684\u3001\u6709\u610f\u4e49\u7684\u6807\u8bc6\u7b26</li> <li>\u6570\u636e\u9a8c\u8bc1: \u5728\u6dfb\u52a0\u6570\u636e\u524d\u8fdb\u884c\u9a8c\u8bc1</li> <li>\u5f02\u5e38\u5904\u7406: \u9002\u5f53\u5904\u7406\u53ef\u80fd\u7684\u9519\u8bef</li> <li>\u6027\u80fd\u8003\u8651: \u5bf9\u4e8e\u5927\u578b\u6570\u636e\u96c6\uff0c\u8003\u8651\u6279\u91cf\u64cd\u4f5c</li> </ol>"},{"location":"zh/api/#_14","title":"\u7c7b\u578b\u63d0\u793a","text":"<p>Hypergraph-DB \u652f\u6301\u7c7b\u578b\u63d0\u793a\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u5f00\u53d1\u4f53\u9a8c\uff1a</p> <pre><code>from typing import Dict, Any, Tuple, List, Set\nfrom hyperdb import HypergraphDB\n\ndef analyze_hypergraph(hg: HypergraphDB) -&gt; Dict[str, Any]:\n    \"\"\"\u5206\u6790\u8d85\u56fe\u5e76\u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\"\"\"\n    return {\n        \"num_vertices\": hg.num_v,\n        \"num_edges\": hg.num_e,\n        \"avg_degree\": sum(hg.degree_v(v) for v in hg.all_v) / hg.num_v\n    }\n</code></pre>"},{"location":"zh/api/#api_2","title":"\u6269\u5c55 API","text":""},{"location":"zh/api/#_15","title":"\u81ea\u5b9a\u4e49\u5206\u6790\u65b9\u6cd5","text":"<pre><code>from hyperdb import HypergraphDB\n\nclass AnalyticsHypergraphDB(HypergraphDB):\n    \"\"\"\u6269\u5c55\u4e86\u5206\u6790\u529f\u80fd\u7684\u8d85\u56fe\u6570\u636e\u5e93\"\"\"\n\n    def clustering_coefficient(self, vertex_id: str) -&gt; float:\n        \"\"\"\u8ba1\u7b97\u9876\u70b9\u7684\u805a\u7c7b\u7cfb\u6570\"\"\"\n        neighbors = self.nbr_v(vertex_id)\n        if len(neighbors) &lt; 2:\n            return 0.0\n\n        # \u8ba1\u7b97\u90bb\u5c45\u4e4b\u95f4\u7684\u8fde\u63a5\n        connections = 0\n        total_possible = len(neighbors) * (len(neighbors) - 1) // 2\n\n        for edge in self.all_e:\n            edge_vertices = self.nbr_v_of_e(edge)\n            if len(edge_vertices.intersection(neighbors)) &gt;= 2:\n                connections += 1\n\n        return connections / total_possible if total_possible &gt; 0 else 0.0\n\n    def k_core_decomposition(self, k: int) -&gt; Set[str]:\n        \"\"\"k-\u6838\u5206\u89e3\uff1a\u627e\u51fa\u5ea6\u6570\u81f3\u5c11\u4e3ak\u7684\u9876\u70b9\"\"\"\n        return {v for v in self.all_v if self.degree_v(v) &gt;= k}\n</code></pre>"},{"location":"zh/api/#_16","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>HypergraphDB \u8be6\u7ec6 API: \u4e3b\u7c7b\u7684\u5b8c\u6574\u65b9\u6cd5\u6587\u6863</li> <li>BaseHypergraphDB API: \u57fa\u7c7b\u548c\u6269\u5c55\u6307\u5357</li> <li>\u53ef\u89c6\u5316 API: \u53ef\u89c6\u5316\u529f\u80fd\u8be6\u89e3</li> <li>\u793a\u4f8b\u4ee3\u7801: \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b API\uff0c\u60a8\u53ef\u4ee5\u5145\u5206\u5229\u7528 Hypergraph-DB \u7684\u5f3a\u5927\u529f\u80fd\u6765\u5efa\u6a21\u548c\u5206\u6790\u590d\u6742\u7684\u591a\u5143\u5173\u7cfb\uff01\ud83d\ude80</p>"},{"location":"zh/api/base/","title":"BaseHypergraphDB \u7c7b","text":"<p><code>BaseHypergraphDB</code> \u662f\u6240\u6709\u8d85\u56fe\u6570\u636e\u5e93\u7c7b\u7684\u62bd\u8c61\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u8d85\u56fe\u6570\u636e\u5e93\u7684\u6838\u5fc3\u63a5\u53e3\u548c\u884c\u4e3a\u89c4\u8303\u3002</p>"},{"location":"zh/api/base/#_1","title":"\u8be6\u7ec6\u8bf4\u660e","text":"<p><code>BaseHypergraphDB</code> \u662f\u6240\u6709\u8d85\u56fe\u6570\u636e\u5e93\u7c7b\u7684\u62bd\u8c61\u57fa\u7c7b\uff0c\u5b9a\u4e49\u4e86\u8d85\u56fe\u6570\u636e\u5e93\u7684\u6838\u5fc3\u63a5\u53e3\u548c\u884c\u4e3a\u89c4\u8303\u3002</p>"},{"location":"zh/api/base/#_2","title":"\u4e3b\u8981\u7528\u9014","text":"<ul> <li>\u63a5\u53e3\u5b9a\u4e49: \u5b9a\u4e49\u8d85\u56fe\u6570\u636e\u5e93\u7684\u6807\u51c6\u63a5\u53e3</li> <li>\u6269\u5c55\u57fa\u7840: \u4e3a\u81ea\u5b9a\u4e49\u8d85\u56fe\u6570\u636e\u5e93\u5b9e\u73b0\u63d0\u4f9b\u57fa\u7840</li> <li>\u7c7b\u578b\u68c0\u67e5: \u63d0\u4f9b\u7c7b\u578b\u63d0\u793a\u548c\u9a8c\u8bc1</li> </ul>"},{"location":"zh/api/base/#_3","title":"\u6269\u5c55\u793a\u4f8b","text":"<pre><code>from hyperdb import BaseHypergraphDB\nfrom typing import Dict, Any\n\nclass CustomHypergraphDB(BaseHypergraphDB):\n    \"\"\"\u81ea\u5b9a\u4e49\u8d85\u56fe\u6570\u636e\u5e93\u5b9e\u73b0\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self._vertices = {}\n        self._edges = {}\n\n    def add_v(self, v_id: Any, v_data: Dict[str, Any] = None):\n        \"\"\"\u6dfb\u52a0\u9876\u70b9\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0\"\"\"\n        if v_data is None:\n            v_data = {}\n        self._vertices[v_id] = v_data\n        # \u81ea\u5b9a\u4e49\u903b\u8f91...\n\n    def custom_analysis(self):\n        \"\"\"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5206\u6790\u65b9\u6cd5\"\"\"\n        return {\"custom_metric\": len(self._vertices)}\n</code></pre>"},{"location":"zh/api/hypergraph/","title":"HypergraphDB \u7c7b","text":"<p><code>HypergraphDB</code> \u662f Hypergraph-DB \u7684\u6838\u5fc3\u7c7b\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u64cd\u4f5c\u548c\u67e5\u8be2\u8d85\u56fe\u7684\u5b8c\u6574\u529f\u80fd\u3002</p>"},{"location":"zh/api/hypergraph/#_1","title":"\u8be6\u7ec6\u8bf4\u660e","text":"<p><code>HypergraphDB</code> \u662f Hypergraph-DB \u7684\u6838\u5fc3\u7c7b\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u64cd\u4f5c\u548c\u67e5\u8be2\u8d85\u56fe\u7684\u5b8c\u6574\u529f\u80fd\u3002</p>"},{"location":"zh/api/hypergraph/#_2","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li>\u9876\u70b9\u7ba1\u7406: \u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0\u548c\u67e5\u8be2\u9876\u70b9</li> <li>\u8d85\u8fb9\u7ba1\u7406: \u6dfb\u52a0\u3001\u5220\u9664\u3001\u66f4\u65b0\u548c\u67e5\u8be2\u8d85\u8fb9</li> <li>\u90bb\u63a5\u67e5\u8be2: \u67e5\u627e\u9876\u70b9\u548c\u8d85\u8fb9\u7684\u90bb\u5c45\u5173\u7cfb</li> <li>\u6301\u4e45\u5316: \u4fdd\u5b58\u548c\u52a0\u8f7d\u8d85\u56fe\u6570\u636e</li> <li>\u53ef\u89c6\u5316: \u5185\u7f6e\u7684 Web \u53ef\u89c6\u5316\u529f\u80fd</li> </ul>"},{"location":"zh/api/hypergraph/#_3","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u65b0\u7684\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u9876\u70b9\nhg.add_v(\"\u5f20\u4e09\", {\"\u5e74\u9f84\": 25, \"\u804c\u4e1a\": \"\u5de5\u7a0b\u5e08\"})\nhg.add_v(\"\u674e\u56db\", {\"\u5e74\u9f84\": 30, \"\u804c\u4e1a\": \"\u8bbe\u8ba1\u5e08\"})\nhg.add_v(\"\u738b\u4e94\", {\"\u5e74\u9f84\": 28, \"\u804c\u4e1a\": \"\u4ea7\u54c1\u7ecf\u7406\"})\n\n# \u6dfb\u52a0\u8d85\u8fb9\nhg.add_e((\"\u5f20\u4e09\", \"\u674e\u56db\"), {\"\u5173\u7cfb\": \"\u670b\u53cb\"})\nhg.add_e((\"\u5f20\u4e09\", \"\u674e\u56db\", \"\u738b\u4e94\"), {\"\u5173\u7cfb\": \"\u9879\u76ee\u56e2\u961f\"})\n\n# \u67e5\u8be2\u64cd\u4f5c\nprint(f\"\u9876\u70b9\u6570\u91cf: {hg.num_v}\")\nprint(f\"\u8d85\u8fb9\u6570\u91cf: {hg.num_e}\")\nprint(f\"\u5f20\u4e09\u7684\u5ea6\u6570: {hg.degree_v('\u5f20\u4e09')}\")\nprint(f\"\u5f20\u4e09\u7684\u90bb\u5c45: {hg.nbr_v('\u5f20\u4e09')}\")\n\n# \u53ef\u89c6\u5316\nhg.draw()\n</code></pre>"},{"location":"zh/api/visualization/","title":"\u53ef\u89c6\u5316","text":"<p>Hypergraph-DB \u901a\u8fc7\u57fa\u4e8e Web \u7684\u4ea4\u4e92\u5f0f\u663e\u793a\u63d0\u4f9b\u5185\u7f6e\u7684\u53ef\u89c6\u5316\u529f\u80fd\u3002</p>"},{"location":"zh/api/visualization/#hypergraphviewer","title":"HypergraphViewer \u7c7b","text":"<p><code>HypergraphViewer</code> \u7c7b\u63d0\u4f9b\u4e86\u8d85\u56fe\u7684 Web \u53ef\u89c6\u5316\u529f\u80fd\u3002</p>"},{"location":"zh/api/visualization/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u5e76\u586b\u5145\u8d85\u56fe\nhg = HypergraphDB()\nhg.add_v(1, {\"name\": \"Alice\"})\nhg.add_v(2, {\"name\": \"Bob\"})\nhg.add_v(3, {\"name\": \"Charlie\"})\n\nhg.add_e((1, 2), {\"relation\": \"\u670b\u53cb\"})\nhg.add_e((1, 2, 3), {\"relation\": \"\u56e2\u961f\"})\n\n# \u53ef\u89c6\u5316 - \u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\nhg.draw()\n</code></pre>"},{"location":"zh/api/visualization/#_3","title":"\u53ef\u89c6\u5316\u7279\u6027","text":"<ul> <li>\u4ea4\u4e92\u5f0f\u663e\u793a: \u70b9\u51fb\u548c\u62d6\u62fd\u6765\u63a2\u7d22\u8d85\u56fe\u7ed3\u6784</li> <li>\u9876\u70b9\u4fe1\u606f: \u60ac\u505c\u5728\u9876\u70b9\u4e0a\u67e5\u770b\u5176\u5c5e\u6027</li> <li>\u8d85\u8fb9\u53ef\u89c6\u5316: \u591a\u8def\u8fde\u63a5\u7684\u53ef\u89c6\u5316\u8868\u793a</li> <li>\u57fa\u4e8e Web: \u5728\u60a8\u7684\u9ed8\u8ba4\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c</li> <li>\u5b9e\u65f6\u66f4\u65b0: \u53cd\u6620\u5f53\u524d\u8d85\u56fe\u72b6\u6001</li> </ul>"},{"location":"zh/api/visualization/#_4","title":"\u81ea\u5b9a\u4e49","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u4f4d\u4e8e\u4ee5\u4e0b\u4f4d\u7f6e\u7684 HTML \u6a21\u677f\u6765\u81ea\u5b9a\u4e49\u53ef\u89c6\u5316\uff1a <pre><code>hyperdb/templates/hypergraph_viewer.html\n</code></pre></p>"},{"location":"zh/api/visualization/#_5","title":"\u53ef\u7528\u9009\u9879","text":"<p>\u8c03\u7528 <code>draw()</code> \u65f6\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\uff1a</p> <ul> <li><code>port</code>: Web \u670d\u52a1\u5668\u7684\u7aef\u53e3\u53f7\uff08\u9ed8\u8ba4\uff1a8080\uff09</li> <li><code>open_browser</code>: \u662f\u5426\u81ea\u52a8\u6253\u5f00\u6d4f\u89c8\u5668\uff08\u9ed8\u8ba4\uff1aTrue\uff09</li> </ul> <pre><code># \u4f7f\u7528\u81ea\u5b9a\u4e49\u7aef\u53e3\nhg.draw(port=9000)\n\n# \u4e0d\u81ea\u52a8\u6253\u5f00\u6d4f\u89c8\u5668\nhg.draw(open_browser=False)\n</code></pre>"},{"location":"zh/api/visualization/#_6","title":"\u6280\u672f\u7ec6\u8282","text":"<p>\u53ef\u89c6\u5316\u7cfb\u7edf\uff1a</p> <ol> <li>**\u8f6c\u6362**\u8d85\u56fe\u6570\u636e\u4e3a JSON \u683c\u5f0f</li> <li>**\u751f\u6210**\u5d4c\u5165\u6570\u636e\u548c D3.js \u53ef\u89c6\u5316\u7684 HTML</li> <li>**\u542f\u52a8**\u672c\u5730 Web \u670d\u52a1\u5668</li> <li>**\u6253\u5f00**\u9ed8\u8ba4\u6d4f\u89c8\u5668\u4e2d\u7684\u53ef\u89c6\u5316</li> </ol> <p>\u53ef\u89c6\u5316\u4f7f\u7528\uff1a - D3.js \u8fdb\u884c\u4ea4\u4e92\u5f0f\u56fe\u5f62 - \u672c\u5730 HTTP \u670d\u52a1\u5668 \u63d0\u4f9b\u5185\u5bb9\u670d\u52a1 - JSON \u6570\u636e\u5d4c\u5165 \u5b9e\u73b0\u9ad8\u6548\u6570\u636e\u4f20\u8f93</p>"},{"location":"zh/api/visualization/#_7","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/api/visualization/#_8","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>\u7aef\u53e3\u5df2\u88ab\u4f7f\u7528\uff1a <pre><code># \u5c1d\u8bd5\u4e0d\u540c\u7684\u7aef\u53e3\nhg.draw(port=8081)\n</code></pre></p> <p>\u6d4f\u89c8\u5668\u672a\u6253\u5f00\uff1a - \u624b\u52a8\u5bfc\u822a\u5230 <code>http://localhost:8080</code>\uff08\u6216\u60a8\u6307\u5b9a\u7684\u7aef\u53e3\uff09 - \u68c0\u67e5\u9632\u706b\u5899\u8bbe\u7f6e</p> <p>\u53ef\u89c6\u5316\u663e\u793a\u4e3a\u7a7a\uff1a - \u786e\u4fdd\u60a8\u7684\u8d85\u56fe\u6709\u9876\u70b9\u548c\u8fb9 - \u68c0\u67e5\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\u4e2d\u7684 JavaScript \u9519\u8bef</p>"},{"location":"zh/api/visualization/#_9","title":"\u6027\u80fd\u8003\u8651","text":"<ul> <li>\u5927\u578b\u8d85\u56fe\uff08&gt;1000\u4e2a\u9876\u70b9\uff09\u53ef\u80fd\u6e32\u67d3\u7f13\u6162</li> <li>\u5bf9\u4e8e\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\uff0c\u8003\u8651\u8fc7\u6ee4\u6216\u91c7\u6837</li> <li>\u53ef\u89c6\u5316\u4f1a\u5c06\u6240\u6709\u6570\u636e\u52a0\u8f7d\u5230\u6d4f\u89c8\u5668\u5185\u5b58\u4e2d</li> </ul>"},{"location":"zh/api/visualization/#_10","title":"\u672a\u6765\u589e\u5f3a","text":"<p>\u8ba1\u5212\u4e2d\u7684\u6539\u8fdb\u5305\u62ec\uff1a</p> <ul> <li>\u5bfc\u51fa\u529f\u80fd\uff08PNG\u3001SVG\u3001PDF\uff09</li> <li>\u5e03\u5c40\u7b97\u6cd5 \u5b9e\u73b0\u66f4\u597d\u7684\u53ef\u89c6\u5316</li> <li>\u8fc7\u6ee4\u9009\u9879 \u7528\u4e8e\u5927\u578b\u56fe</li> <li>\u81ea\u5b9a\u4e49\u6837\u5f0f \u548c\u4e3b\u9898</li> <li>\u4ea4\u4e92\u5f0f\u7f16\u8f91 \u529f\u80fd</li> </ul>"},{"location":"zh/examples/advanced/","title":"\u9ad8\u7ea7\u793a\u4f8b","text":"<p>\u672c\u9875\u5c55\u793a\u4e86 Hypergraph-DB \u7684\u9ad8\u7ea7\u4f7f\u7528\u6a21\u5f0f\u548c\u590d\u6742\u5e94\u7528\u3002</p>"},{"location":"zh/examples/advanced/#1","title":"\u9ad8\u7ea7\u6a21\u5f0f 1\uff1a\u65f6\u6001\u8d85\u56fe","text":"<p>\u5efa\u6a21\u968f\u65f6\u95f4\u6f14\u5316\u7684\u5173\u7cfb\uff1a</p> <pre><code>from hyperdb import HypergraphDB\nfrom datetime import datetime, timedelta\nimport json\n\nclass TemporalHypergraph(HypergraphDB):\n    \"\"\"\u6269\u5c55\u7684 HypergraphDB\uff0c\u5177\u6709\u65f6\u6001\u529f\u80fd\u3002\"\"\"\n\n    def add_temporal_edge(self, vertices, start_time, end_time=None, **kwargs):\n        \"\"\"\u6dfb\u52a0\u5177\u6709\u65f6\u95f4\u4fe1\u606f\u7684\u8d85\u8fb9\u3002\"\"\"\n        edge_attr = {\n            \"start_time\": start_time.isoformat(),\n            \"end_time\": end_time.isoformat() if end_time else None,\n            \"active\": end_time is None or datetime.now() &lt;= end_time,\n            **kwargs\n        }\n        return self.add_e(vertices, edge_attr)\n\n    def get_active_edges_at_time(self, timestamp):\n        \"\"\"\u83b7\u53d6\u5728\u7279\u5b9a\u65f6\u95f4\u6d3b\u8dc3\u7684\u6240\u6709\u8fb9\u3002\"\"\"\n        active_edges = []\n        for edge_id in self.all_e:\n            edge_data = self.e[edge_id]\n            start = datetime.fromisoformat(edge_data[\"start_time\"])\n            end = datetime.fromisoformat(edge_data[\"end_time\"]) if edge_data[\"end_time\"] else datetime.now()\n\n            if start &lt;= timestamp &lt;= end:\n                active_edges.append(edge_id)\n        return active_edges\n\n    def get_edge_timeline(self, vertex_id):\n        \"\"\"\u83b7\u53d6\u6d89\u53ca\u67d0\u4e2a\u9876\u70b9\u7684\u6240\u6709\u8fb9\u7684\u65f6\u95f4\u7ebf\u3002\"\"\"\n        timeline = []\n        for edge_id in self.N_e(vertex_id):\n            edge_data = self.e[edge_id]\n            timeline.append({\n                \"edge_id\": edge_id,\n                \"vertices\": list(self.N_v_of_e(edge_id)),\n                \"start\": edge_data[\"start_time\"],\n                \"end\": edge_data[\"end_time\"],\n                \"duration_days\": self._calculate_duration(edge_data)\n            })\n        return sorted(timeline, key=lambda x: x[\"start\"])\n\n    def _calculate_duration(self, edge_data):\n        \"\"\"\u8ba1\u7b97\u8fb9\u7684\u6301\u7eed\u65f6\u95f4\uff08\u5929\u6570\uff09\u3002\"\"\"\n        start = datetime.fromisoformat(edge_data[\"start_time\"])\n        end = datetime.fromisoformat(edge_data[\"end_time\"]) if edge_data[\"end_time\"] else datetime.now()\n        return (end - start).days\n\n# \u793a\u4f8b\uff1a\u5b66\u672f\u5408\u4f5c\u7f51\u7edc\u968f\u65f6\u95f4\u6f14\u5316\ntemporal_hg = TemporalHypergraph()\n\n# \u6dfb\u52a0\u7814\u7a76\u4eba\u5458\nresearchers = [\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\"]\nfor researcher in researchers:\n    temporal_hg.add_v(researcher, {\"name\": researcher.title(), \"type\": \"researcher\"})\n\n# \u6dfb\u52a0\u65f6\u6001\u5408\u4f5c\u5173\u7cfb\nbase_date = datetime(2020, 1, 1)\n\n# \u65e9\u671f\u5408\u4f5c\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\"), \n    base_date, \n    base_date + timedelta(days=180),\n    project=\"\u6df1\u5ea6\u5b66\u4e60\u57fa\u7840\",\n    type=\"research\"\n)\n\n# \u6269\u5c55\u5408\u4f5c\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\", \"charlie\"), \n    base_date + timedelta(days=90),\n    base_date + timedelta(days=365),\n    project=\"\u9ad8\u7ea7AI\u7cfb\u7edf\",\n    type=\"research\"\n)\n\n# \u5927\u56e2\u961f\u7ec4\u5efa\ntemporal_hg.add_temporal_edge(\n    (\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\"), \n    base_date + timedelta(days=200),\n    base_date + timedelta(days=500),\n    project=\"AI for Social Good\",\n    type=\"research\",\n    funding=\"NSF Grant\"\n)\n\n# \u6301\u7eed\u5408\u4f5c\ntemporal_hg.add_temporal_edge(\n    (\"charlie\", \"diana\"), \n    base_date + timedelta(days=300),\n    project=\"\u53ef\u6301\u7eedAI\u7814\u7a76\",\n    type=\"research\"\n)\n\nprint(\"\u65f6\u6001\u8d85\u56fe\u793a\u4f8b\u521b\u5efa\u5b8c\u6210\uff01\")\n</code></pre>"},{"location":"zh/examples/advanced/#2","title":"\u9ad8\u7ea7\u6a21\u5f0f 2\uff1a\u591a\u5c42\u8d85\u56fe","text":"<p>\u6784\u5efa\u5177\u6709\u4e0d\u540c\u5173\u7cfb\u5c42\u7684\u590d\u6742\u7f51\u7edc\uff1a</p> <pre><code>class MultilayerHypergraph:\n    \"\"\"\u591a\u5c42\u8d85\u56fe\u5b9e\u73b0\u3002\"\"\"\n\n    def __init__(self):\n        self.layers = {}\n        self.interlayer_edges = []\n\n    def add_layer(self, layer_name, layer_type=\"default\"):\n        \"\"\"\u6dfb\u52a0\u65b0\u7684\u7f51\u7edc\u5c42\u3002\"\"\"\n        self.layers[layer_name] = {\n            \"graph\": HypergraphDB(),\n            \"type\": layer_type,\n            \"properties\": {}\n        }\n\n    def add_vertex_to_layer(self, layer_name, vertex_id, **kwargs):\n        \"\"\"\u5411\u7279\u5b9a\u5c42\u6dfb\u52a0\u9876\u70b9\u3002\"\"\"\n        if layer_name not in self.layers:\n            self.add_layer(layer_name)\n        self.layers[layer_name][\"graph\"].add_v(vertex_id, kwargs)\n\n    def add_edge_to_layer(self, layer_name, vertices, **kwargs):\n        \"\"\"\u5411\u7279\u5b9a\u5c42\u6dfb\u52a0\u8fb9\u3002\"\"\"\n        if layer_name not in self.layers:\n            self.add_layer(layer_name)\n        return self.layers[layer_name][\"graph\"].add_e(vertices, kwargs)\n\n    def add_interlayer_connection(self, vertex_id, layer1, layer2, **kwargs):\n        \"\"\"\u5728\u5c42\u95f4\u6dfb\u52a0\u8fde\u63a5\u3002\"\"\"\n        connection = {\n            \"vertex\": vertex_id,\n            \"layers\": [layer1, layer2],\n            \"properties\": kwargs\n        }\n        self.interlayer_edges.append(connection)\n\n    def get_multilayer_neighbors(self, vertex_id, include_interlayer=True):\n        \"\"\"\u83b7\u53d6\u591a\u5c42\u90bb\u5c45\u3002\"\"\"\n        neighbors = {}\n\n        # \u5c42\u5185\u90bb\u5c45\n        for layer_name, layer_data in self.layers.items():\n            if vertex_id in layer_data[\"graph\"].all_v:\n                layer_neighbors = list(layer_data[\"graph\"].nbr_v(vertex_id))\n                if layer_neighbors:\n                    neighbors[layer_name] = layer_neighbors\n\n        # \u5c42\u95f4\u90bb\u5c45\n        if include_interlayer:\n            interlayer_neighbors = []\n            for connection in self.interlayer_edges:\n                if connection[\"vertex\"] == vertex_id:\n                    interlayer_neighbors.extend(connection[\"layers\"])\n            if interlayer_neighbors:\n                neighbors[\"interlayer\"] = interlayer_neighbors\n\n        return neighbors\n\n# \u793a\u4f8b\uff1a\u793e\u4ea4\u5a92\u4f53\u591a\u5c42\u7f51\u7edc\nmultilayer_net = MultilayerHypergraph()\n\n# \u521b\u5efa\u4e0d\u540c\u7684\u793e\u4ea4\u5c42\nmultilayer_net.add_layer(\"twitter\", \"social_media\")\nmultilayer_net.add_layer(\"linkedin\", \"professional\")\nmultilayer_net.add_layer(\"github\", \"collaboration\")\n\n# \u5728\u4e0d\u540c\u5c42\u6dfb\u52a0\u7528\u6237\nusers = [\"alice\", \"bob\", \"charlie\", \"diana\"]\n\nfor user in users:\n    multilayer_net.add_vertex_to_layer(\"twitter\", user, platform=\"twitter\")\n    multilayer_net.add_vertex_to_layer(\"linkedin\", user, platform=\"linkedin\")\n    multilayer_net.add_vertex_to_layer(\"github\", user, platform=\"github\")\n\n# \u6dfb\u52a0\u5c42\u5185\u8fde\u63a5\n# Twitter \u5173\u6ce8\u5173\u7cfb\nmultilayer_net.add_edge_to_layer(\"twitter\", (\"alice\", \"bob\"), type=\"follow\")\nmultilayer_net.add_edge_to_layer(\"twitter\", (\"bob\", \"charlie\"), type=\"follow\")\n\n# LinkedIn \u804c\u4e1a\u7f51\u7edc\nmultilayer_net.add_edge_to_layer(\"linkedin\", (\"alice\", \"diana\"), type=\"connection\")\nmultilayer_net.add_edge_to_layer(\"linkedin\", (\"bob\", \"diana\"), type=\"connection\")\n\n# GitHub \u534f\u4f5c\nmultilayer_net.add_edge_to_layer(\"github\", (\"alice\", \"bob\", \"charlie\"), type=\"repository\", name=\"ai-project\")\n\n# \u6dfb\u52a0\u5c42\u95f4\u8fde\u63a5\uff08\u540c\u4e00\u7528\u6237\u5728\u4e0d\u540c\u5e73\u53f0\uff09\nfor user in users:\n    multilayer_net.add_interlayer_connection(user, \"twitter\", \"linkedin\")\n    multilayer_net.add_interlayer_connection(user, \"linkedin\", \"github\")\n\nprint(\"\u591a\u5c42\u8d85\u56fe\u793a\u4f8b\u521b\u5efa\u5b8c\u6210\uff01\")\n</code></pre>"},{"location":"zh/examples/advanced/#3","title":"\u9ad8\u7ea7\u6a21\u5f0f 3\uff1a\u52a8\u6001\u56fe\u5206\u6790","text":"<p>\u5206\u6790\u56fe\u7684\u6f14\u5316\u6a21\u5f0f\u548c\u52a8\u6001\u7279\u6027\uff1a</p> <pre><code>class DynamicHypergraphAnalyzer:\n    \"\"\"\u52a8\u6001\u8d85\u56fe\u5206\u6790\u5668\u3002\"\"\"\n\n    def __init__(self):\n        self.snapshots = {}\n        self.metrics_timeline = {}\n\n    def add_snapshot(self, timestamp, hypergraph):\n        \"\"\"\u6dfb\u52a0\u56fe\u7684\u5feb\u7167\u3002\"\"\"\n        self.snapshots[timestamp] = hypergraph.copy() if hasattr(hypergraph, 'copy') else hypergraph\n        self.update_metrics(timestamp, hypergraph)\n\n    def update_metrics(self, timestamp, hg):\n        \"\"\"\u66f4\u65b0\u56fe\u5ea6\u91cf\u6307\u6807\u3002\"\"\"\n        metrics = {\n            \"vertex_count\": len(hg.v_list()),\n            \"edge_count\": len(hg.e_list()),\n            \"density\": self.calculate_density(hg),\n            \"max_degree\": max([hg.degree_v(v) for v in hg.v_list()]) if hg.v_list() else 0,\n            \"avg_degree\": sum([hg.degree_v(v) for v in hg.v_list()]) / len(hg.v_list()) if hg.v_list() else 0\n        }\n        self.metrics_timeline[timestamp] = metrics\n\n    def calculate_density(self, hg):\n        \"\"\"\u8ba1\u7b97\u56fe\u5bc6\u5ea6\u3002\"\"\"\n        vertices = hg.v_list()\n        edges = hg.e_list()\n        if len(vertices) &lt; 2:\n            return 0\n        max_possible_edges = 2 ** len(vertices) - len(vertices) - 1\n        return len(edges) / max_possible_edges if max_possible_edges &gt; 0 else 0\n\n    def detect_growth_patterns(self):\n        \"\"\"\u68c0\u6d4b\u589e\u957f\u6a21\u5f0f\u3002\"\"\"\n        timestamps = sorted(self.metrics_timeline.keys())\n        patterns = {}\n\n        for metric in [\"vertex_count\", \"edge_count\", \"density\"]:\n            values = [self.metrics_timeline[t][metric] for t in timestamps]\n            if len(values) &gt; 1:\n                growth_rates = []\n                for i in range(1, len(values)):\n                    if values[i-1] &gt; 0:\n                        rate = (values[i] - values[i-1]) / values[i-1]\n                        growth_rates.append(rate)\n\n                if growth_rates:\n                    patterns[metric] = {\n                        \"avg_growth_rate\": sum(growth_rates) / len(growth_rates),\n                        \"trend\": \"increasing\" if growth_rates[-1] &gt; 0 else \"decreasing\",\n                        \"volatility\": max(growth_rates) - min(growth_rates)\n                    }\n\n        return patterns\n\n    def find_structural_changes(self):\n        \"\"\"\u5bfb\u627e\u7ed3\u6784\u53d8\u5316\u70b9\u3002\"\"\"\n        timestamps = sorted(self.snapshots.keys())\n        changes = []\n\n        for i in range(1, len(timestamps)):\n            prev_hg = self.snapshots[timestamps[i-1]]\n            curr_hg = self.snapshots[timestamps[i]]\n\n            # \u68c0\u6d4b\u65b0\u589e\u548c\u5220\u9664\u7684\u9876\u70b9\n            prev_vertices = set(prev_hg.v_list())\n            curr_vertices = set(curr_hg.v_list())\n\n            added_vertices = curr_vertices - prev_vertices\n            removed_vertices = prev_vertices - curr_vertices\n\n            if added_vertices or removed_vertices:\n                changes.append({\n                    \"timestamp\": timestamps[i],\n                    \"added_vertices\": len(added_vertices),\n                    \"removed_vertices\": len(removed_vertices),\n                    \"vertex_details\": {\n                        \"added\": list(added_vertices),\n                        \"removed\": list(removed_vertices)\n                    }\n                })\n\n        return changes\n\n# \u793a\u4f8b\uff1a\u79d1\u7814\u5408\u4f5c\u7f51\u7edc\u7684\u52a8\u6001\u5206\u6790\nanalyzer = DynamicHypergraphAnalyzer()\n\n# \u6a21\u62df\u4e00\u5e74\u7684\u7f51\u7edc\u6f14\u5316\nbase_date = datetime(2023, 1, 1)\ncurrent_hg = HypergraphDB()\n\n# \u521d\u59cb\u72b6\u6001\ncurrent_hg.add_v(\"alice\", {\"type\": \"researcher\", \"field\": \"AI\"})\ncurrent_hg.add_v(\"bob\", {\"type\": \"researcher\", \"field\": \"ML\"})\ncurrent_hg.add_e((\"alice\", \"bob\"), {\"type\": \"collaboration\", \"project\": \"initial\"})\n\nanalyzer.add_snapshot(base_date, current_hg)\n\n# \u6a21\u62df\u6708\u5ea6\u53d8\u5316\nfor month in range(1, 13):\n    snapshot_date = base_date + timedelta(days=30*month)\n\n    # \u6dfb\u52a0\u65b0\u7814\u7a76\u8005\uff08\u6982\u7387\u6027\uff09\n    if month % 3 == 0:  # \u6bcf\u4e09\u4e2a\u6708\u6dfb\u52a0\u65b0\u4eba\n        new_researcher = f\"researcher_{month}\"\n        current_hg.add_v(new_researcher, {\n            \"type\": \"researcher\", \n            \"field\": \"interdisciplinary\",\n            \"join_month\": month\n        })\n\n        # \u65b0\u4eba\u4e0e\u73b0\u6709\u7814\u7a76\u8005\u5efa\u7acb\u5408\u4f5c\n        existing_researchers = [v for v in current_hg.v_list() if v != new_researcher]\n        if len(existing_researchers) &gt;= 2:\n            # \u521b\u5efa\u4e09\u65b9\u5408\u4f5c\n            collaboration = existing_researchers[:2] + [new_researcher]\n            current_hg.add_e(collaboration, {\n                \"type\": \"collaboration\",\n                \"project\": f\"project_month_{month}\",\n                \"start_month\": month\n            })\n\n    analyzer.add_snapshot(snapshot_date, current_hg)\n\n# \u5206\u6790\u7ed3\u679c\ngrowth_patterns = analyzer.detect_growth_patterns()\nstructural_changes = analyzer.find_structural_changes()\n\nprint(\"\u7f51\u7edc\u589e\u957f\u6a21\u5f0f\uff1a\")\nfor metric, pattern in growth_patterns.items():\n    print(f\"  {metric}: \u5e73\u5747\u589e\u957f\u7387 {pattern['avg_growth_rate']:.3f}, \u8d8b\u52bf {pattern['trend']}\")\n\nprint(f\"\\n\u68c0\u6d4b\u5230 {len(structural_changes)} \u4e2a\u7ed3\u6784\u53d8\u5316\u70b9\")\n</code></pre>"},{"location":"zh/examples/advanced/#4","title":"\u9ad8\u7ea7\u6a21\u5f0f 4\uff1a\u56fe\u795e\u7ecf\u7f51\u7edc\u96c6\u6210","text":"<p>\u5c06\u8d85\u56fe\u4e0e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7ed3\u5408\uff1a</p> <pre><code>try:\n    import torch\n    import torch.nn as nn\n    import torch.nn.functional as F\n    TORCH_AVAILABLE = True\nexcept ImportError:\n    TORCH_AVAILABLE = False\n    print(\"PyTorch \u672a\u5b89\u88c5\uff0c\u8df3\u8fc7\u795e\u7ecf\u7f51\u7edc\u793a\u4f8b\")\n\nif TORCH_AVAILABLE:\n    class HypergraphGNN(nn.Module):\n        \"\"\"\u8d85\u56fe\u56fe\u795e\u7ecf\u7f51\u7edc\u3002\"\"\"\n\n        def __init__(self, input_dim, hidden_dim, output_dim):\n            super(HypergraphGNN, self).__init__()\n            self.input_dim = input_dim\n            self.hidden_dim = hidden_dim\n            self.output_dim = output_dim\n\n            # \u9876\u70b9\u7279\u5f81\u53d8\u6362\n            self.vertex_transform = nn.Linear(input_dim, hidden_dim)\n\n            # \u8d85\u8fb9\u805a\u5408\n            self.edge_aggregation = nn.Linear(hidden_dim, hidden_dim)\n\n            # \u8f93\u51fa\u5c42\n            self.output_layer = nn.Linear(hidden_dim, output_dim)\n\n            # \u6fc0\u6d3b\u51fd\u6570\n            self.activation = nn.ReLU()\n            self.dropout = nn.Dropout(0.2)\n\n        def forward(self, vertex_features, incidence_matrix):\n            \"\"\"\u524d\u5411\u4f20\u64ad\u3002\n\n            Args:\n                vertex_features: [num_vertices, input_dim]\n                incidence_matrix: [num_vertices, num_edges]\n            \"\"\"\n            # \u9876\u70b9\u7279\u5f81\u53d8\u6362\n            h_vertices = self.activation(self.vertex_transform(vertex_features))\n            h_vertices = self.dropout(h_vertices)\n\n            # \u8d85\u8fb9\u805a\u5408\n            # \u4ece\u9876\u70b9\u5230\u8d85\u8fb9\uff1a\u805a\u5408\u8fde\u63a5\u5230\u6bcf\u4e2a\u8d85\u8fb9\u7684\u9876\u70b9\u7279\u5f81\n            h_edges = torch.matmul(incidence_matrix.t(), h_vertices)  # [num_edges, hidden_dim]\n            h_edges = self.activation(self.edge_aggregation(h_edges))\n\n            # \u4ece\u8d85\u8fb9\u56de\u5230\u9876\u70b9\uff1a\u805a\u5408\u6bcf\u4e2a\u9876\u70b9\u8fde\u63a5\u7684\u8d85\u8fb9\u7279\u5f81\n            h_vertices_updated = torch.matmul(incidence_matrix, h_edges)  # [num_vertices, hidden_dim]\n            h_vertices_updated = self.activation(h_vertices_updated)\n\n            # \u8f93\u51fa\u9884\u6d4b\n            output = self.output_layer(h_vertices_updated)\n            return output\n\n    class HypergraphGNNIntegration:\n        \"\"\"\u8d85\u56fe\u4e0eGNN\u96c6\u6210\u3002\"\"\"\n\n        def __init__(self, hypergraph):\n            self.hg = hypergraph\n            self.model = None\n            self.vertex_to_idx = {}\n            self.edge_to_idx = {}\n\n        def prepare_data(self, vertex_features_dict):\n            \"\"\"\u51c6\u5907\u8bad\u7ec3\u6570\u636e\u3002\"\"\"\n            vertices = list(self.hg.v_list())\n            edges = list(self.hg.e_list())\n\n            # \u521b\u5efa\u7d22\u5f15\u6620\u5c04\n            self.vertex_to_idx = {v: i for i, v in enumerate(vertices)}\n            self.edge_to_idx = {e: i for i, e in enumerate(edges)}\n\n            # \u51c6\u5907\u9876\u70b9\u7279\u5f81\u77e9\u9635\n            vertex_features = []\n            for vertex in vertices:\n                if vertex in vertex_features_dict:\n                    vertex_features.append(vertex_features_dict[vertex])\n                else:\n                    # \u9ed8\u8ba4\u7279\u5f81\n                    vertex_features.append([1.0] * len(list(vertex_features_dict.values())[0]))\n\n            vertex_features = torch.FloatTensor(vertex_features)\n\n            # \u51c6\u5907\u90bb\u63a5\u77e9\u9635\uff08\u9876\u70b9-\u8d85\u8fb9\uff09\n            incidence_matrix = torch.zeros(len(vertices), len(edges))\n            for edge_idx, edge_id in enumerate(edges):\n                connected_vertices = self.hg.N_v_of_e(edge_id)\n                for vertex in connected_vertices:\n                    vertex_idx = self.vertex_to_idx[vertex]\n                    incidence_matrix[vertex_idx, edge_idx] = 1.0\n\n            return vertex_features, incidence_matrix\n\n        def train_model(self, vertex_features_dict, labels_dict, epochs=100):\n            \"\"\"\u8bad\u7ec3\u6a21\u578b\u3002\"\"\"\n            vertex_features, incidence_matrix = self.prepare_data(vertex_features_dict)\n\n            # \u51c6\u5907\u6807\u7b7e\n            vertices = list(self.hg.v_list())\n            labels = []\n            for vertex in vertices:\n                if vertex in labels_dict:\n                    labels.append(labels_dict[vertex])\n                else:\n                    labels.append(0)  # \u9ed8\u8ba4\u6807\u7b7e\n            labels = torch.LongTensor(labels)\n\n            # \u521d\u59cb\u5316\u6a21\u578b\n            input_dim = vertex_features.shape[1]\n            hidden_dim = 64\n            output_dim = len(set(labels.tolist()))\n\n            self.model = HypergraphGNN(input_dim, hidden_dim, output_dim)\n            optimizer = torch.optim.Adam(self.model.parameters(), lr=0.01)\n            criterion = nn.CrossEntropyLoss()\n\n            # \u8bad\u7ec3\u5faa\u73af\n            for epoch in range(epochs):\n                optimizer.zero_grad()\n                output = self.model(vertex_features, incidence_matrix)\n                loss = criterion(output, labels)\n                loss.backward()\n                optimizer.step()\n\n                if epoch % 20 == 0:\n                    print(f\"Epoch {epoch}, Loss: {loss.item():.4f}\")\n\n        def predict(self, vertex_features_dict):\n            \"\"\"\u9884\u6d4b\u3002\"\"\"\n            if self.model is None:\n                raise ValueError(\"\u6a21\u578b\u5c1a\u672a\u8bad\u7ec3\")\n\n            vertex_features, incidence_matrix = self.prepare_data(vertex_features_dict)\n\n            with torch.no_grad():\n                output = self.model(vertex_features, incidence_matrix)\n                predictions = F.softmax(output, dim=1)\n\n            return predictions.numpy()\n\n    # \u793a\u4f8b\uff1a\u5b66\u672f\u8bba\u6587\u5206\u7c7b\n    paper_hg = HypergraphDB()\n\n    # \u6dfb\u52a0\u8bba\u6587\uff08\u9876\u70b9\uff09\n    papers = {\n        \"paper1\": {\"title\": \"Deep Learning Survey\", \"venue\": \"Nature\"},\n        \"paper2\": {\"title\": \"Graph Neural Networks\", \"venue\": \"ICML\"},\n        \"paper3\": {\"title\": \"Hypergraph Learning\", \"venue\": \"NIPS\"},\n        \"paper4\": {\"title\": \"Reinforcement Learning\", \"venue\": \"JMLR\"}\n    }\n\n    for paper_id, info in papers.items():\n        paper_hg.add_v(paper_id, info)\n\n    # \u6dfb\u52a0\u5171\u540c\u4f5c\u8005\u5173\u7cfb\uff08\u8d85\u8fb9\uff09\n    paper_hg.add_e((\"paper1\", \"paper2\"), {\"type\": \"shared_author\", \"author\": \"Alice\"})\n    paper_hg.add_e((\"paper2\", \"paper3\"), {\"type\": \"shared_author\", \"author\": \"Bob\"})\n    paper_hg.add_e((\"paper1\", \"paper3\", \"paper4\"), {\"type\": \"shared_topic\", \"topic\": \"AI\"})\n\n    # \u51c6\u5907\u7279\u5f81\uff08\u8fd9\u91cc\u4f7f\u7528\u7b80\u5316\u7684\u7279\u5f81\uff09\n    paper_features = {\n        \"paper1\": [1.0, 0.8, 0.3],  # [\u6280\u672f\u6027, \u5f71\u54cd\u56e0\u5b50, \u65b0\u9896\u6027]\n        \"paper2\": [0.9, 0.7, 0.8],\n        \"paper3\": [0.8, 0.6, 0.9],\n        \"paper4\": [0.7, 0.9, 0.4]\n    }\n\n    # \u51c6\u5907\u6807\u7b7e\uff08\u8bba\u6587\u7c7b\u522b\uff09\n    paper_labels = {\n        \"paper1\": 0,  # \u7efc\u8ff0\n        \"paper2\": 1,  # \u65b9\u6cd5\n        \"paper3\": 1,  # \u65b9\u6cd5\n        \"paper4\": 1   # \u65b9\u6cd5\n    }\n\n    # \u8bad\u7ec3\u6a21\u578b\n    gnn_integration = HypergraphGNNIntegration(paper_hg)\n    gnn_integration.train_model(paper_features, paper_labels, epochs=50)\n\n    # \u9884\u6d4b\n    predictions = gnn_integration.predict(paper_features)\n    print(\"\u8bba\u6587\u5206\u7c7b\u9884\u6d4b\u7ed3\u679c\uff1a\")\n    for i, paper_id in enumerate(papers.keys()):\n        pred_class = predictions[i].argmax()\n        confidence = predictions[i].max()\n        print(f\"  {paper_id}: \u7c7b\u522b {pred_class} (\u7f6e\u4fe1\u5ea6: {confidence:.3f})\")\n\nprint(\"\\n\u6240\u6709\u9ad8\u7ea7\u793a\u4f8b\u5b8c\u6210\uff01\")\n</code></pre> <p>\u8fd9\u4e9b\u9ad8\u7ea7\u793a\u4f8b\u5c55\u793a\u4e86 Hypergraph-DB \u7684\u5f3a\u5927\u529f\u80fd\uff0c\u5305\u62ec\uff1a</p> <ol> <li>\u65f6\u6001\u5206\u6790\uff1a\u5904\u7406\u968f\u65f6\u95f4\u6f14\u5316\u7684\u590d\u6742\u5173\u7cfb</li> <li>\u591a\u5c42\u7f51\u7edc\uff1a\u5efa\u6a21\u4e0d\u540c\u7c7b\u578b\u7684\u5173\u7cfb\u5c42</li> <li>\u52a8\u6001\u5206\u6790\uff1a\u8ddf\u8e2a\u548c\u5206\u6790\u7f51\u7edc\u6f14\u5316\u6a21\u5f0f</li> <li>\u6df1\u5ea6\u5b66\u4e60\u96c6\u6210\uff1a\u7ed3\u5408\u56fe\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u9884\u6d4b\u548c\u5206\u7c7b</li> </ol> <p>\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u4ee5\u5e94\u7528\u4e8e\u5404\u79cd\u590d\u6742\u7684\u5b9e\u9645\u573a\u666f\uff0c\u5982\u793e\u4ea4\u7f51\u7edc\u5206\u6790\u3001\u79d1\u7814\u5408\u4f5c\u7f51\u7edc\u3001\u751f\u7269\u7f51\u7edc\u5206\u6790\u7b49\u3002</p>"},{"location":"zh/examples/basic-usage/","title":"\u57fa\u7840\u7528\u6cd5\u793a\u4f8b","text":"<p>\u672c\u9875\u9762\u63d0\u4f9b\u4e86\u5728\u5e38\u89c1\u573a\u666f\u4e2d\u4f7f\u7528 Hypergraph-DB \u7684\u5b9e\u7528\u793a\u4f8b\u3002</p>"},{"location":"zh/examples/basic-usage/#1","title":"\u793a\u4f8b 1: \u5b66\u672f\u5408\u4f5c\u7f51\u7edc","text":"<p>\u5efa\u6a21\u5b66\u8005\u4e4b\u95f4\u7684\u7814\u7a76\u5408\u4f5c\u5173\u7cfb\uff1a</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u7814\u7a76\u4eba\u5458\u4f5c\u4e3a\u9876\u70b9\nresearchers = {\n    \"alice\": {\"name\": \"\u5f20\u7231\u4e3d\u535a\u58eb\", \"field\": \"\u673a\u5668\u5b66\u4e60\", \"university\": \"\u6e05\u534e\u5927\u5b66\"},\n    \"bob\": {\"name\": \"\u738b\u535a\u6587\u6559\u6388\", \"field\": \"\u81ea\u7136\u8bed\u8a00\u5904\u7406\", \"university\": \"\u5317\u4eac\u5927\u5b66\"},\n    \"charlie\": {\"name\": \"\u674e\u67e5\u7406\u7814\u7a76\u5458\", \"field\": \"\u8ba1\u7b97\u673a\u89c6\u89c9\", \"university\": \"\u4e2d\u79d1\u9662\"},\n    \"diana\": {\"name\": \"\u9648\u9edb\u5b89\u526f\u6559\u6388\", \"field\": \"\u673a\u5668\u4eba\u5b66\", \"university\": \"\u590d\u65e6\u5927\u5b66\"},\n    \"eve\": {\"name\": \"\u5218\u4f0a\u8299\u8bb2\u5e08\", \"field\": \"\u7406\u8bba\u8ba1\u7b97\u673a\", \"university\": \"\u4e0a\u6d77\u4ea4\u5927\"}\n}\n\nfor researcher_id, info in researchers.items():\n    hg.add_v(researcher_id, info)\n\n# \u6dfb\u52a0\u8bba\u6587\u4f5c\u4e3a\u8d85\u8fb9\uff08\u8fde\u63a5\u6240\u6709\u5171\u540c\u4f5c\u8005\uff09\npapers = [\n    ((\"alice\", \"bob\"), {\n        \"title\": \"\u6df1\u5ea6\u5b66\u4e60\u5728\u81ea\u7136\u8bed\u8a00\u7406\u89e3\u4e2d\u7684\u5e94\u7528\",\n        \"year\": 2023,\n        \"venue\": \"AAAI\",\n        \"citations\": 45\n    }),\n    ((\"alice\", \"charlie\"), {\n        \"title\": \"\u89c6\u89c9-\u8bed\u8a00\u6a21\u578b\u5728\u573a\u666f\u7406\u89e3\u4e2d\u7684\u5e94\u7528\",\n        \"year\": 2023,\n        \"venue\": \"CVPR\",\n        \"citations\": 38\n    }),\n    ((\"bob\", \"charlie\", \"diana\"), {\n        \"title\": \"\u81ea\u4e3b\u7cfb\u7edf\u7684\u591a\u6a21\u6001\u4eba\u5de5\u667a\u80fd\",\n        \"year\": 2024,\n        \"venue\": \"NeurIPS\",\n        \"citations\": 12\n    }),\n    ((\"alice\", \"bob\", \"charlie\", \"eve\"), {\n        \"title\": \"\u73b0\u4ee3\u4eba\u5de5\u667a\u80fd\u7684\u7406\u8bba\u57fa\u7840\",\n        \"year\": 2024,\n        \"venue\": \"JMLR\",\n        \"citations\": 28\n    })\n]\n\nfor authors, paper_info in papers:\n    hg.add_e(authors, paper_info)\n\n# \u5206\u6790\u7f51\u7edc\nprint(f\"\u5b66\u672f\u7f51\u7edc\u5305\u542b {hg.num_v} \u4f4d\u7814\u7a76\u4eba\u5458\u548c {hg.num_e} \u7bc7\u5408\u4f5c\u8bba\u6587\")\n\n# \u627e\u51fa\u6700\u6d3b\u8dc3\u7684\u7814\u7a76\u4eba\u5458\nmost_collaborative = max(hg.all_v, key=lambda v: hg.degree_v(v))\nprint(f\"\u6700\u6d3b\u8dc3\u7684\u7814\u7a76\u4eba\u5458: {hg.v(most_collaborative)['name']} \"\n      f\"({hg.degree_v(most_collaborative)} \u7bc7\u8bba\u6587)\")\n\n# \u627e\u51fa\u6700\u5927\u7684\u5408\u4f5c\u9879\u76ee\nlargest_paper = max(hg.all_e, key=lambda e: hg.degree_e(e))\nnum_authors = hg.degree_e(largest_paper)\nprint(f\"\u6700\u5927\u5408\u4f5c\u9879\u76ee: {num_authors} \u4f4d\u4f5c\u8005\")\n\n# \u53ef\u89c6\u5316\u7f51\u7edc\nhg.draw()\n</code></pre>"},{"location":"zh/examples/basic-usage/#2","title":"\u793a\u4f8b 2: \u7535\u5b50\u5546\u52a1\u63a8\u8350\u7cfb\u7edf","text":"<p>\u5efa\u6a21\u8d2d\u7269\u6a21\u5f0f\u548c\u4ea7\u54c1\u5173\u7cfb\uff1a</p> <pre><code>from hyperdb import HypergraphDB\nfrom collections import defaultdict\n\n# \u521b\u5efa\u7535\u5546\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u4ea7\u54c1\u4f5c\u4e3a\u9876\u70b9\nproducts = {\n    \"laptop_1\": {\"name\": \"\u6e38\u620f\u7b14\u8bb0\u672c\", \"category\": \"\u7535\u8111\", \"price\": 8999},\n    \"mouse_1\": {\"name\": \"\u6e38\u620f\u9f20\u6807\", \"category\": \"\u914d\u4ef6\", \"price\": 299},\n    \"keyboard_1\": {\"name\": \"\u673a\u68b0\u952e\u76d8\", \"category\": \"\u914d\u4ef6\", \"price\": 599},\n    \"monitor_1\": {\"name\": \"4K\u663e\u793a\u5668\", \"category\": \"\u914d\u4ef6\", \"price\": 2199},\n    \"headset_1\": {\"name\": \"\u6e38\u620f\u8033\u673a\", \"category\": \"\u914d\u4ef6\", \"price\": 799},\n    \"phone_1\": {\"name\": \"\u667a\u80fd\u624b\u673a\", \"category\": \"\u624b\u673a\", \"price\": 4999}\n}\n\nfor product_id, info in products.items():\n    hg.add_v(product_id, info)\n\n# \u6dfb\u52a0\u8d2d\u7269\u4f1a\u8bdd\u4f5c\u4e3a\u8d85\u8fb9\uff08\u5728\u540c\u4e00\u8ba2\u5355\u4e2d\u8d2d\u4e70\u7684\u4ea7\u54c1\uff09\nshopping_sessions = [\n    ((\"laptop_1\", \"mouse_1\", \"keyboard_1\"), {\"user\": \"\u7528\u6237A\", \"date\": \"2024-01-15\", \"total\": 9897}),\n    ((\"laptop_1\", \"monitor_1\"), {\"user\": \"\u7528\u6237B\", \"date\": \"2024-01-16\", \"total\": 11198}),\n    ((\"mouse_1\", \"keyboard_1\", \"headset_1\"), {\"user\": \"\u7528\u6237C\", \"date\": \"2024-01-17\", \"total\": 1697}),\n    ((\"phone_1\", \"headset_1\"), {\"user\": \"\u7528\u6237D\", \"date\": \"2024-01-18\", \"total\": 5798}),\n    ((\"laptop_1\", \"mouse_1\", \"keyboard_1\", \"monitor_1\"), {\"user\": \"\u7528\u6237E\", \"date\": \"2024-01-19\", \"total\": 12496})\n]\n\nfor products_in_session, session_info in shopping_sessions:\n    hg.add_e(products_in_session, session_info)\n\n# \u5546\u54c1\u63a8\u8350\u529f\u80fd\ndef find_frequently_bought_together(product_id, min_frequency=1):\n    \"\"\"\u627e\u51fa\u7ecf\u5e38\u4e0e\u7ed9\u5b9a\u4ea7\u54c1\u4e00\u8d77\u8d2d\u4e70\u7684\u5546\u54c1\"\"\"\n    sessions_with_product = hg.nbr_e_of_v(product_id)\n\n    # \u7edf\u8ba1\u5171\u73b0\u6b21\u6570\n    co_occurrence = defaultdict(int)\n    for session in sessions_with_product:\n        other_products = hg.nbr_v_of_e(session) - {product_id}\n        for other_product in other_products:\n            co_occurrence[other_product] += 1\n\n    # \u8fc7\u6ee4\u6700\u5c0f\u9891\u7387\n    recommendations = {product: count for product, count in co_occurrence.items() \n                      if count &gt;= min_frequency}\n\n    # \u6309\u9891\u7387\u6392\u5e8f\n    return sorted(recommendations.items(), key=lambda x: x[1], reverse=True)\n\n# \u751f\u6210\u63a8\u8350\nlaptop_recommendations = find_frequently_bought_together(\"laptop_1\")\nprint(\"\u4e0e\u6e38\u620f\u7b14\u8bb0\u672c\u7ecf\u5e38\u4e00\u8d77\u8d2d\u4e70\u7684\u4ea7\u54c1:\")\nfor product, frequency in laptop_recommendations:\n    product_name = hg.v(product)[\"name\"]\n    print(f\"  {product_name}: {frequency} \u6b21\")\n\n# \u627e\u51fa\u6700\u53d7\u6b22\u8fce\u7684\u4ea7\u54c1\u7c7b\u522b\ncategory_popularity = defaultdict(int)\nfor edge in hg.all_e:\n    products_in_session = hg.nbr_v_of_e(edge)\n    for product in products_in_session:\n        category = hg.v(product)[\"category\"]\n        category_popularity[category] += 1\n\nprint(\"\\n\u4ea7\u54c1\u7c7b\u522b\u53d7\u6b22\u8fce\u7a0b\u5ea6:\")\nfor category, count in sorted(category_popularity.items(), key=lambda x: x[1], reverse=True):\n    print(f\"  {category}: {count} \u6b21\u8d2d\u4e70\")\n\n# \u53ef\u89c6\u5316\u8d2d\u7269\u7f51\u7edc\nhg.draw()\n</code></pre>"},{"location":"zh/examples/basic-usage/#3","title":"\u793a\u4f8b 3: \u793e\u4ea4\u7f51\u7edc\u5206\u6790","text":"<p>\u5efa\u6a21\u7fa4\u4f53\u4e92\u52a8\u548c\u591a\u65b9\u5173\u7cfb\uff1a</p> <pre><code># \u521b\u5efa\u793e\u4ea4\u7f51\u7edc\u8d85\u56fe\nsocial_hg = HypergraphDB()\n\n# \u6dfb\u52a0\u4eba\u5458\npeople = {\n    \"alice\": {\"name\": \"\u7231\u4e3d\u4e1d\", \"age\": 28, \"city\": \"\u5317\u4eac\", \"interests\": [\"\u8bfb\u4e66\", \"\u65c5\u884c\", \"\u6444\u5f71\"]},\n    \"bob\": {\"name\": \"\u9c8d\u52c3\", \"age\": 32, \"city\": \"\u4e0a\u6d77\", \"interests\": [\"\u8fd0\u52a8\", \"\u97f3\u4e50\", \"\u7f16\u7a0b\"]},\n    \"charlie\": {\"name\": \"\u67e5\u7406\", \"age\": 25, \"city\": \"\u6df1\u5733\", \"interests\": [\"\u6e38\u620f\", \"\u52a8\u6f2b\", \"\u7f8e\u98df\"]},\n    \"diana\": {\"name\": \"\u9edb\u5b89\", \"age\": 30, \"city\": \"\u676d\u5dde\", \"interests\": [\"\u827a\u672f\", \"\u8bbe\u8ba1\", \"\u65c5\u884c\"]},\n    \"eve\": {\"name\": \"\u4f0a\u8299\", \"age\": 27, \"city\": \"\u6210\u90fd\", \"interests\": [\"\u7f8e\u98df\", \"\u97f3\u4e50\", \"\u5065\u8eab\"]}\n}\n\nfor person_id, info in people.items():\n    social_hg.add_v(person_id, info)\n\n# \u6dfb\u52a0\u7fa4\u4f53\u6d3b\u52a8\u4f5c\u4e3a\u8d85\u8fb9\ngroup_activities = [\n    ((\"alice\", \"bob\"), {\"activity\": \"\u5496\u5561\u804a\u5929\", \"date\": \"2024-01-10\", \"location\": \"\u661f\u5df4\u514b\"}),\n    ((\"alice\", \"diana\"), {\"activity\": \"\u7f8e\u672f\u9986\u53c2\u89c2\", \"date\": \"2024-01-12\", \"location\": \"\u56fd\u5bb6\u7f8e\u672f\u9986\"}),\n    ((\"bob\", \"charlie\", \"eve\"), {\"activity\": \"\u5065\u8eab\u623f\", \"date\": \"2024-01-15\", \"location\": \"24\u5c0f\u65f6\u5065\u8eab\"}),\n    ((\"alice\", \"charlie\", \"diana\"), {\"activity\": \"\u6444\u5f71\u5916\u62cd\", \"date\": \"2024-01-18\", \"location\": \"\u9890\u548c\u56ed\"}),\n    ((\"bob\", \"diana\", \"eve\", \"charlie\"), {\"activity\": \"\u805a\u9910\", \"date\": \"2024-01-20\", \"location\": \"\u5ddd\u83dc\u9986\"})\n]\n\nfor participants, activity_info in group_activities:\n    social_hg.add_e(participants, activity_info)\n\n# \u793e\u4ea4\u7f51\u7edc\u5206\u6790\nprint(f\"\u793e\u4ea4\u7f51\u7edc\u5305\u542b {social_hg.num_v} \u4e2a\u4eba\u548c {social_hg.num_e} \u4e2a\u7fa4\u4f53\u6d3b\u52a8\")\n\n# \u627e\u51fa\u6700\u793e\u4ea4\u7684\u4eba\uff08\u6700\u9ad8\u5ea6\u6570\uff09\nmost_social = max(social_hg.all_v, key=lambda v: social_hg.degree_v(v))\nprint(f\"\u6700\u793e\u4ea4\u7684\u4eba: {social_hg.v(most_social)['name']} \"\n      f\"(\u53c2\u4e0e {social_hg.degree_v(most_social)} \u4e2a\u6d3b\u52a8)\")\n\n# \u5206\u6790\u7fa4\u4f53\u89c4\u6a21\ngroup_sizes = [social_hg.degree_e(e) for e in social_hg.all_e]\navg_group_size = sum(group_sizes) / len(group_sizes)\nprint(f\"\u5e73\u5747\u7fa4\u4f53\u89c4\u6a21: {avg_group_size:.1f}\")\nprint(f\"\u6700\u5927\u7fa4\u4f53: {max(group_sizes)} \u4eba\")\n\n# \u627e\u51fa\u5174\u8da3\u76f8\u4f3c\u7684\u793e\u533a\nprint(\"\\n\u57fa\u4e8e\u5171\u540c\u6d3b\u52a8\u7684\u793e\u533a:\")\nfor edge in social_hg.all_e:\n    if social_hg.degree_e(edge) &gt;= 3:  # \u81f3\u5c113\u4eba\u7684\u7fa4\u4f53\n        participants = social_hg.nbr_v_of_e(edge)\n        activity = social_hg.e(edge)\n\n        # \u627e\u51fa\u5171\u540c\u5174\u8da3\n        if len(participants) &gt; 1:\n            common_interests = set(social_hg.v(list(participants)[0])[\"interests\"])\n            for person in participants:\n                common_interests &amp;= set(social_hg.v(person)[\"interests\"])\n\n            if common_interests:\n                print(f\"  {activity['activity']}: {len(participants)} \u4eba\uff0c\u5171\u540c\u5174\u8da3: {', '.join(common_interests)}\")\n\n# \u627e\u51fa\u793e\u4ea4\u6865\u6881\uff08\u8fde\u63a5\u4e0d\u540c\u7fa4\u4f53\u7684\u4eba\uff09\nprint(\"\\n\u793e\u4ea4\u6865\u6881:\")\nfor person in social_hg.all_v:\n    person_groups = social_hg.nbr_e_of_v(person)\n    if len(person_groups) &gt;= 2:\n        # \u68c0\u67e5\u662f\u5426\u8fde\u63a5\u4e86\u4e0d\u540c\u7684\u7fa4\u4f53\n        unique_groups = set()\n        for group1 in person_groups:\n            for group2 in person_groups:\n                if group1 != group2:\n                    # \u68c0\u67e5\u4e24\u4e2a\u7fa4\u4f53\u662f\u5426\u6709\u5176\u4ed6\u5171\u540c\u6210\u5458\n                    group1_members = social_hg.nbr_v_of_e(group1) - {person}\n                    group2_members = social_hg.nbr_v_of_e(group2) - {person}\n                    if not group1_members.intersection(group2_members):\n                        unique_groups.add((group1, group2))\n\n        if unique_groups:\n            name = social_hg.v(person)[\"name\"]\n            num_groups = social_hg.degree_v(person)\n            print(f\"  {name} (\u8fde\u63a5 {num_groups} \u4e2a\u7fa4\u4f53)\")\n\n# \u53ef\u89c6\u5316\u793e\u4ea4\u7f51\u7edc\nsocial_hg.draw()\n</code></pre>"},{"location":"zh/examples/basic-usage/#4","title":"\u793a\u4f8b 4: \u77e5\u8bc6\u56fe\u8c31","text":"<p>\u5efa\u6a21\u590d\u6742\u7684\u77e5\u8bc6\u5173\u7cfb\uff1a</p> <pre><code># \u521b\u5efa\u77e5\u8bc6\u56fe\u8c31\u8d85\u56fe\nkg = HypergraphDB()\n\n# \u6dfb\u52a0\u5b9e\u4f53\nentities = {\n    \"einstein\": {\"name\": \"\u963f\u5c14\u4f2f\u7279\u00b7\u7231\u56e0\u65af\u5766\", \"type\": \"\u4eba\u7269\", \"birth_year\": 1879},\n    \"relativity\": {\"name\": \"\u76f8\u5bf9\u8bba\", \"type\": \"\u7406\u8bba\", \"year\": 1905},\n    \"nobel_prize\": {\"name\": \"\u8bfa\u8d1d\u5c14\u7269\u7406\u5b66\u5956\", \"type\": \"\u5956\u9879\", \"year\": 1921},\n    \"princeton\": {\"name\": \"\u666e\u6797\u65af\u987f\u5927\u5b66\", \"type\": \"\u673a\u6784\", \"founded\": 1746},\n    \"photoelectric\": {\"name\": \"\u5149\u7535\u6548\u5e94\", \"type\": \"\u73b0\u8c61\", \"discovery\": 1905},\n    \"quantum\": {\"name\": \"\u91cf\u5b50\u529b\u5b66\", \"type\": \"\u7406\u8bba\", \"era\": \"20\u4e16\u7eaa\u521d\"}\n}\n\nfor entity_id, info in entities.items():\n    kg.add_v(entity_id, info)\n\n# \u6dfb\u52a0\u590d\u6742\u5173\u7cfb\u4f5c\u4e3a\u8d85\u8fb9\nknowledge_relations = [\n    ((\"einstein\", \"relativity\"), {\"relation\": \"\u63d0\u51fa\", \"year\": 1905, \"impact\": \"\u9769\u547d\u6027\"}),\n    ((\"einstein\", \"nobel_prize\", \"photoelectric\"), {\"relation\": \"\u56e0...\u83b7\u5f97\", \"year\": 1921}),\n    ((\"einstein\", \"princeton\"), {\"relation\": \"\u4efb\u804c\u4e8e\", \"period\": \"1933-1955\"}),\n    ((\"relativity\", \"quantum\", \"einstein\"), {\"relation\": \"\u7406\u8bba\u8d21\u732e\", \"field\": \"\u73b0\u4ee3\u7269\u7406\u5b66\"}),\n    ((\"photoelectric\", \"quantum\"), {\"relation\": \"\u7406\u8bba\u57fa\u7840\", \"contribution\": \"\u91cf\u5b50\u6982\u5ff5\"})\n]\n\nfor vertices, relation_info in knowledge_relations.items():\n    kg.add_e(vertices, relation_info)\n\n# \u77e5\u8bc6\u56fe\u8c31\u5206\u6790\nprint(f\"\u77e5\u8bc6\u56fe\u8c31\u5305\u542b {kg.num_v} \u4e2a\u5b9e\u4f53\u548c {kg.num_e} \u4e2a\u5173\u7cfb\")\n\n# \u627e\u51fa\u6700\u91cd\u8981\u7684\u5b9e\u4f53\uff08\u6700\u9ad8\u5ea6\u6570\uff09\nmost_important = max(kg.all_v, key=lambda v: kg.degree_v(v))\nentity_info = kg.v(most_important)\nprint(f\"\u6700\u91cd\u8981\u7684\u5b9e\u4f53: {entity_info['name']} ({entity_info['type']})\")\n\n# \u5206\u6790\u83b7\u5956\u4fe1\u606f\nprint(\"\\n\u83b7\u5956\u4fe1\u606f:\")\nfor edge in kg.all_e:\n    edge_info = kg.e(edge)\n    if \"nobel_prize\" in kg.nbr_v_of_e(edge):\n        winner = [e for e in kg.nbr_v_of_e(edge) if e != \"nobel_prize\"][0]\n        winner_info = kg.v(winner)\n        print(f\"  {winner_info['name']} \u4e8e {edge_info['year']} \u5e74\u83b7\u5f97\u8bfa\u8d1d\u5c14\u5956\")\n\n# \u7406\u8bba\u53d1\u5c55\u5173\u7cfb\nprint(\"\\n\u7406\u8bba\u53d1\u5c55:\")\nfor edge in kg.all_e:\n    if kg.degree_e(edge) &gt;= 3:  # \u591a\u5143\u5173\u7cfb\n        entities_in_relation = kg.nbr_v_of_e(edge)\n        theory_entities = [e for e in entities_in_relation if kg.v(e)['type'] == 'theory']\n\n        if len(theory_entities) &gt;= 2:\n            theory_name = kg.v(theory_entities[0])['name']\n            developer_names = [kg.v(dev)['name'] for dev in entities_in_relation if kg.v(dev)['type'] == 'person']\n            print(f\"  {theory_name}: {', '.join(developer_names)}\")\n\n# \u53ef\u89c6\u5316\u77e5\u8bc6\u56fe\u8c31\nkg.draw()\n</code></pre>"},{"location":"zh/examples/basic-usage/#_2","title":"\u6709\u6548\u4f7f\u7528\u6280\u5de7","text":""},{"location":"zh/examples/basic-usage/#1-id","title":"1. \u9009\u62e9\u6709\u610f\u4e49\u7684 ID","text":"<pre><code># \u597d\u7684: \u63cf\u8ff0\u6027 ID\nhg.add_v(\"user_alice_chen\", {\"name\": \"\u9648\u7231\u4e3d\u4e1d\"})\n\n# \u4e0d\u597d\u7684: \u65e0\u610f\u4e49\u7684\u6570\u5b57\nhg.add_v(12345, {\"name\": \"\u9648\u7231\u4e3d\u4e1d\"})\n</code></pre>"},{"location":"zh/examples/basic-usage/#2_1","title":"2. \u7ed3\u6784\u5316\u6570\u636e\u5c5e\u6027","text":"<pre><code># \u597d\u7684: \u7ed3\u6784\u5316\u5c5e\u6027\nhg.add_v(\"researcher_001\", {\n    \"personal\": {\"name\": \"\u5f20\u4e09\", \"age\": 35},\n    \"academic\": {\"field\": \"AI\", \"university\": \"\u6e05\u534e\"},\n    \"contact\": {\"email\": \"zhang@example.com\"}\n})\n</code></pre>"},{"location":"zh/examples/basic-usage/#3_1","title":"3. \u6709\u610f\u4e49\u7684\u8d85\u8fb9\u6570\u636e","text":"<pre><code># \u597d\u7684: \u4e30\u5bcc\u7684\u8d85\u8fb9\u4fe1\u606f\nhg.add_e((\"alice\", \"bob\", \"charlie\"), {\n    \"event\": \"\u9879\u76ee\u4f1a\u8bae\",\n    \"project\": \"\u79fb\u52a8\u5e94\u7528\u5f00\u53d1\",\n    \"date\": \"2024-01-15\",\n    \"duration\": \"2\u5c0f\u65f6\",\n    \"outcome\": \"\u786e\u5b9a\u6280\u672f\u65b9\u6848\"\n})\n</code></pre>"},{"location":"zh/examples/basic-usage/#4_1","title":"4. \u4e00\u81f4\u7684\u6570\u636e\u683c\u5f0f","text":"<pre><code># \u786e\u4fdd\u540c\u7c7b\u6570\u636e\u683c\u5f0f\u4e00\u81f4\ndate_format = \"%Y-%m-%d\"\nfor event_data in events:\n    hg.add_e(event_data[\"participants\"], {\n        \"date\": event_data[\"date\"].strftime(date_format),\n        \"type\": event_data[\"type\"]\n    })\n</code></pre>"},{"location":"zh/examples/basic-usage/#5","title":"5. \u6279\u91cf\u64cd\u4f5c\u63d0\u5347\u6027\u80fd","text":"<pre><code># \u597d\u7684: \u6279\u91cf\u64cd\u4f5c\nvertices_to_add = [\n    (\"v1\", {\"name\": \"\u9876\u70b91\"}),\n    (\"v2\", {\"name\": \"\u9876\u70b92\"}),\n    # ... \u66f4\u591a\u9876\u70b9\n]\n\nfor vertex_id, vertex_data in vertices_to_add:\n    hg.add_v(vertex_id, vertex_data)\n</code></pre>"},{"location":"zh/examples/basic-usage/#_3","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u770b\u5230\u4e86\u57fa\u672c\u7528\u6cd5\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ul> <li>\u63a2\u7d22\u9ad8\u7ea7\u529f\u80fd: \u590d\u6742\u5206\u6790\u548c\u7b97\u6cd5</li> <li>\u5b66\u4e60 API \u8be6\u7ec6\u4fe1\u606f: \u6df1\u5165\u4e86\u89e3\u6240\u6709\u65b9\u6cd5</li> <li>\u53ef\u89c6\u5316\u6307\u5357: \u521b\u5efa\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u53ef\u89c6\u5316</li> </ul> <p>\u795d\u60a8\u4f7f\u7528 Hypergraph-DB \u6109\u5feb\uff01\ud83d\ude80</p>"},{"location":"zh/examples/visualization-examples/","title":"\u8d85\u56fe\u53ef\u89c6\u5316\u793a\u4f8b","text":"<p>\u672c\u6307\u5357\u63d0\u4f9b\u4e86\u4f7f\u7528 Hypergraph-DB \u5185\u7f6e\u53ef\u89c6\u5316\u529f\u80fd\u7684\u5168\u9762\u793a\u4f8b\u3002</p>"},{"location":"zh/examples/visualization-examples/#_2","title":"\u26a1 \u91cd\u8981\u63d0\u793a\uff1a\u4ee3\u7801\u6267\u884c\u987a\u5e8f","text":"<p>\u5728\u4f7f\u7528\u53ef\u89c6\u5316\u529f\u80fd\u65f6\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u4ee3\u7801\u6267\u884c\u987a\u5e8f\uff0c\u786e\u4fdd\u80fd\u770b\u5230\u5b8c\u6574\u7684\u5206\u6790\u7ed3\u679c\uff1a</p> <pre><code># \u2705 \u63a8\u8350\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\n# 1. \u521b\u5efa\u6570\u636e\nhg = HypergraphDB()\nhg.add_v(...)\nhg.add_e(...)\n\n# 2. \u5148\u8fdb\u884c\u5206\u6790\uff08\u5728\u53ef\u89c6\u5316\u4e4b\u524d\uff09\nprint(\"\u5206\u6790\u7ed3\u679c\uff1a\")\nprint(f\"\u7f51\u7edc\u89c4\u6a21\uff1a{hg.num_v} \u9876\u70b9\uff0c{hg.num_e} \u8fb9\")\n# \u5176\u4ed6\u5206\u6790...\n\n# 3. \u6700\u540e\u542f\u52a8\u53ef\u89c6\u5316\uff08\u7528\u6237\u6309Ctrl+C\u540e\u7a0b\u5e8f\u7ed3\u675f\uff09\nprint(\"\u542f\u52a8\u53ef\u89c6\u5316...\")\nhg.draw()  # \u963b\u585e\u76f4\u5230\u7528\u6237\u6309Ctrl+C\n</code></pre> <pre><code># \u274c \u907f\u514d\u7684\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f\nhg.draw()  # \u7528\u6237\u6309Ctrl+C\u540e\u7a0b\u5e8f\u76f4\u63a5\u9000\u51fa\nprint(\"\u8fd9\u4e9b\u5206\u6790\u7ed3\u679c\u6c38\u8fdc\u4e0d\u4f1a\u663e\u793a\")  # \u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c\n</code></pre>"},{"location":"zh/examples/visualization-examples/#1","title":"\ud83c\udfaf \u793a\u4f8b 1\uff1a\u793e\u4ea4\u7f51\u7edc\u5206\u6790","text":"<p>\u8ba9\u6211\u4eec\u521b\u5efa\u5e76\u53ef\u89c6\u5316\u4e00\u4e2a\u793e\u4ea4\u7f51\u7edc\uff0c\u5176\u4e2d\u670b\u53cb\u7fa4\u4f53\u4e00\u8d77\u53c2\u4e0e\u5404\u79cd\u6d3b\u52a8\u3002</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u793e\u4ea4\u7f51\u7edc\u8d85\u56fe\nsocial_network = HypergraphDB()\n\n# \u6dfb\u52a0\u4eba\u5458\u4f5c\u4e3a\u9876\u70b9\npeople = {\n    \"alice\": {\"name\": \"Alice\", \"age\": 25, \"city\": \"\u7ebd\u7ea6\", \"interests\": [\"\u9605\u8bfb\", \"\u97f3\u4e50\"]},\n    \"bob\": {\"name\": \"Bob\", \"age\": 27, \"city\": \"\u65e7\u91d1\u5c71\", \"interests\": [\"\u8fd0\u52a8\", \"\u65c5\u884c\"]},\n    \"charlie\": {\"name\": \"Charlie\", \"age\": 23, \"city\": \"\u6ce2\u58eb\u987f\", \"interests\": [\"\u7f16\u7a0b\", \"\u6e38\u620f\"]},\n    \"diana\": {\"name\": \"Diana\", \"age\": 26, \"city\": \"\u897f\u96c5\u56fe\", \"interests\": [\"\u827a\u672f\", \"\u6444\u5f71\"]},\n    \"eve\": {\"name\": \"Eve\", \"age\": 24, \"city\": \"\u5965\u65af\u6c40\", \"interests\": [\"\u97f3\u4e50\", \"\u70f9\u996a\"]},\n    \"frank\": {\"name\": \"Frank\", \"age\": 28, \"city\": \"\u4e39\u4f5b\", \"interests\": [\"\u5f92\u6b65\", \"\u65c5\u884c\"]}\n}\n\nfor person_id, info in people.items():\n    social_network.add_v(person_id, info)\n\n# \u6dfb\u52a0\u793e\u4ea4\u6d3b\u52a8\u4f5c\u4e3a\u8d85\u8fb9\uff08\u8fde\u63a5\u670b\u53cb\u7fa4\u4f53\uff09\nactivities = [\n    # \u5c0f\u578b\u805a\u4f1a\n    ((\"alice\", \"bob\"), {\n        \"activity\": \"\u5496\u5561\u805a\u4f1a\",\n        \"date\": \"2024-01-15\",\n        \"location\": \"\u4e2d\u592e\u516c\u56ed\",\n        \"duration\": 2\n    }),\n\n    # \u4e2d\u578b\u7fa4\u4f53\u6d3b\u52a8\n    ((\"alice\", \"charlie\", \"eve\"), {\n        \"activity\": \"\u97f3\u4e50\u4f1a\",\n        \"date\": \"2024-01-20\",\n        \"location\": \"\u9ea6\u8fea\u900a\u5e7f\u573a\u82b1\u56ed\",\n        \"duration\": 4\n    }),\n\n    # \u5927\u578b\u7fa4\u4f53\u6d3b\u52a8\n    ((\"bob\", \"diana\", \"frank\", \"eve\"), {\n        \"activity\": \"\u5f92\u6b65\u65c5\u884c\",\n        \"date\": \"2024-02-01\",\n        \"location\": \"\u7ea6\u585e\u7c73\u8482\u56fd\u5bb6\u516c\u56ed\",\n        \"duration\": 48\n    }),\n\n    # \u5168\u5458\u805a\u4f1a\n    ((\"alice\", \"bob\", \"charlie\", \"diana\", \"eve\", \"frank\"), {\n        \"activity\": \"\u751f\u65e5\u6d3e\u5bf9\",\n        \"date\": \"2024-02-14\",\n        \"location\": \"Alice\u7684\u516c\u5bd3\",\n        \"duration\": 6\n    })\n]\n\nfor participants, activity_info in activities:\n    social_network.add_e(participants, activity_info)\n\n# \u5148\u8fdb\u884c\u5206\u6790\uff0c\u518d\u53ef\u89c6\u5316\nprint(\"\ud83d\udcca \u7f51\u7edc\u5206\u6790\u7ed3\u679c\uff1a\")\nprint(\"=\" * 40)\n\n# \u5206\u6790\u7f51\u7edc\nprint(f\"\ud83d\udc65 \u7f51\u7edc\u89c4\u6a21\uff1a{social_network.num_v} \u4eba\uff0c{social_network.num_e} \u9879\u6d3b\u52a8\")\n\n# \u627e\u5230\u6700\u6d3b\u8dc3\u7684\u4eba\nmost_social = max(social_network.all_v, key=lambda v: social_network.degree_v(v))\nprint(f\"\ud83c\udf1f \u6700\u6d3b\u8dc3\u7684\u4eba\uff1a{social_network.v(most_social)['name']} \"\n      f\"({social_network.degree_v(most_social)} \u9879\u6d3b\u52a8)\")\n\n# \u663e\u793a\u6240\u6709\u53c2\u4e0e\u8005\u7684\u6d3b\u52a8\u6570\u91cf\nprint(\"\\n\ud83d\udc65 \u6240\u6709\u53c2\u4e0e\u8005\u6d3b\u52a8\u7edf\u8ba1\uff1a\")\nfor person_id in social_network.all_v:\n    person_info = social_network.v(person_id)\n    activity_count = social_network.degree_v(person_id)\n    print(f\"  \u2022 {person_info['name']}: {activity_count} \u9879\u6d3b\u52a8\")\n\nprint(\"\\n\" + \"=\" * 40)\nprint(\"\ud83c\udfa8 \u542f\u52a8\u53ef\u89c6\u5316\uff08\u6309 Ctrl+C \u5173\u95ed\u53ef\u89c6\u5316\u7a97\u53e3\uff09\")\nsocial_network.draw()\n</code></pre>"},{"location":"zh/examples/visualization-examples/#2","title":"\ud83e\uddec \u793a\u4f8b 2\uff1a\u79d1\u5b66\u5408\u4f5c\u7f51\u7edc","text":"<p>\u53ef\u89c6\u5316\u8ba1\u7b97\u751f\u7269\u5b66\u4e2d\u7684\u7814\u7a76\u5408\u4f5c\uff1a</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u7814\u7a76\u5408\u4f5c\u8d85\u56fe\nresearch_network = HypergraphDB()\n\n# \u6dfb\u52a0\u7814\u7a76\u8005\u4f5c\u4e3a\u9876\u70b9\nresearchers = {\n    \"dr_smith\": {\n        \"name\": \"Dr. Sarah Smith\",\n        \"field\": \"\u751f\u7269\u4fe1\u606f\u5b66\",\n        \"institution\": \"MIT\",\n        \"h_index\": 45,\n        \"experience\": 15\n    },\n    \"dr_jones\": {\n        \"name\": \"Dr. Michael Jones\", \n        \"field\": \"\u673a\u5668\u5b66\u4e60\",\n        \"institution\": \"\u65af\u5766\u798f\",\n        \"h_index\": 38,\n        \"experience\": 12\n    },\n    \"dr_garcia\": {\n        \"name\": \"Dr. Maria Garcia\",\n        \"field\": \"\u57fa\u56e0\u7ec4\u5b66\",\n        \"institution\": \"\u54c8\u4f5b\",\n        \"h_index\": 52,\n        \"experience\": 18\n    },\n    \"dr_chen\": {\n        \"name\": \"Dr. Wei Chen\",\n        \"field\": \"\u7cfb\u7edf\u751f\u7269\u5b66\",\n        \"institution\": \"UCSF\",\n        \"h_index\": 41,\n        \"experience\": 14\n    },\n    \"dr_taylor\": {\n        \"name\": \"Dr. James Taylor\",\n        \"field\": \"\u8ba1\u7b97\u5316\u5b66\",\n        \"institution\": \"\u52a0\u5dde\u7406\u5de5\",\n        \"h_index\": 36,\n        \"experience\": 10\n    }\n}\n\nfor researcher_id, info in researchers.items():\n    research_network.add_v(researcher_id, info)\n\n# \u6dfb\u52a0\u7814\u7a76\u8bba\u6587\u4f5c\u4e3a\u8d85\u8fb9\npublications = [\n    # \u53cc\u4eba\u5408\u4f5c\n    ((\"dr_smith\", \"dr_jones\"), {\n        \"title\": \"\u86cb\u767d\u8d28\u7ed3\u6784\u9884\u6d4b\u7684\u6df1\u5ea6\u5b66\u4e60\",\n        \"journal\": \"Nature Biotechnology\",\n        \"year\": 2023,\n        \"citations\": 127,\n        \"impact_factor\": 46.9\n    }),\n\n    # \u4e09\u4eba\u5408\u4f5c\n    ((\"dr_garcia\", \"dr_chen\", \"dr_taylor\"), {\n        \"title\": \"\u75be\u75c5\u9884\u6d4b\u7684\u591a\u7ec4\u5b66\u6574\u5408\",\n        \"journal\": \"Cell\",\n        \"year\": 2023,\n        \"citations\": 98,\n        \"impact_factor\": 66.9\n    }),\n\n    # \u5927\u578b\u5408\u4f5c\n    ((\"dr_smith\", \"dr_jones\", \"dr_garcia\", \"dr_chen\"), {\n        \"title\": \"AI\u9a71\u52a8\u7684\u836f\u7269\u53d1\u73b0\u7ba1\u9053\",\n        \"journal\": \"Science\",\n        \"year\": 2024,\n        \"citations\": 45,\n        \"impact_factor\": 56.9\n    }),\n\n    # \u8de8\u673a\u6784\u5927\u5408\u4f5c\n    ((\"dr_smith\", \"dr_jones\", \"dr_garcia\", \"dr_chen\", \"dr_taylor\"), {\n        \"title\": \"\u4e2a\u6027\u5316\u533b\u5b66\u7684\u672a\u6765\",\n        \"journal\": \"Nature Reviews Drug Discovery\",\n        \"year\": 2024,\n        \"citations\": 23,\n        \"impact_factor\": 112.3\n    })\n]\n\nfor authors, paper_info in publications:\n    research_network.add_e(authors, paper_info)\n\n# \u5148\u8fdb\u884c\u7814\u7a76\u5f71\u54cd\u529b\u5206\u6790\nprint(\"\ufffd \u7814\u7a76\u5408\u4f5c\u7f51\u7edc\u5206\u6790\u7ed3\u679c\uff1a\")\nprint(\"=\" * 50)\n\n# \u57fa\u7840\u7f51\u7edc\u7edf\u8ba1\nprint(f\"\ufffd \u7f51\u7edc\u89c4\u6a21\uff1a{research_network.num_v} \u4f4d\u7814\u7a76\u8005\uff0c{research_network.num_e} \u7bc7\u8bba\u6587\")\n\n# \u627e\u5230\u6700\u5408\u4f5c\u7684\u7814\u7a76\u8005\nmost_collaborative = max(research_network.all_v, \n                        key=lambda v: research_network.degree_v(v))\nresearcher_info = research_network.v(most_collaborative)\nprint(f\"\ud83e\udd1d \u6700\u5408\u4f5c\u7684\u7814\u7a76\u8005\uff1a{researcher_info['name']} \"\n      f\"({research_network.degree_v(most_collaborative)} \u7bc7\u8bba\u6587)\")\n\n# \u627e\u5230\u6700\u9ad8\u5f71\u54cd\u529b\u7684\u8bba\u6587\nhighest_impact = max(research_network.all_e, \n                    key=lambda e: research_network.e(e)['impact_factor'])\nimpact_factor = research_network.e(highest_impact)['impact_factor']\nprint(f\"\u2b50 \u6700\u9ad8\u5f71\u54cd\u529b\u8bba\u6587\uff1a\u5f71\u54cd\u56e0\u5b50 {impact_factor}\")\n\n# \u663e\u793a\u6bcf\u4f4d\u7814\u7a76\u8005\u7684\u8be6\u7ec6\u4fe1\u606f\nprint(\"\\n\ud83d\udc68\u200d\ud83d\udd2c \u7814\u7a76\u8005\u5408\u4f5c\u7edf\u8ba1\uff1a\")\nfor researcher_id in research_network.all_v:\n    info = research_network.v(researcher_id)\n    collab_count = research_network.degree_v(researcher_id)\n    print(f\"  \u2022 {info['name']} ({info['institution']})\")\n    print(f\"    \u9886\u57df: {info['field']}, H\u6307\u6570: {info['h_index']}, \u5408\u4f5c\u8bba\u6587: {collab_count}\")\n\nprint(\"\\n\" + \"=\" * 50)\nprint(\"\ud83d\udd2c \u542f\u52a8\u7814\u7a76\u7f51\u7edc\u53ef\u89c6\u5316\uff08\u6309 Ctrl+C \u5173\u95ed\uff09\")\nresearch_network.draw()\n</code></pre>"},{"location":"zh/examples/visualization-examples/#3","title":"\ud83d\uded2 \u793a\u4f8b 3\uff1a\u7535\u5546\u8d2d\u4e70\u6a21\u5f0f","text":"<p>\u5206\u6790\u5ba2\u6237\u8d2d\u4e70\u884c\u4e3a\u548c\u4ea7\u54c1\u5173\u7cfb\uff1a</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u7535\u5546\u8d85\u56fe\necommerce = HypergraphDB()\n\n# \u6dfb\u52a0\u4ea7\u54c1\u4f5c\u4e3a\u9876\u70b9\nproducts = {\n    \"laptop\": {\"name\": \"\u6e38\u620f\u7b14\u8bb0\u672c\", \"category\": \"\u7535\u5b50\u4ea7\u54c1\", \"price\": 1299.99, \"rating\": 4.5},\n    \"mouse\": {\"name\": \"\u65e0\u7ebf\u9f20\u6807\", \"category\": \"\u7535\u5b50\u4ea7\u54c1\", \"price\": 49.99, \"rating\": 4.3},\n    \"keyboard\": {\"name\": \"\u673a\u68b0\u952e\u76d8\", \"category\": \"\u7535\u5b50\u4ea7\u54c1\", \"price\": 129.99, \"rating\": 4.6},\n    \"monitor\": {\"name\": \"4K\u663e\u793a\u5668\", \"category\": \"\u7535\u5b50\u4ea7\u54c1\", \"price\": 399.99, \"rating\": 4.4},\n    \"headset\": {\"name\": \"\u6e38\u620f\u8033\u673a\", \"category\": \"\u7535\u5b50\u4ea7\u54c1\", \"price\": 89.99, \"rating\": 4.2},\n    \"desk\": {\"name\": \"\u5347\u964d\u684c\", \"category\": \"\u5bb6\u5177\", \"price\": 299.99, \"rating\": 4.1},\n    \"chair\": {\"name\": \"\u4eba\u4f53\u5de5\u5b66\u6905\", \"category\": \"\u5bb6\u5177\", \"price\": 249.99, \"rating\": 4.7},\n    \"lamp\": {\"name\": \"LED\u53f0\u706f\", \"category\": \"\u5bb6\u5177\", \"price\": 79.99, \"rating\": 4.0}\n}\n\nfor product_id, info in products.items():\n    ecommerce.add_v(product_id, info)\n\n# \u6dfb\u52a0\u8d2d\u7269\u7bee\u4f5c\u4e3a\u8d85\u8fb9\npurchase_baskets = [\n    # \u6e38\u620f\u88c5\u5907\u8d2d\u4e70\n    ((\"laptop\", \"mouse\", \"keyboard\", \"headset\"), {\n        \"customer_id\": \"cust_001\",\n        \"purchase_date\": \"2024-01-15\",\n        \"total_amount\": 1569.96,\n        \"customer_type\": \"\u6e38\u620f\u7231\u597d\u8005\"\n    }),\n\n    # \u529e\u516c\u8bbe\u5907\u8d2d\u4e70\n    ((\"monitor\", \"desk\", \"chair\", \"lamp\"), {\n        \"customer_id\": \"cust_002\", \n        \"purchase_date\": \"2024-01-18\",\n        \"total_amount\": 929.96,\n        \"customer_type\": \"\u8fdc\u7a0b\u5de5\u4f5c\u8005\"\n    }),\n\n    # \u7b80\u5355\u6e38\u620f\u8bbe\u5907\n    ((\"mouse\", \"keyboard\", \"headset\"), {\n        \"customer_id\": \"cust_003\",\n        \"purchase_date\": \"2024-01-20\",\n        \"total_amount\": 269.97,\n        \"customer_type\": \"\u9884\u7b97\u6e38\u620f\u73a9\u5bb6\"\n    }),\n\n    # \u8c6a\u534e\u5de5\u4f5c\u533a\n    ((\"laptop\", \"monitor\", \"desk\", \"chair\", \"lamp\"), {\n        \"customer_id\": \"cust_004\",\n        \"purchase_date\": \"2024-01-25\",\n        \"total_amount\": 2229.95,\n        \"customer_type\": \"\u4e13\u4e1a\u4eba\u58eb\"\n    }),\n\n    # \u4ec5\u914d\u4ef6\n    ((\"mouse\", \"lamp\"), {\n        \"customer_id\": \"cust_005\",\n        \"purchase_date\": \"2024-01-28\",\n        \"total_amount\": 129.98,\n        \"customer_type\": \"\u4f11\u95f2\u4e70\u5bb6\"\n    })\n]\n\nfor products_in_basket, purchase_info in purchase_baskets:\n    ecommerce.add_e(products_in_basket, purchase_info)\n\n# \u5148\u8fdb\u884c\u8d2d\u7269\u7bee\u5206\u6790\nprint(\"\ufffd \u7535\u5546\u8d2d\u4e70\u6a21\u5f0f\u5206\u6790\u7ed3\u679c\uff1a\")\nprint(\"=\" * 45)\n\n# \u57fa\u7840\u7edf\u8ba1\nprint(f\"\ud83d\udecd\ufe0f \u5546\u57ce\u6982\u51b5\uff1a{ecommerce.num_v} \u79cd\u4ea7\u54c1\uff0c{ecommerce.num_e} \u6b21\u8d2d\u4e70\")\n\n# \u627e\u5230\u6700\u53d7\u6b22\u8fce\u7684\u4ea7\u54c1\nmost_popular = max(ecommerce.all_v, key=lambda v: ecommerce.degree_v(v))\nproduct_info = ecommerce.v(most_popular)\nprint(f\"\ud83c\udfc6 \u6700\u53d7\u6b22\u8fce\u4ea7\u54c1\uff1a{product_info['name']} \"\n      f\"({ecommerce.degree_v(most_popular)} \u6b21\u8d2d\u4e70)\")\n\n# \u627e\u5230\u6700\u5927\u8d2d\u4e70\nlargest_purchase = max(ecommerce.all_e, key=lambda e: len(ecommerce.e_v(e)))\nnum_items = len(ecommerce.e_v(largest_purchase))\npurchase_info = ecommerce.e(largest_purchase)\nprint(f\"\ud83d\udcb0 \u6700\u5927\u8d2d\u4e70\uff1a{num_items} \u4ef6\u5546\u54c1\uff0c${purchase_info['total_amount']:.2f}\")\n\n# \u663e\u793a\u4ea7\u54c1\u8d2d\u4e70\u9891\u6b21\nprint(f\"\\n\ud83d\udcc8 \u4ea7\u54c1\u8d2d\u4e70\u9891\u6b21\u6392\u884c\uff1a\")\nproducts_by_popularity = sorted(ecommerce.all_v, \n                               key=lambda v: ecommerce.degree_v(v), \n                               reverse=True)\nfor i, product_id in enumerate(products_by_popularity, 1):\n    info = ecommerce.v(product_id)\n    purchases = ecommerce.degree_v(product_id)\n    print(f\"  {i}. {info['name']} - {purchases} \u6b21\u8d2d\u4e70 (${info['price']})\")\n\n# \u5206\u6790\u5ba2\u6237\u7c7b\u578b\nprint(f\"\\n\ud83d\udc65 \u5ba2\u6237\u7c7b\u578b\u5206\u6790\uff1a\")\ncustomer_types = {}\nfor edge_id in ecommerce.all_e:\n    edge_data = ecommerce.e(edge_id)\n    customer_type = edge_data.get('customer_type', '\u672a\u77e5')\n    if customer_type not in customer_types:\n        customer_types[customer_type] = 0\n    customer_types[customer_type] += 1\n\nfor customer_type, count in customer_types.items():\n    print(f\"  \u2022 {customer_type}: {count} \u6b21\u8d2d\u4e70\")\n\nprint(\"\\n\" + \"=\" * 45)\nprint(\"\ud83d\uded2 \u542f\u52a8\u8d2d\u4e70\u6a21\u5f0f\u53ef\u89c6\u5316\uff08\u6309 Ctrl+C \u5173\u95ed\uff09\")\necommerce.draw()\n</code></pre>"},{"location":"zh/examples/visualization-examples/#_3","title":"\ud83c\udfa8 \u53ef\u89c6\u5316\u5b9a\u5236\u6280\u5de7","text":""},{"location":"zh/examples/visualization-examples/#1_1","title":"1. \u6309\u5c5e\u6027\u989c\u8272\u7f16\u7801","text":"<p>\u53ef\u89c6\u5316\u4f1a\u6839\u636e\u9876\u70b9\u548c\u8d85\u8fb9\u7684\u5c5e\u6027\u81ea\u52a8\u4f7f\u7528\u4e0d\u540c\u7684\u989c\u8272\u3002</p>"},{"location":"zh/examples/visualization-examples/#2_1","title":"2. \u5c3a\u5bf8\u8868\u793a","text":"<ul> <li>\u9876\u70b9\u5927\u5c0f\uff1a\u901a\u5e38\u8868\u793a\u5ea6\u6570\uff08\u8fde\u63a5\u6570\uff09</li> <li>\u8d85\u8fb9\u7c97\u7ec6\uff1a\u8868\u793a\u8fde\u63a5\u7684\u9876\u70b9\u6570\u91cf</li> </ul>"},{"location":"zh/examples/visualization-examples/#3_1","title":"3. \u4ea4\u4e92\u529f\u80fd","text":"<ul> <li>\u60ac\u505c\uff1a\u67e5\u770b\u9876\u70b9\u548c\u8d85\u8fb9\u7684\u8be6\u7ec6\u4fe1\u606f</li> <li>\u70b9\u51fb\uff1a\u9009\u62e9\u5143\u7d20\u4ee5\u7a81\u51fa\u663e\u793a\u76f8\u5173\u7ec4\u4ef6</li> <li>\u62d6\u62fd\uff1a\u91cd\u65b0\u6392\u5217\u5e03\u5c40\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u89c6\u56fe</li> <li>\u7f29\u653e\uff1a\u4f7f\u7528\u9f20\u6807\u6eda\u8f6e\u8fdb\u884c\u7f29\u653e</li> </ul>"},{"location":"zh/examples/visualization-examples/#4","title":"4. \u5e03\u5c40\u7b97\u6cd5","text":"<p>\u53ef\u89c6\u5316\u9ed8\u8ba4\u4f7f\u7528\u529b\u5bfc\u5411\u5e03\u5c40\uff0c\u7279\u70b9\uff1a - \u5c06\u76f8\u5173\u9876\u70b9\u805a\u96c6\u5728\u4e00\u8d77 - \u6700\u5c0f\u5316\u8fb9\u7684\u4ea4\u53c9 - \u521b\u5efa\u7f8e\u89c2\u7684\u6392\u5217</p>"},{"location":"zh/examples/visualization-examples/#5","title":"5. \u8de8\u5e73\u53f0\u517c\u5bb9\u6027 \ud83c\udd95","text":""},{"location":"zh/examples/visualization-examples/#windows","title":"Windows \u7528\u6237\u6ce8\u610f\u4e8b\u9879","text":"<p>\u5728 Windows \u7cfb\u7edf\u4e0a\u4f7f\u7528 <code>draw()</code> \u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u4f18\u5316\u4e86 Ctrl+C \u5904\u7406\uff1a</p> <pre><code># \u57fa\u672c\u7528\u6cd5\uff08\u963b\u585e\u6a21\u5f0f\uff09\nhg.draw()  # \u6309 Ctrl+C \u505c\u6b62\u670d\u52a1\u5668\n\n# \u975e\u963b\u585e\u6a21\u5f0f\uff08\u63a8\u8350\u7528\u4e8e\u811a\u672c\u548c\u81ea\u52a8\u5316\uff09\nviewer = hg.draw(blocking=False)\n# \u6267\u884c\u5176\u4ed6\u64cd\u4f5c...\nviewer.stop_server()  # \u624b\u52a8\u505c\u6b62\u670d\u52a1\u5668\n</code></pre>"},{"location":"zh/examples/visualization-examples/#_4","title":"\u5e73\u53f0\u5dee\u5f02","text":"\u64cd\u4f5c\u7cfb\u7edf Ctrl+C \u884c\u4e3a \u63a8\u8350\u4f7f\u7528\u65b9\u5f0f Windows \u2705 \u4f18\u5316\u540e\u6b63\u5e38\u5de5\u4f5c \u4e24\u79cd\u6a21\u5f0f\u5747\u53ef macOS/Linux \u2705 \u539f\u751f\u652f\u6301\u826f\u597d \u9ed8\u8ba4\u963b\u585e\u6a21\u5f0f"},{"location":"zh/examples/visualization-examples/#_5","title":"\u4f7f\u7528\u5efa\u8bae","text":"<pre><code># 1. \u4ea4\u4e92\u5f0f\u63a2\u7d22\uff08\u63a8\u8350\u963b\u585e\u6a21\u5f0f\uff09\nhg.draw(port=8080, blocking=True)\n\n# 2. \u811a\u672c\u81ea\u52a8\u5316\uff08\u63a8\u8350\u975e\u963b\u585e\u6a21\u5f0f\uff09\nviewer = hg.draw(port=8080, blocking=False)\n# \u6267\u884c\u5176\u4ed6\u5206\u6790...\ntime.sleep(30)  # \u8ba9\u7528\u6237\u6709\u65f6\u95f4\u67e5\u770b\nviewer.stop_server()\n\n# 3. Jupyter Notebook \u4e2d\u4f7f\u7528\nviewer = hg.draw(blocking=False)  # \u4e0d\u963b\u585e\u5355\u5143\u683c\u6267\u884c\n</code></pre>"},{"location":"zh/examples/visualization-examples/#_6","title":"\ud83d\udd0d \u901a\u8fc7\u53ef\u89c6\u5316\u8fdb\u884c\u5206\u6790","text":""},{"location":"zh/examples/visualization-examples/#_7","title":"\u8bc6\u522b\u6a21\u5f0f","text":"<ol> <li>\u96c6\u7fa4\uff1a\u7d27\u5bc6\u8fde\u63a5\u7684\u9876\u70b9\u7fa4</li> <li>\u4e2d\u5fc3\u8282\u70b9\uff1a\u6709\u5f88\u591a\u8fde\u63a5\u7684\u9876\u70b9\uff08\u9ad8\u5ea6\u6570\uff09</li> <li>\u6865\u6881\uff1a\u8fde\u63a5\u4e0d\u540c\u96c6\u7fa4\u7684\u8d85\u8fb9</li> <li>\u5f02\u5e38\u503c\uff1a\u5b64\u7acb\u6216\u5f88\u5c11\u8fde\u63a5\u7684\u9876\u70b9</li> </ol>"},{"location":"zh/examples/visualization-examples/#_8","title":"\u7f51\u7edc\u6307\u6807\u53ef\u89c6\u5316","text":"<pre><code># \u793a\u4f8b\uff1a\u901a\u8fc7\u53ef\u89c6\u5316\u5206\u6790\u7f51\u7edc\u4e2d\u5fc3\u6027\ndef analyze_network_visually(hg):\n    print(\"\ud83c\udfaf \u7f51\u7edc\u5206\u6790\uff1a\")\n\n    # \u5ea6\u5206\u5e03\n    degrees = [hg.degree_v(v) for v in hg.all_v]\n    print(f\"\ud83d\udcca \u5e73\u5747\u5ea6\u6570\uff1a{sum(degrees)/len(degrees):.2f}\")\n\n    # \u4e2d\u5fc3\u8282\u70b9\u8bc6\u522b\n    hubs = [v for v in hg.all_v if hg.degree_v(v) &gt; sum(degrees)/len(degrees)]\n    print(f\"\ud83c\udf1f \u7f51\u7edc\u4e2d\u5fc3\u8282\u70b9\uff1a{len(hubs)} \u4e2a\u9876\u70b9\")\n\n    # \u8d85\u8fb9\u5927\u5c0f\u5206\u5e03\n    edge_sizes = [hg.degree_e(e) for e in hg.all_e]\n    print(f\"\ud83d\udd17 \u5e73\u5747\u8d85\u8fb9\u5927\u5c0f\uff1a{sum(edge_sizes)/len(edge_sizes):.2f}\")\n\n    # \u5e26\u5206\u6790\u7684\u53ef\u89c6\u5316\n    hg.draw()\n\n# \u5e94\u7528\u4e8e\u4e0a\u8ff0\u4efb\u4f55\u793a\u4f8b\nanalyze_network_visually(social_network)\n</code></pre>"},{"location":"zh/examples/visualization-examples/#_9","title":"\ud83d\ude80 \u9ad8\u7ea7\u53ef\u89c6\u5316\u6280\u672f","text":""},{"location":"zh/examples/visualization-examples/#_10","title":"\u52a8\u6001\u53ef\u89c6\u5316","text":"<p>\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5feb\u7167\uff1a</p> <pre><code># \u793a\u4f8b\uff1a\u6f14\u5316\u7684\u793e\u4ea4\u7f51\u7edc\ndef create_network_snapshots(base_network, time_periods):\n    snapshots = []\n    for period in time_periods:\n        # \u4e3a\u6bcf\u4e2a\u65f6\u95f4\u6bb5\u521b\u5efa\u8fc7\u6ee4\u7684\u7f51\u7edc\n        period_network = HypergraphDB()\n\n        # \u6dfb\u52a0\u9876\u70b9\uff08\u4eba\u5458\u4e0d\u53d8\uff09\n        for v in base_network.all_v:\n            period_network.add_v(v, base_network.v(v))\n\n        # \u53ea\u6dfb\u52a0\u6b64\u65f6\u95f4\u6bb5\u7684\u8d85\u8fb9\n        for e in base_network.all_e:\n            edge_data = base_network.e(e)\n            if edge_data.get('date', '') &gt;= period['start'] and edge_data.get('date', '') &lt;= period['end']:\n                period_network.add_e(base_network.e_v(e), edge_data)\n\n        snapshots.append((period['name'], period_network))\n\n    return snapshots\n\n# \u521b\u5efa\u5b63\u5ea6\u5feb\u7167\nquarters = [\n    {\"name\": \"2024\u5e74\u7b2c\u4e00\u5b63\u5ea6\", \"start\": \"2024-01-01\", \"end\": \"2024-03-31\"},\n    {\"name\": \"2024\u5e74\u7b2c\u4e8c\u5b63\u5ea6\", \"start\": \"2024-04-01\", \"end\": \"2024-06-30\"}\n]\n\n# \u53ef\u89c6\u5316\u6f14\u5316\nfor quarter_name, network in create_network_snapshots(social_network, quarters):\n    print(f\"\ud83d\udcc5 {quarter_name}\uff1a\")\n    network.draw()\n</code></pre> <p>\u8fd9\u79cd\u53ef\u89c6\u5316\u65b9\u6cd5\u5e2e\u52a9\u60a8\u7406\u89e3\u8d85\u56fe\u6570\u636e\u4e2d\u590d\u6742\u5173\u7cfb\u7684\u7ed3\u6784\u548c\u6f14\u5316\uff01</p>"},{"location":"zh/getting-started/hypergraph-basics/","title":"\u8d85\u56fe\u57fa\u7840","text":"<p>\u5173\u4e8e\u8d85\u56fe</p> <p>\u8d85\u56fe\u662f\u56fe\u8bba\u7684\u4e00\u4e2a\u81ea\u7136\u63a8\u5e7f\uff0c\u5176\u4e2d\u7684\u8fb9\uff08\u79f0\u4e3a\u8d85\u8fb9\uff09\u53ef\u4ee5\u8fde\u63a5\u4efb\u610f\u6570\u91cf\u7684\u9876\u70b9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e24\u4e2a\u9876\u70b9\u3002\u8fd9\u4f7f\u5f97\u8d85\u56fe\u7279\u522b\u9002\u5408\u5efa\u6a21\u590d\u6742\u7684\u591a\u5143\u5173\u7cfb\u3002</p>"},{"location":"zh/getting-started/hypergraph-basics/#_2","title":"\u4ec0\u4e48\u662f\u8d85\u56fe\uff1f","text":""},{"location":"zh/getting-started/hypergraph-basics/#vs","title":"\u4f20\u7edf\u56fe vs \u8d85\u56fe","text":"<p>**\u4f20\u7edf\u56fe**\u53ea\u80fd\u8868\u793a\u4e8c\u5143\u5173\u7cfb\uff1a <pre><code>Alice \u2190\u2192 Bob (\u4e00\u6761\u8fb9)\nBob \u2190\u2192 Charlie (\u53e6\u4e00\u6761\u8fb9)\nAlice \u2190\u2192 Charlie (\u7b2c\u4e09\u6761\u8fb9)\n</code></pre></p> <p>**\u8d85\u56fe**\u53ef\u4ee5\u81ea\u7136\u5730\u8868\u793a\u591a\u5143\u5173\u7cfb\uff1a <pre><code>{Alice, Bob, Charlie} \u2192 \u9879\u76ee\u56e2\u961f (\u4e00\u6761\u8d85\u8fb9)\n</code></pre></p>"},{"location":"zh/getting-started/hypergraph-basics/#_3","title":"\u5f62\u5f0f\u5316\u5b9a\u4e49","text":"<p>\u4e00\u4e2a\u8d85\u56fe H = (V, E) \u5305\u542b\uff1a - V: \u9876\u70b9\u96c6\u5408 - E: \u8d85\u8fb9\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u6761\u8d85\u8fb9 e \u2208 E \u662f V \u7684\u4e00\u4e2a\u5b50\u96c6</p>"},{"location":"zh/getting-started/hypergraph-basics/#_4","title":"\u8d85\u56fe\u7684\u4f18\u52bf","text":""},{"location":"zh/getting-started/hypergraph-basics/#1","title":"1. \u81ea\u7136\u5efa\u6a21\u590d\u6742\u5173\u7cfb","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u5b66\u672f\u5408\u4f5c\u7f51\u7edc\u793a\u4f8b\nhg = HypergraphDB()\n\n# \u7814\u7a76\u4eba\u5458\nhg.add_v(\"alice\", {\"name\": \"Alice Chen\", \"field\": \"ML\"})\nhg.add_v(\"bob\", {\"name\": \"Bob Smith\", \"field\": \"NLP\"})  \nhg.add_v(\"charlie\", {\"name\": \"Charlie Wang\", \"field\": \"CV\"})\n\n# \u4e00\u7bc7\u8bba\u6587\u7684\u591a\u4f4d\u5171\u540c\u4f5c\u8005 - \u7528\u4e00\u6761\u8d85\u8fb9\u8868\u793a\nhg.add_e((\"alice\", \"bob\", \"charlie\"), {\n    \"paper\": \"\u591a\u6a21\u6001\u6df1\u5ea6\u5b66\u4e60\u7efc\u8ff0\",\n    \"venue\": \"Nature AI\",\n    \"year\": 2024\n})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#2","title":"2. \u51cf\u5c11\u6570\u636e\u5197\u4f59","text":"<p>\u4f20\u7edf\u56fe\u65b9\u6cd5\uff08\u9700\u8981\u591a\u6761\u8fb9\uff09\uff1a <pre><code># \u9700\u8981 3 \u6761\u8fb9\u8868\u793a 3 \u4eba\u7684\u5408\u4f5c\ngraph.add_edge(\"alice\", \"bob\", {\"paper\": \"\u8bba\u6587A\"})\ngraph.add_edge(\"bob\", \"charlie\", {\"paper\": \"\u8bba\u6587A\"})  \ngraph.add_edge(\"alice\", \"charlie\", {\"paper\": \"\u8bba\u6587A\"})\n</code></pre></p> <p>\u8d85\u56fe\u65b9\u6cd5\uff08\u53ea\u9700\u8981 1 \u6761\u8d85\u8fb9\uff09\uff1a <pre><code># \u53ea\u9700\u8981 1 \u6761\u8d85\u8fb9\nhypergraph.add_e((\"alice\", \"bob\", \"charlie\"), {\"paper\": \"\u8bba\u6587A\"})\n</code></pre></p>"},{"location":"zh/getting-started/hypergraph-basics/#3","title":"3. \u4fdd\u6301\u8bed\u4e49\u5b8c\u6574\u6027","text":"<p>\u8d85\u8fb9\u4fdd\u6301\u4e86\u7fa4\u4f53\u5173\u7cfb\u7684\u539f\u5b50\u6027 - \u4e09\u4eba\u56e2\u961f\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u4e0d\u662f\u4e09\u4e2a\u4e8c\u5143\u5173\u7cfb\u7684\u7ec4\u5408\u3002</p>"},{"location":"zh/getting-started/hypergraph-basics/#_5","title":"\u8d85\u56fe\u6982\u5ff5","text":""},{"location":"zh/getting-started/hypergraph-basics/#_6","title":"\u9876\u70b9\u5ea6\u6570","text":"<p>\u9876\u70b9\u7684\u5ea6\u6570\u662f\u5305\u542b\u8be5\u9876\u70b9\u7684\u8d85\u8fb9\u6570\u91cf\uff1a</p> <pre><code># Alice \u53c2\u4e0e\u4e86\u591a\u5c11\u4e2a\u9879\u76ee/\u8bba\u6587\uff1f\nalice_degree = hg.degree_v(\"alice\")\nprint(f\"Alice \u7684\u5ea6\u6570: {alice_degree}\")\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_7","title":"\u8d85\u8fb9\u5927\u5c0f","text":"<p>\u8d85\u8fb9\u7684\u5927\u5c0f\u662f\u5176\u5305\u542b\u7684\u9876\u70b9\u6570\u91cf\uff1a</p> <pre><code># \u8fd9\u4e2a\u9879\u76ee\u56e2\u961f\u6709\u591a\u5c11\u4eba\uff1f\nteam_edge = (\"alice\", \"bob\", \"charlie\")\nteam_size = hg.degree_e(team_edge)\nprint(f\"\u56e2\u961f\u89c4\u6a21: {team_size}\")\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_8","title":"\u90bb\u63a5\u5173\u7cfb","text":"<p>\u5728\u8d85\u56fe\u4e2d\uff0c\u4e24\u4e2a\u9876\u70b9\u662f\u90bb\u63a5\u7684\uff0c\u5982\u679c\u5b83\u4eec\u5171\u540c\u51fa\u73b0\u5728\u81f3\u5c11\u4e00\u6761\u8d85\u8fb9\u4e2d\uff1a</p> <pre><code># Alice \u7684\u6240\u6709\u5408\u4f5c\u4f19\u4f34\nalice_neighbors = hg.nbr_v(\"alice\")\nprint(f\"Alice \u7684\u5408\u4f5c\u4f19\u4f34: {alice_neighbors}\")\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_9","title":"\u8d85\u56fe\u7684\u7c7b\u578b","text":""},{"location":"zh/getting-started/hypergraph-basics/#1-k-","title":"1. k-\u5747\u5300\u8d85\u56fe","text":"<p>\u6240\u6709\u8d85\u8fb9\u90fd\u6070\u597d\u5305\u542b k \u4e2a\u9876\u70b9\uff1a</p> <pre><code># 3-\u5747\u5300\u8d85\u56fe\uff1a\u6240\u6709\u56e2\u961f\u90fd\u662f3\u4eba\nhg = HypergraphDB()\nhg.add_e((\"a\", \"b\", \"c\"), {\"team\": \"Alpha\"})\nhg.add_e((\"d\", \"e\", \"f\"), {\"team\": \"Beta\"})\nhg.add_e((\"g\", \"h\", \"i\"), {\"team\": \"Gamma\"})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#2_1","title":"2. \u7b80\u5355\u8d85\u56fe","text":"<p>\u6ca1\u6709\u91cd\u590d\u7684\u8d85\u8fb9\uff0c\u4e14\u4e0d\u5305\u542b\u7a7a\u8d85\u8fb9\uff1a</p> <pre><code># \u6bcf\u4e2a\u8d85\u8fb9\u90fd\u662f\u552f\u4e00\u7684\nhg.add_e((\"alice\", \"bob\"), {\"project\": \"A\"})\nhg.add_e((\"alice\", \"bob\"), {\"project\": \"B\"})  # \u8fd9\u4f1a\u66f4\u65b0\u73b0\u6709\u8d85\u8fb9\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#3_1","title":"3. \u52a0\u6743\u8d85\u56fe","text":"<p>\u8d85\u8fb9\u548c/\u6216\u9876\u70b9\u5e26\u6709\u6743\u91cd\uff1a</p> <pre><code>hg.add_v(\"alice\", {\"expertise\": 0.9})\nhg.add_e((\"alice\", \"bob\"), {\"collaboration_strength\": 0.8})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_10","title":"\u5b9e\u9645\u5e94\u7528\u573a\u666f","text":""},{"location":"zh/getting-started/hypergraph-basics/#1_1","title":"1. \u793e\u4ea4\u7f51\u7edc\u5206\u6790","text":"<pre><code># \u7fa4\u4f53\u6d3b\u52a8\u548c\u591a\u65b9\u4e92\u52a8\nsocial_hg = HypergraphDB()\n\n# \u670b\u53cb\u805a\u4f1a\nsocial_hg.add_e((\"alice\", \"bob\", \"charlie\", \"diana\"), {\n    \"activity\": \"\u805a\u9910\",\n    \"date\": \"2024-01-15\",\n    \"location\": \"\u9910\u5385A\"\n})\n\n# \u5de5\u4f5c\u56e2\u961f\nsocial_hg.add_e((\"alice\", \"bob\", \"eve\"), {\n    \"activity\": \"\u9879\u76ee\u4f1a\u8bae\",\n    \"project\": \"\u79fb\u52a8\u5e94\u7528\u5f00\u53d1\"\n})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#2_2","title":"2. \u751f\u7269\u4fe1\u606f\u5b66","text":"<pre><code># \u86cb\u767d\u8d28\u76f8\u4e92\u4f5c\u7528\u7f51\u7edc\nbio_hg = HypergraphDB()\n\n# \u86cb\u767d\u8d28\u590d\u5408\u4f53\uff08\u591a\u4e2a\u86cb\u767d\u8d28\u7684\u76f8\u4e92\u4f5c\u7528\uff09\nbio_hg.add_e((\"protein1\", \"protein2\", \"protein3\"), {\n    \"complex\": \"\u8f6c\u5f55\u56e0\u5b50\u590d\u5408\u4f53\",\n    \"function\": \"\u57fa\u56e0\u8f6c\u5f55\u8c03\u63a7\",\n    \"location\": \"\u7ec6\u80de\u6838\"\n})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#3_2","title":"3. \u63a8\u8350\u7cfb\u7edf","text":"<pre><code># \u7528\u6237-\u7269\u54c1-\u4e0a\u4e0b\u6587\u7684\u4e09\u5143\u5173\u7cfb\nrec_hg = HypergraphDB()\n\n# \u7528\u6237\u5728\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u5bf9\u7269\u54c1\u7684\u4ea4\u4e92\nrec_hg.add_e((\"user123\", \"movie456\", \"weekend\", \"home\"), {\n    \"interaction\": \"\u89c2\u770b\",\n    \"rating\": 4.5,\n    \"timestamp\": \"2024-01-20\"\n})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#4","title":"4. \u77e5\u8bc6\u56fe\u8c31","text":"<pre><code># \u590d\u6742\u7684\u77e5\u8bc6\u5173\u7cfb\nkg_hg = HypergraphDB()\n\n# \u591a\u5143\u5173\u7cfb\uff1a\u8c01\u5728\u4f55\u65f6\u4f55\u5730\u505a\u4e86\u4ec0\u4e48\nkg_hg.add_e((\"\u7231\u56e0\u65af\u5766\", \"\u76f8\u5bf9\u8bba\", \"1905\u5e74\", \"\u745e\u58eb\"), {\n    \"relation\": \"\u53d1\u73b0\",\n    \"impact\": \"\u9769\u547d\u6027\",\n    \"field\": \"\u7269\u7406\u5b66\"\n})\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_11","title":"\u8d85\u56fe\u5206\u6790","text":""},{"location":"zh/getting-started/hypergraph-basics/#_12","title":"\u4e2d\u5fc3\u6027\u5ea6\u91cf","text":"<pre><code>def hypergraph_centrality(hg, vertex):\n    \"\"\"\u8ba1\u7b97\u8d85\u56fe\u4e2d\u9876\u70b9\u7684\u4e2d\u5fc3\u6027\"\"\"\n    # \u57fa\u4e8e\u5ea6\u6570\u7684\u4e2d\u5fc3\u6027\n    degree_centrality = hg.degree_v(vertex)\n\n    # \u57fa\u4e8e\u8d85\u8fb9\u5927\u5c0f\u7684\u52a0\u6743\u4e2d\u5fc3\u6027\n    weighted_centrality = 0\n    for edge in hg.nbr_e_of_v(vertex):\n        edge_size = hg.degree_e(edge)\n        weighted_centrality += 1.0 / edge_size  # \u5927\u56e2\u961f\u4e2d\u7684\u5f71\u54cd\u529b\u66f4\u5206\u6563\n\n    return {\n        \"degree\": degree_centrality,\n        \"weighted\": weighted_centrality\n    }\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_13","title":"\u793e\u533a\u68c0\u6d4b","text":"<pre><code>def find_communities(hg):\n    \"\"\"\u57fa\u4e8e\u8d85\u8fb9\u7684\u7b80\u5355\u793e\u533a\u68c0\u6d4b\"\"\"\n    communities = []\n\n    for edge in hg.all_e:\n        members = hg.nbr_v_of_e(edge)\n        edge_info = hg.e(edge)\n\n        communities.append({\n            \"members\": list(members),\n            \"size\": len(members),\n            \"metadata\": edge_info\n        })\n\n    return communities\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#vs_1","title":"\u8d85\u56fe vs \u4f20\u7edf\u56fe\u7684\u9009\u62e9","text":""},{"location":"zh/getting-started/hypergraph-basics/#_14","title":"\u9009\u62e9\u8d85\u56fe\u7684\u60c5\u51b5","text":"<ul> <li>\u2705 \u7fa4\u4f53\u5173\u7cfb: \u9700\u8981\u8868\u793a\u591a\u65b9\u53c2\u4e0e\u7684\u5173\u7cfb</li> <li>\u2705 \u539f\u5b50\u6027: \u5173\u7cfb\u7684\u5b8c\u6574\u6027\u5f88\u91cd\u8981</li> <li>\u2705 \u7b80\u5316\u5efa\u6a21: \u51cf\u5c11\u8fb9\u7684\u6570\u91cf\u548c\u590d\u6742\u6027</li> <li>\u2705 \u8bed\u4e49\u4fdd\u6301: \u9700\u8981\u4fdd\u6301\u5173\u7cfb\u7684\u539f\u59cb\u8bed\u4e49</li> </ul>"},{"location":"zh/getting-started/hypergraph-basics/#_15","title":"\u9009\u62e9\u4f20\u7edf\u56fe\u7684\u60c5\u51b5","text":"<ul> <li>\u2705 \u4e8c\u5143\u5173\u7cfb: \u4e3b\u8981\u662f\u6210\u5bf9\u7684\u5173\u7cfb</li> <li>\u2705 \u6210\u719f\u7b97\u6cd5: \u9700\u8981\u4f7f\u7528\u5927\u91cf\u73b0\u6709\u7684\u56fe\u7b97\u6cd5</li> <li>\u2705 \u6027\u80fd\u8981\u6c42: \u5bf9\u8ba1\u7b97\u6548\u7387\u6709\u4e25\u683c\u8981\u6c42</li> <li>\u2705 \u5de5\u5177\u652f\u6301: \u9700\u8981\u4f7f\u7528\u73b0\u6709\u7684\u56fe\u6570\u636e\u5e93</li> </ul>"},{"location":"zh/getting-started/hypergraph-basics/#_16","title":"\u8d85\u56fe\u7406\u8bba\u57fa\u7840","text":""},{"location":"zh/getting-started/hypergraph-basics/#_17","title":"\u5bf9\u5076\u8d85\u56fe","text":"<p>\u6bcf\u4e2a\u8d85\u56fe\u90fd\u6709\u4e00\u4e2a\u5bf9\u5076\u8d85\u56fe\uff0c\u5176\u4e2d\uff1a - \u539f\u8d85\u56fe\u7684\u9876\u70b9\u53d8\u6210\u5bf9\u5076\u8d85\u56fe\u7684\u8d85\u8fb9 - \u539f\u8d85\u56fe\u7684\u8d85\u8fb9\u53d8\u6210\u5bf9\u5076\u8d85\u56fe\u7684\u9876\u70b9</p> <pre><code>def create_dual_hypergraph(original_hg):\n    \"\"\"\u521b\u5efa\u5bf9\u5076\u8d85\u56fe\"\"\"\n    dual_hg = HypergraphDB()\n\n    # \u539f\u8d85\u56fe\u7684\u6bcf\u6761\u8d85\u8fb9\u53d8\u6210\u5bf9\u5076\u8d85\u56fe\u7684\u4e00\u4e2a\u9876\u70b9\n    for edge in original_hg.all_e:\n        edge_str = str(edge)\n        edge_data = original_hg.e(edge)\n        dual_hg.add_v(edge_str, edge_data)\n\n    # \u539f\u8d85\u56fe\u7684\u6bcf\u4e2a\u9876\u70b9\u53d8\u6210\u5bf9\u5076\u8d85\u56fe\u7684\u4e00\u6761\u8d85\u8fb9\n    for vertex in original_hg.all_v:\n        incident_edges = original_hg.nbr_e_of_v(vertex)\n        edge_strs = [str(e) for e in incident_edges]\n        vertex_data = original_hg.v(vertex)\n        dual_hg.add_e(tuple(edge_strs), vertex_data)\n\n    return dual_hg\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_18","title":"\u8d85\u56fe\u7684\u77e9\u9635\u8868\u793a","text":"<p>\u8d85\u56fe\u53ef\u4ee5\u7528\u5173\u8054\u77e9\u9635\u8868\u793a\uff0c\u5176\u4e2d\u884c\u4ee3\u8868\u9876\u70b9\uff0c\u5217\u4ee3\u8868\u8d85\u8fb9\uff1a</p> <pre><code>import numpy as np\n\ndef hypergraph_incidence_matrix(hg):\n    \"\"\"\u751f\u6210\u8d85\u56fe\u7684\u5173\u8054\u77e9\u9635\"\"\"\n    vertices = list(hg.all_v)\n    edges = list(hg.all_e)\n\n    matrix = np.zeros((len(vertices), len(edges)))\n\n    for j, edge in enumerate(edges):\n        edge_vertices = hg.nbr_v_of_e(edge)\n        for vertex in edge_vertices:\n            i = vertices.index(vertex)\n            matrix[i, j] = 1\n\n    return matrix, vertices, edges\n</code></pre>"},{"location":"zh/getting-started/hypergraph-basics/#_19","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u8d85\u56fe\u7684\u57fa\u7840\u6982\u5ff5\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ul> <li>\u67e5\u770b\u5b9e\u9645\u793a\u4f8b: \u5b66\u4e60\u5982\u4f55\u5728\u5b9e\u9645\u573a\u666f\u4e2d\u5e94\u7528\u8d85\u56fe</li> <li>\u63a2\u7d22 API: \u4e86\u89e3\u6240\u6709\u53ef\u7528\u7684\u65b9\u6cd5\u548c\u529f\u80fd</li> <li>\u53ef\u89c6\u5316\u60a8\u7684\u6570\u636e: \u4f7f\u7528\u4ea4\u4e92\u5f0f\u5de5\u5177\u63a2\u7d22\u8d85\u56fe\u7ed3\u6784</li> </ul> <p>\u8d85\u56fe\u4e3a\u590d\u6742\u5173\u7cfb\u5efa\u6a21\u63d0\u4f9b\u4e86\u5f3a\u5927\u800c\u81ea\u7136\u7684\u5de5\u5177\uff01\ud83c\udfaf</p>"},{"location":"zh/getting-started/installation/","title":"\u5b89\u88c5\u6307\u5357","text":""},{"location":"zh/getting-started/installation/#_2","title":"\u7a33\u5b9a\u7248\u672c","text":"<p>Hypergraph-DB \u7684\u7a33\u5b9a\u7248\u672c\u53ef\u5728 PyPI \u4e0a\u83b7\u5f97\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>pip</code> \u5b89\u88c5\uff1a</p> <pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"zh/getting-started/installation/#_3","title":"\u5f00\u53d1\u7248\u5b89\u88c5","text":"<p>\u5982\u9700\u5f00\u53d1\u6216\u83b7\u53d6\u6700\u65b0\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u4ece GitHub \u4ed3\u5e93\u5b89\u88c5\uff1a</p> <pre><code>pip install git+https://github.com/iMoonLab/Hypergraph-DB.git\n</code></pre> <p>\u5f00\u53d1\u7248\u672c</p> <p>\u5f00\u53d1\u7248\u672c\u53ef\u80fd\u4e0d\u7a33\u5b9a\u4e14\u672a\u5b8c\u5168\u6d4b\u8bd5\u3002\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u5728 GitHub Issues \u4e2d\u62a5\u544a\u3002</p>"},{"location":"zh/getting-started/installation/#uv","title":"\u4f7f\u7528 uv\uff08\u63a8\u8350\u7528\u4e8e\u5f00\u53d1\uff09","text":"<p>\u4e3a\u4e86\u66f4\u5feb\u7684\u4f9d\u8d56\u7ba1\u7406\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528 uv\uff1a</p>"},{"location":"zh/getting-started/installation/#uv_1","title":"\u5b89\u88c5 uv","text":"WindowsmacOS/Linux <pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"zh/getting-started/installation/#_4","title":"\u514b\u9686\u548c\u8bbe\u7f6e","text":"<pre><code># \u514b\u9686\u4ed3\u5e93\ngit clone https://github.com/iMoonLab/Hypergraph-DB.git\ncd Hypergraph-DB\n\n# \u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\nuv sync --extra dev\n\n# \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate  # Linux/macOS\n# \u6216\n.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"zh/getting-started/installation/#_5","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u9a8c\u8bc1 Hypergraph-DB \u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a</p> <pre><code>import hyperdb\nprint(f\"Hypergraph-DB \u7248\u672c: {hyperdb.__version__}\")\n\n# \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u8d85\u56fe\nhg = hyperdb.HypergraphDB()\nhg.add_v(\"A\", {\"name\": \"\u9876\u70b9A\"})\nhg.add_v(\"B\", {\"name\": \"\u9876\u70b9B\"})\nhg.add_e((\"A\", \"B\"), {\"type\": \"\u8fde\u63a5\"})\n\nprint(f\"\u8d85\u56fe\u5df2\u521b\u5efa\uff0c\u5305\u542b {hg.num_v} \u4e2a\u9876\u70b9\u548c {hg.num_e} \u6761\u8d85\u8fb9\")\n</code></pre>"},{"location":"zh/getting-started/installation/#_6","title":"\u7cfb\u7edf\u8981\u6c42","text":""},{"location":"zh/getting-started/installation/#_7","title":"\u6700\u4f4e\u8981\u6c42","text":"<ul> <li>Python: &gt;= 3.10</li> <li>\u64cd\u4f5c\u7cfb\u7edf: Windows 10+, macOS 10.14+, Linux (Ubuntu 18.04+)</li> <li>\u5185\u5b58: \u63a8\u8350 &gt;= 4GB</li> <li>\u786c\u76d8\u7a7a\u95f4: &gt;= 100MB</li> </ul>"},{"location":"zh/getting-started/installation/#_8","title":"\u63a8\u8350\u914d\u7f6e","text":"<ul> <li>Python: 3.11 \u6216 3.12</li> <li>\u64cd\u4f5c\u7cfb\u7edf: \u6700\u65b0\u7a33\u5b9a\u7248\u672c</li> <li>\u5185\u5b58: &gt;= 8GB\uff08\u7528\u4e8e\u5904\u7406\u5927\u578b\u8d85\u56fe\uff09</li> <li>\u786c\u76d8\u7a7a\u95f4: &gt;= 1GB\uff08\u5305\u62ec\u6587\u6863\u548c\u793a\u4f8b\uff09</li> </ul>"},{"location":"zh/getting-started/installation/#_9","title":"\u4f9d\u8d56\u9879","text":"<p>Hypergraph-DB \u5177\u6709\u6700\u5c0f\u7684\u6838\u5fc3\u4f9d\u8d56\uff1a</p>"},{"location":"zh/getting-started/installation/#_10","title":"\u6838\u5fc3\u4f9d\u8d56","text":"<pre><code># \u65e0\u989d\u5916\u4f9d\u8d56 - \u7eaf Python \u5b9e\u73b0\n</code></pre>"},{"location":"zh/getting-started/installation/#_11","title":"\u53ef\u9009\u4f9d\u8d56","text":"<pre><code># \u53ef\u89c6\u5316\u529f\u80fd\uff08\u81ea\u52a8\u5b89\u88c5\uff09\n\"Flask&gt;=2.0.0\"  # Web \u670d\u52a1\u5668\n\"Jinja2&gt;=3.0.0\"  # \u6a21\u677f\u5f15\u64ce\n\n# \u5f00\u53d1\u5de5\u5177\n\"pytest&gt;=6.0\"    # \u6d4b\u8bd5\u6846\u67b6\n\"black\"           # \u4ee3\u7801\u683c\u5f0f\u5316\n\"isort\"           # \u5bfc\u5165\u6392\u5e8f\n\"mkdocs\"          # \u6587\u6863\u751f\u6210\n</code></pre>"},{"location":"zh/getting-started/installation/#_12","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/getting-started/installation/#_13","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>\u95ee\u9898: <code>pip install hypergraph-db</code> \u5931\u8d25</p> <p>\u89e3\u51b3\u65b9\u6848: 1. \u786e\u4fdd\u60a8\u7684 Python \u7248\u672c &gt;= 3.10 2. \u66f4\u65b0 pip: <code>pip install --upgrade pip</code> 3. \u4f7f\u7528\u865a\u62df\u73af\u5883: <code>python -m venv venv &amp;&amp; source venv/bin/activate</code></p> <p>\u95ee\u9898: \u5bfc\u5165\u9519\u8bef</p> <p>\u89e3\u51b3\u65b9\u6848: <pre><code># \u68c0\u67e5\u5b89\u88c5\npip list | grep hypergraph\n\n# \u91cd\u65b0\u5b89\u88c5\npip uninstall hypergraph-db\npip install hypergraph-db\n</code></pre></p> <p>\u95ee\u9898: \u53ef\u89c6\u5316\u65e0\u6cd5\u5de5\u4f5c</p> <p>\u89e3\u51b3\u65b9\u6848: 1. \u68c0\u67e5\u9632\u706b\u5899\u8bbe\u7f6e 2. \u786e\u4fdd\u7aef\u53e3 8080 \u672a\u88ab\u5360\u7528 3. \u624b\u52a8\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee <code>http://localhost:8080</code></p>"},{"location":"zh/getting-started/installation/#_14","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u679c\u60a8\u9047\u5230\u5b89\u88c5\u95ee\u9898\uff0c\u8bf7\uff1a</p> <ol> <li>\u68c0\u67e5 GitHub Issues</li> <li>\u521b\u5efa\u65b0\u7684 issue\uff0c\u5305\u542b\uff1a</li> <li>Python \u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u4fe1\u606f</li> <li>\u5b8c\u6574\u7684\u9519\u8bef\u4fe1\u606f</li> <li>\u5b89\u88c5\u6b65\u9aa4</li> </ol>"},{"location":"zh/getting-started/installation/#_15","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u67e5\u770b\u4ee5\u4e0b\u8d44\u6e90\u5f00\u59cb\u4f7f\u7528\uff1a</p> <ul> <li>\u5feb\u901f\u5f00\u59cb: \u57fa\u672c\u7528\u6cd5\u548c\u793a\u4f8b</li> <li>\u8d85\u56fe\u57fa\u7840: \u4e86\u89e3\u8d85\u56fe\u6982\u5ff5</li> <li>API \u53c2\u8003: \u5b8c\u6574\u7684 API \u6587\u6863</li> <li>\u53ef\u89c6\u5316\u6307\u5357: \u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\u529f\u80fd</li> </ul>"},{"location":"zh/getting-started/quickstart/","title":"\u5feb\u901f\u5f00\u59cb\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5c06\u5728\u51e0\u5206\u949f\u5185\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528 Hypergraph-DB\uff01</p>"},{"location":"zh/getting-started/quickstart/#_2","title":"\u5b89\u88c5","text":"<p>\u9996\u5148\uff0c\u5b89\u88c5 Hypergraph-DB\uff1a</p> <pre><code>pip install hypergraph-db\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_3","title":"\u60a8\u7684\u7b2c\u4e00\u4e2a\u8d85\u56fe","text":"<p>\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u8d85\u56fe\u6765\u8868\u793a\u5305\u542b\u7fa4\u4f53\u6d3b\u52a8\u7684\u793e\u4ea4\u7f51\u7edc\uff1a</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u65b0\u7684\u8d85\u56fe\u6570\u636e\u5e93\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u4e00\u4e9b\u4eba\u4f5c\u4e3a\u9876\u70b9\nhg.add_v(1, {\"name\": \"Alice\", \"age\": 30, \"city\": \"\u5317\u4eac\"})\nhg.add_v(2, {\"name\": \"Bob\", \"age\": 24, \"city\": \"\u4e0a\u6d77\"})\nhg.add_v(3, {\"name\": \"Charlie\", \"age\": 28, \"city\": \"\u6df1\u5733\"})\nhg.add_v(4, {\"name\": \"David\", \"age\": 35, \"city\": \"\u5e7f\u5dde\"})\n\nprint(f\"\u5df2\u6dfb\u52a0 {hg.num_v} \u4e2a\u9876\u70b9\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_4","title":"\u6dfb\u52a0\u5173\u7cfb","text":"<p>\u73b0\u5728\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e9b\u5173\u7cfb\uff08\u8d85\u8fb9\uff09\uff1a</p> <pre><code># \u4e8c\u5143\u5173\u7cfb\nhg.add_e((1, 2), {\"relation\": \"\u670b\u53cb\", \"since\": \"2020\"})\nhg.add_e((2, 3), {\"relation\": \"\u540c\u4e8b\", \"company\": \"\u79d1\u6280\u516c\u53f8\"})\n\n# \u7fa4\u4f53\u5173\u7cfb\uff08\u8d85\u56fe\u7684\u5a01\u529b\u6240\u5728\uff01\uff09\nhg.add_e((1, 2, 3), {\"relation\": \"\u5b66\u4e60\u5c0f\u7ec4\", \"subject\": \"\u673a\u5668\u5b66\u4e60\"})\nhg.add_e((1, 3, 4), {\"relation\": \"\u9879\u76ee\u56e2\u961f\", \"project\": \"\u7f51\u9875\u5e94\u7528\"})\n\nprint(f\"\u5df2\u6dfb\u52a0 {hg.num_e} \u6761\u8d85\u8fb9\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_5","title":"\u57fa\u672c\u67e5\u8be2","text":"<p>\u4f7f\u7528\u7b80\u5355\u67e5\u8be2\u63a2\u7d22\u60a8\u7684\u8d85\u56fe\uff1a</p> <pre><code># \u83b7\u53d6\u6240\u6709\u9876\u70b9\u548c\u8d85\u8fb9\nprint(\"\u6240\u6709\u9876\u70b9:\", list(hg.all_v))\nprint(\"\u6240\u6709\u8d85\u8fb9:\", list(hg.all_e))\n\n# \u67e5\u8be2\u7279\u5b9a\u9876\u70b9\u7684\u4fe1\u606f\nalice_info = hg.v(1)\nprint(f\"Alice \u7684\u4fe1\u606f: {alice_info}\")\n\n# \u67e5\u8be2\u7279\u5b9a\u8d85\u8fb9\u7684\u4fe1\u606f\nfriendship = hg.e((1, 2))\nprint(f\"\u53cb\u8c0a\u5173\u7cfb: {friendship}\")\n\n# \u83b7\u53d6\u9876\u70b9\u7684\u5ea6\u6570\uff08\u8fde\u63a5\u7684\u8d85\u8fb9\u6570\u91cf\uff09\nalice_degree = hg.degree_v(1)\nprint(f\"Alice \u7684\u5ea6\u6570: {alice_degree}\")\n\n# \u83b7\u53d6\u9876\u70b9\u7684\u90bb\u5c45\nalice_neighbors = hg.nbr_v(1)\nprint(f\"Alice \u7684\u90bb\u5c45: {alice_neighbors}\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_6","title":"\u9ad8\u7ea7\u67e5\u8be2","text":"<pre><code># \u67e5\u627e Alice \u53c2\u4e0e\u7684\u6240\u6709\u8d85\u8fb9\nalice_edges = hg.nbr_e_of_v(1)\nprint(f\"Alice \u53c2\u4e0e\u7684\u8d85\u8fb9: {alice_edges}\")\n\n# \u67e5\u627e\u7279\u5b9a\u8d85\u8fb9\u4e2d\u7684\u6240\u6709\u9876\u70b9\nstudy_group_members = hg.nbr_v_of_e((1, 2, 3))\nprint(f\"\u5b66\u4e60\u5c0f\u7ec4\u6210\u5458: {study_group_members}\")\n\n# \u68c0\u67e5\u9876\u70b9\u6216\u8d85\u8fb9\u662f\u5426\u5b58\u5728\nhas_alice = hg.has_v(1)\nhas_friendship = hg.has_e((1, 2))\nprint(f\"Alice \u5b58\u5728: {has_alice}, \u53cb\u8c0a\u5173\u7cfb\u5b58\u5728: {has_friendship}\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_7","title":"\u6570\u636e\u64cd\u4f5c","text":"<pre><code># \u66f4\u65b0\u9876\u70b9\u6570\u636e\nhg.update_v(1, {\"age\": 31, \"job\": \"\u5de5\u7a0b\u5e08\"})\nprint(f\"\u66f4\u65b0\u540e\u7684 Alice \u4fe1\u606f: {hg.v(1)}\")\n\n# \u66f4\u65b0\u8d85\u8fb9\u6570\u636e\nhg.update_e((1, 2), {\"relation\": \"\u597d\u670b\u53cb\", \"strength\": 0.9})\nprint(f\"\u66f4\u65b0\u540e\u7684\u53cb\u8c0a\u5173\u7cfb: {hg.e((1, 2))}\")\n\n# \u79fb\u9664\u9876\u70b9\uff08\u4f1a\u81ea\u52a8\u79fb\u9664\u76f8\u5173\u7684\u8d85\u8fb9\uff09\nhg.remove_v(4)\nprint(f\"\u79fb\u9664 David \u540e\u7684\u9876\u70b9\u6570: {hg.num_v}\")\nprint(f\"\u79fb\u9664 David \u540e\u7684\u8d85\u8fb9\u6570: {hg.num_e}\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_8","title":"\u53ef\u89c6\u5316","text":"<p>Hypergraph-DB \u63d0\u4f9b\u5185\u7f6e\u7684 Web \u53ef\u89c6\u5316\u529f\u80fd\uff1a</p> <pre><code># \u542f\u52a8\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\nhg.draw()\n</code></pre> <p>\u8fd9\u5c06\uff1a 1. \u542f\u52a8\u672c\u5730 Web \u670d\u52a1\u5668 2. \u81ea\u52a8\u6253\u5f00\u6d4f\u89c8\u5668 3. \u663e\u793a\u60a8\u7684\u8d85\u56fe\u7684\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316</p>"},{"location":"zh/getting-started/quickstart/#_9","title":"\u6301\u4e45\u5316","text":"<p>\u4fdd\u5b58\u548c\u52a0\u8f7d\u60a8\u7684\u8d85\u56fe\uff1a</p> <pre><code># \u4fdd\u5b58\u5230\u6587\u4ef6\nhg.save(\"my_social_network.hgdb\")\n\n# \u52a0\u8f7d\u73b0\u6709\u7684\u8d85\u56fe\nnew_hg = HypergraphDB(\"my_social_network.hgdb\")\nprint(f\"\u52a0\u8f7d\u7684\u8d85\u56fe\u5305\u542b {new_hg.num_v} \u4e2a\u9876\u70b9\u548c {new_hg.num_e} \u6761\u8d85\u8fb9\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_10","title":"\u5b8c\u6574\u793a\u4f8b","text":"<p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u521b\u5efa\u3001\u67e5\u8be2\u548c\u53ef\u89c6\u5316\u8d85\u56fe\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u5b66\u672f\u5408\u4f5c\u7f51\u7edc\nacademic_network = HypergraphDB()\n\n# \u6dfb\u52a0\u7814\u7a76\u4eba\u5458\nresearchers = [\n    (1, {\"name\": \"\u5f20\u6559\u6388\", \"field\": \"\u673a\u5668\u5b66\u4e60\", \"university\": \"\u6e05\u534e\u5927\u5b66\"}),\n    (2, {\"name\": \"\u674e\u535a\u58eb\", \"field\": \"\u81ea\u7136\u8bed\u8a00\u5904\u7406\", \"university\": \"\u5317\u4eac\u5927\u5b66\"}),\n    (3, {\"name\": \"\u738b\u7814\u7a76\u5458\", \"field\": \"\u8ba1\u7b97\u673a\u89c6\u89c9\", \"university\": \"\u4e2d\u79d1\u9662\"}),\n    (4, {\"name\": \"\u9648\u526f\u6559\u6388\", \"field\": \"\u6570\u636e\u6316\u6398\", \"university\": \"\u590d\u65e6\u5927\u5b66\"}),\n    (5, {\"name\": \"\u5218\u8bb2\u5e08\", \"field\": \"\u6df1\u5ea6\u5b66\u4e60\", \"university\": \"\u4e0a\u6d77\u4ea4\u5927\"})\n]\n\nfor researcher_id, info in researchers:\n    academic_network.add_v(researcher_id, info)\n\n# \u6dfb\u52a0\u5408\u4f5c\u5173\u7cfb\uff08\u8bba\u6587\u5408\u8457\uff09\ncollaborations = [\n    ((1, 2), {\"paper\": \"\u6df1\u5ea6\u5b66\u4e60\u5728NLP\u4e2d\u7684\u5e94\u7528\", \"year\": 2023, \"venue\": \"AAAI\"}),\n    ((1, 3), {\"paper\": \"\u591a\u6a21\u6001\u5b66\u4e60\u6846\u67b6\", \"year\": 2023, \"venue\": \"CVPR\"}),\n    ((2, 4, 5), {\"paper\": \"\u5927\u89c4\u6a21\u6587\u672c\u6316\u6398\u6280\u672f\", \"year\": 2024, \"venue\": \"KDD\"}),\n    ((1, 2, 3, 4), {\"paper\": \"\u4eba\u5de5\u667a\u80fd\u7efc\u8ff0\", \"year\": 2024, \"venue\": \"Nature\"})\n]\n\nfor authors, paper_info in collaborations:\n    academic_network.add_e(authors, paper_info)\n\n# \u5206\u6790\u7f51\u7edc\nprint(f\"\u5b66\u672f\u7f51\u7edc\u5305\u542b {academic_network.num_v} \u4f4d\u7814\u7a76\u4eba\u5458\u548c {academic_network.num_e} \u7bc7\u5408\u4f5c\u8bba\u6587\")\n\n# \u627e\u51fa\u6700\u6d3b\u8dc3\u7684\u7814\u7a76\u4eba\u5458\nmost_active = max(academic_network.all_v, \n                  key=lambda v: academic_network.degree_v(v))\nmost_active_info = academic_network.v(most_active)\nprint(f\"\u6700\u6d3b\u8dc3\u7684\u7814\u7a76\u4eba\u5458: {most_active_info['name']} \"\n      f\"({academic_network.degree_v(most_active)} \u7bc7\u8bba\u6587)\")\n\n# \u5206\u6790\u5408\u4f5c\u6a21\u5f0f\nprint(\"\\n\u5408\u4f5c\u5206\u6790:\")\nfor edge in academic_network.all_e:\n    paper_info = academic_network.e(edge)\n    authors = academic_network.nbr_v_of_e(edge)\n    author_names = [academic_network.v(author)['name'] for author in authors]\n    print(f\"  {paper_info['paper']}: {', '.join(author_names)}\")\n\n# \u542f\u52a8\u53ef\u89c6\u5316\nacademic_network.draw(port=8080)\nprint(\"\u5b66\u672f\u5408\u4f5c\u7f51\u7edc\u53ef\u89c6\u5316\u5df2\u542f\u52a8\uff0c\u8bf7\u8bbf\u95ee http://localhost:8080\")\n</code></pre>"},{"location":"zh/getting-started/quickstart/#_11","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u57fa\u7840\u77e5\u8bc6\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ul> <li>\u67e5\u770b\u66f4\u591a\u793a\u4f8b: \u5b9e\u7528\u7684\u4f7f\u7528\u6848\u4f8b</li> <li>\u5b66\u4e60\u8d85\u56fe\u7406\u8bba: \u7406\u89e3\u8d85\u56fe\u7684\u6982\u5ff5\u548c\u5e94\u7528</li> <li>\u63a2\u7d22 API: \u5b8c\u6574\u7684\u65b9\u6cd5\u53c2\u8003</li> <li>\u53ef\u89c6\u5316\u6307\u5357: \u9ad8\u7ea7\u53ef\u89c6\u5316\u529f\u80fd</li> </ul>"},{"location":"zh/getting-started/quickstart/#_12","title":"\u5c0f\u8d34\u58eb","text":"<ol> <li>\u547d\u540d\u7ea6\u5b9a: \u4f7f\u7528\u6709\u610f\u4e49\u7684\u9876\u70b9 ID \u548c\u63cf\u8ff0\u6027\u7684\u5c5e\u6027\u540d</li> <li>\u6570\u636e\u7ec4\u7ec7: \u5c06\u76f8\u5173\u5c5e\u6027\u7ec4\u7ec7\u5728\u5b57\u5178\u4e2d\u4ee5\u4fbf\u67e5\u8be2</li> <li>\u6027\u80fd: \u5bf9\u4e8e\u5927\u578b\u8d85\u56fe\uff0c\u8003\u8651\u6279\u91cf\u64cd\u4f5c\u800c\u4e0d\u662f\u9010\u4e2a\u6dfb\u52a0</li> <li>\u53ef\u89c6\u5316: \u4f7f\u7528\u8fc7\u6ee4\u529f\u80fd\u6765\u805a\u7126\u4e8e\u8d85\u56fe\u7684\u7279\u5b9a\u90e8\u5206</li> <li>\u6301\u4e45\u5316: \u5b9a\u671f\u4fdd\u5b58\u91cd\u8981\u7684\u8d85\u56fe\u6570\u636e</li> </ol> <p>\u795d\u60a8\u4f7f\u7528 Hypergraph-DB \u6109\u5feb\uff01\ud83c\udf89</p>"},{"location":"zh/visualization/","title":"\u53ef\u89c6\u5316\u6982\u8ff0","text":"<p>Hypergraph-DB \u63d0\u4f9b\u5f3a\u5927\u7684\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u5e2e\u52a9\u60a8\u76f4\u89c2\u5730\u63a2\u7d22\u548c\u7406\u89e3\u590d\u6742\u7684\u8d85\u56fe\u7ed3\u6784\u3002</p>"},{"location":"zh/visualization/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":""},{"location":"zh/visualization/#_3","title":"\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316","text":"<ul> <li>\u62d6\u62fd\u64cd\u4f5c: \u79fb\u52a8\u9876\u70b9\u548c\u8d85\u8fb9\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5e03\u5c40</li> <li>\u7f29\u653e\u548c\u5e73\u79fb: \u63a2\u7d22\u5927\u578b\u8d85\u56fe\u7684\u4e0d\u540c\u90e8\u5206</li> <li>\u60ac\u505c\u4fe1\u606f: \u67e5\u770b\u9876\u70b9\u548c\u8d85\u8fb9\u7684\u8be6\u7ec6\u5c5e\u6027</li> <li>\u9009\u62e9\u9ad8\u4eae: \u70b9\u51fb\u5143\u7d20\u67e5\u770b\u76f8\u5173\u8fde\u63a5</li> </ul>"},{"location":"zh/visualization/#web","title":"Web \u6280\u672f\u6808","text":"<ul> <li>D3.js: \u5f3a\u5927\u7684\u6570\u636e\u53ef\u89c6\u5316\u5e93</li> <li>HTML5 Canvas: \u9ad8\u6027\u80fd\u6e32\u67d3</li> <li>\u54cd\u5e94\u5f0f\u8bbe\u8ba1: \u9002\u914d\u4e0d\u540c\u5c4f\u5e55\u5c3a\u5bf8</li> <li>\u672c\u5730\u670d\u52a1\u5668: \u65e0\u9700\u5916\u90e8\u4f9d\u8d56</li> </ul>"},{"location":"zh/visualization/#_4","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/visualization/#_5","title":"\u57fa\u672c\u53ef\u89c6\u5316","text":"<pre><code>from hyperdb import HypergraphDB\n\n# \u521b\u5efa\u793a\u4f8b\u8d85\u56fe\nhg = HypergraphDB()\n\n# \u6dfb\u52a0\u793e\u4ea4\u7f51\u7edc\u6570\u636e\nhg.add_v(\"Alice\", {\"age\": 30, \"\u804c\u4e1a\": \"\u5de5\u7a0b\u5e08\"})\nhg.add_v(\"Bob\", {\"age\": 25, \"\u804c\u4e1a\": \"\u8bbe\u8ba1\u5e08\"})\nhg.add_v(\"Charlie\", {\"age\": 35, \"\u804c\u4e1a\": \"\u4ea7\u54c1\u7ecf\u7406\"})\n\n# \u6dfb\u52a0\u5173\u7cfb\nhg.add_e((\"Alice\", \"Bob\"), {\"\u5173\u7cfb\": \"\u670b\u53cb\", \"\u4eb2\u5bc6\u5ea6\": 0.8})\nhg.add_e((\"Alice\", \"Bob\", \"Charlie\"), {\"\u5173\u7cfb\": \"\u9879\u76ee\u56e2\u961f\", \"\u9879\u76ee\": \"\u79fb\u52a8\u5e94\u7528\"})\n\n# \u542f\u52a8\u53ef\u89c6\u5316\nhg.draw()\n</code></pre>"},{"location":"zh/visualization/#_6","title":"\u81ea\u5b9a\u4e49\u7aef\u53e3\u548c\u8bbe\u7f6e","text":"<pre><code># \u6307\u5b9a\u7aef\u53e3\nhg.draw(port=9000)\n\n# \u4e0d\u81ea\u52a8\u6253\u5f00\u6d4f\u89c8\u5668\nhg.draw(open_browser=False)\nprint(\"\u8bf7\u624b\u52a8\u8bbf\u95ee http://localhost:8080\")\n</code></pre>"},{"location":"zh/visualization/#_7","title":"\ud83d\udcca \u53ef\u89c6\u5316\u5143\u7d20","text":""},{"location":"zh/visualization/#_8","title":"\u9876\u70b9\u8868\u793a","text":"<ul> <li>\u5706\u5f62\u8282\u70b9: \u8868\u793a\u8d85\u56fe\u4e2d\u7684\u9876\u70b9</li> <li>\u989c\u8272\u7f16\u7801: \u6839\u636e\u5c5e\u6027\u7c7b\u578b\u81ea\u52a8\u7740\u8272</li> <li>\u5927\u5c0f\u53d8\u5316: \u53cd\u6620\u9876\u70b9\u7684\u91cd\u8981\u6027\uff08\u5ea6\u6570\uff09</li> <li>\u6807\u7b7e\u663e\u793a: \u663e\u793a\u9876\u70b9\u7684\u540d\u79f0\u6216\u6807\u8bc6\u7b26</li> </ul>"},{"location":"zh/visualization/#_9","title":"\u8d85\u8fb9\u8868\u793a","text":"<ul> <li>\u8fde\u63a5\u7ebf: \u663e\u793a\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u8d85\u8fb9\u5305\u7edc: \u7528\u4e8e\u591a\u9876\u70b9\u8d85\u8fb9\u7684\u53ef\u89c6\u5316</li> <li>\u6743\u91cd\u8868\u793a: \u7ebf\u6761\u7c97\u7ec6\u53cd\u6620\u5173\u7cfb\u5f3a\u5ea6</li> <li>\u7c7b\u578b\u533a\u5206: \u4e0d\u540c\u7c7b\u578b\u7684\u5173\u7cfb\u4f7f\u7528\u4e0d\u540c\u6837\u5f0f</li> </ul>"},{"location":"zh/visualization/#_10","title":"\u5e03\u5c40\u7b97\u6cd5","text":"<ul> <li>\u529b\u5bfc\u5411\u5e03\u5c40: \u81ea\u52a8\u6392\u5217\u9876\u70b9\u4ee5\u51cf\u5c11\u91cd\u53e0</li> <li>\u5c42\u6b21\u5e03\u5c40: \u9002\u7528\u4e8e\u6709\u5411\u6216\u5206\u5c42\u7684\u8d85\u56fe</li> <li>\u624b\u52a8\u8c03\u6574: \u62d6\u62fd\u9876\u70b9\u5230\u671f\u671b\u4f4d\u7f6e</li> </ul>"},{"location":"zh/visualization/#_11","title":"\ud83c\udfa8 \u53ef\u89c6\u5316\u6837\u5f0f","text":""},{"location":"zh/visualization/#_12","title":"\u9ed8\u8ba4\u4e3b\u9898","text":"<pre><code>// \u9876\u70b9\u6837\u5f0f\nvertex: {\n    radius: 8,\n    fill: \"#6366f1\",\n    stroke: \"#4f46e5\",\n    strokeWidth: 2\n}\n\n// \u8d85\u8fb9\u6837\u5f0f\nedge: {\n    stroke: \"#9ca3af\",\n    strokeWidth: 1.5,\n    opacity: 0.7\n}\n</code></pre>"},{"location":"zh/visualization/#_13","title":"\u81ea\u5b9a\u4e49\u989c\u8272\u65b9\u6848","text":"<p>\u53ef\u89c6\u5316\u652f\u6301\u57fa\u4e8e\u6570\u636e\u5c5e\u6027\u7684\u52a8\u6001\u7740\u8272\uff1a</p> <ul> <li>\u7c7b\u522b\u7740\u8272: \u6839\u636e\u9876\u70b9\u6216\u8d85\u8fb9\u7684\u7c7b\u578b</li> <li>\u6570\u503c\u7740\u8272: \u57fa\u4e8e\u8fde\u7eed\u6570\u503c\u7684\u6e10\u53d8\u8272</li> <li>\u81ea\u5b9a\u4e49\u8c03\u8272\u677f: \u4e3a\u7279\u5b9a\u5e94\u7528\u5b9a\u5236\u989c\u8272</li> </ul>"},{"location":"zh/visualization/#_14","title":"\ud83d\udd0d \u4ea4\u4e92\u529f\u80fd","text":""},{"location":"zh/visualization/#_15","title":"\u9f20\u6807\u64cd\u4f5c","text":"\u64cd\u4f5c \u529f\u80fd \u5de6\u952e\u70b9\u51fb \u9009\u62e9\u9876\u70b9\u6216\u8d85\u8fb9 \u62d6\u62fd \u79fb\u52a8\u9876\u70b9\u4f4d\u7f6e \u6eda\u8f6e \u7f29\u653e\u89c6\u56fe \u53f3\u952e\u62d6\u62fd \u5e73\u79fb\u89c6\u56fe \u60ac\u505c \u663e\u793a\u8be6\u7ec6\u4fe1\u606f"},{"location":"zh/visualization/#_16","title":"\u952e\u76d8\u5feb\u6377\u952e","text":"\u6309\u952e \u529f\u80fd <code>R</code> \u91cd\u7f6e\u89c6\u56fe\u5230\u539f\u59cb\u4f4d\u7f6e <code>F</code> \u9002\u5e94\u89c6\u56fe\u5230\u6240\u6709\u5143\u7d20 <code>+/-</code> \u7f29\u653e\u89c6\u56fe <code>Ctrl+A</code> \u9009\u62e9\u6240\u6709\u5143\u7d20 <code>Delete</code> \u5220\u9664\u9009\u4e2d\u5143\u7d20\uff08\u5982\u679c\u542f\u7528\u7f16\u8f91\uff09"},{"location":"zh/visualization/#_17","title":"\ud83d\udcf1 \u54cd\u5e94\u5f0f\u8bbe\u8ba1","text":""},{"location":"zh/visualization/#_18","title":"\u684c\u9762\u7aef","text":"<ul> <li>\u5168\u5c4f\u663e\u793a: \u5145\u5206\u5229\u7528\u5927\u5c4f\u5e55\u7a7a\u95f4</li> <li>\u4fa7\u8fb9\u680f: \u663e\u793a\u8be6\u7ec6\u7684\u5c5e\u6027\u9762\u677f</li> <li>\u5de5\u5177\u680f: \u63d0\u4f9b\u5feb\u901f\u64cd\u4f5c\u6309\u94ae</li> </ul>"},{"location":"zh/visualization/#_19","title":"\u79fb\u52a8\u7aef","text":"<ul> <li>\u89e6\u6478\u53cb\u597d: \u652f\u6301\u89e6\u6478\u624b\u52bf\u64cd\u4f5c</li> <li>\u81ea\u9002\u5e94\u5e03\u5c40: \u8c03\u6574\u754c\u9762\u4ee5\u9002\u5408\u5c0f\u5c4f\u5e55</li> <li>\u7b80\u5316\u63a7\u4ef6: \u4f18\u5316\u79fb\u52a8\u8bbe\u5907\u7684\u7528\u6237\u4f53\u9a8c</li> </ul>"},{"location":"zh/visualization/#_20","title":"\ud83c\udfaf \u4f7f\u7528\u573a\u666f","text":""},{"location":"zh/visualization/#_21","title":"\u5b66\u672f\u7814\u7a76","text":"<pre><code># \u7814\u7a76\u5408\u4f5c\u7f51\u7edc\u53ef\u89c6\u5316\nacademic_hg = HypergraphDB()\n\n# \u6dfb\u52a0\u7814\u7a76\u4eba\u5458\u548c\u8bba\u6587\u5408\u4f5c\u5173\u7cfb\nacademic_hg.add_v(\"\u5f20\u6559\u6388\", {\"\u9886\u57df\": \"AI\", \"\u673a\u6784\": \"\u6e05\u534e\"})\nacademic_hg.add_v(\"\u674e\u535a\u58eb\", {\"\u9886\u57df\": \"ML\", \"\u673a\u6784\": \"\u5317\u5927\"})\n\n# \u5408\u4f5c\u8bba\u6587\u4f5c\u4e3a\u8d85\u8fb9\nacademic_hg.add_e((\"\u5f20\u6559\u6388\", \"\u674e\u535a\u58eb\"), {\n    \"\u8bba\u6587\": \"\u6df1\u5ea6\u5b66\u4e60\u7efc\u8ff0\", \n    \"\u5e74\u4efd\": 2024,\n    \"\u671f\u520a\": \"Nature AI\"\n})\n\nacademic_hg.draw()\n</code></pre>"},{"location":"zh/visualization/#_22","title":"\u793e\u4ea4\u7f51\u7edc\u5206\u6790","text":"<pre><code># \u7fa4\u4f53\u793e\u4ea4\u5173\u7cfb\nsocial_hg = HypergraphDB()\n\n# \u670b\u53cb\u7fa4\u4f53\nsocial_hg.add_e((\"Alice\", \"Bob\", \"Charlie\"), {\n    \"\u7fa4\u4f53\": \"\u5927\u5b66\u540c\u5b66\",\n    \"\u6d3b\u52a8\": \"\u5b9a\u671f\u805a\u4f1a\"\n})\n\nsocial_hg.draw()\n</code></pre>"},{"location":"zh/visualization/#_23","title":"\u751f\u7269\u7f51\u7edc","text":"<pre><code># \u86cb\u767d\u8d28\u76f8\u4e92\u4f5c\u7528\u7f51\u7edc\nbio_hg = HypergraphDB()\n\n# \u86cb\u767d\u8d28\u590d\u5408\u4f53\nbio_hg.add_e((\"ProteinA\", \"ProteinB\", \"ProteinC\"), {\n    \"\u590d\u5408\u4f53\": \"\u8f6c\u5f55\u56e0\u5b50\",\n    \"\u529f\u80fd\": \"\u57fa\u56e0\u8c03\u63a7\"\n})\n\nbio_hg.draw()\n</code></pre>"},{"location":"zh/visualization/#_24","title":"\ud83d\udd27 \u9ad8\u7ea7\u914d\u7f6e","text":""},{"location":"zh/visualization/#html","title":"\u81ea\u5b9a\u4e49 HTML \u6a21\u677f","text":"<p>\u60a8\u53ef\u4ee5\u4fee\u6539 <code>hyperdb/templates/hypergraph_viewer.html</code> \u6765\uff1a</p> <ul> <li>\u6dfb\u52a0\u81ea\u5b9a\u4e49 CSS \u6837\u5f0f</li> <li>\u96c6\u6210\u989d\u5916\u7684 JavaScript \u5e93</li> <li>\u4fee\u6539\u5e03\u5c40\u548c\u754c\u9762\u5143\u7d20</li> <li>\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5206\u6790\u5de5\u5177</li> </ul>"},{"location":"zh/visualization/#_25","title":"\u6570\u636e\u5bfc\u51fa","text":"<p>\u53ef\u89c6\u5316\u652f\u6301\u591a\u79cd\u6570\u636e\u5bfc\u51fa\u683c\u5f0f\uff1a</p> <pre><code># \u5bfc\u51fa\u5f53\u524d\u89c6\u56fe\uff08\u8ba1\u5212\u4e2d\u7684\u529f\u80fd\uff09\nhg.export_view(\"network.png\", format=\"png\")\nhg.export_view(\"network.svg\", format=\"svg\")\nhg.export_data(\"network.json\", format=\"json\")\n</code></pre>"},{"location":"zh/visualization/#_26","title":"\ud83d\udcc8 \u6027\u80fd\u4f18\u5316","text":""},{"location":"zh/visualization/#_27","title":"\u5927\u578b\u6570\u636e\u96c6\u5904\u7406","text":"<p>\u5bf9\u4e8e\u5305\u542b\u5927\u91cf\u9876\u70b9\u548c\u8d85\u8fb9\u7684\u8d85\u56fe\uff1a</p> <ol> <li>\u6570\u636e\u91c7\u6837: \u53ea\u53ef\u89c6\u5316\u6570\u636e\u7684\u5b50\u96c6</li> <li>\u5c42\u6b21\u663e\u793a: \u9010\u7ea7\u5c55\u5f00\u8be6\u7ec6\u4fe1\u606f</li> <li>\u6309\u9700\u52a0\u8f7d: \u6839\u636e\u7528\u6237\u4ea4\u4e92\u52a8\u6001\u52a0\u8f7d\u6570\u636e</li> <li>\u6027\u80fd\u76d1\u63a7: \u76d1\u63a7\u6e32\u67d3\u6027\u80fd\u5e76\u4f18\u5316</li> </ol>"},{"location":"zh/visualization/#_28","title":"\u6e32\u67d3\u4f18\u5316","text":"<pre><code># \u5bf9\u4e8e\u5927\u578b\u8d85\u56fe\uff0c\u8003\u8651\u6570\u636e\u8fc7\u6ee4\nlarge_hg = HypergraphDB()\n# ... \u6dfb\u52a0\u5927\u91cf\u6570\u636e ...\n\n# \u53ea\u53ef\u89c6\u5316\u9ad8\u5ea6\u6570\u9876\u70b9\nimportant_vertices = [v for v in large_hg.all_v \n                     if large_hg.degree_v(v) &gt; 5]\n\n# \u521b\u5efa\u5b50\u56fe\u8fdb\u884c\u53ef\u89c6\u5316\nsub_hg = HypergraphDB()\nfor v in important_vertices:\n    sub_hg.add_v(v, large_hg.v(v))\n    for e in large_hg.nbr_e_of_v(v):\n        sub_hg.add_e(e, large_hg.e(e))\n\nsub_hg.draw()\n</code></pre>"},{"location":"zh/visualization/#_29","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u57fa\u7840\u64cd\u4f5c: \u5b66\u4e60\u53ef\u89c6\u5316\u7684\u57fa\u672c\u4ea4\u4e92</li> <li>\u754c\u9762\u6307\u5357: \u4e86\u89e3\u7528\u6237\u754c\u9762\u7684\u5404\u4e2a\u90e8\u5206</li> <li>\u9ad8\u7ea7\u5b9a\u5236: \u4e2a\u6027\u5316\u60a8\u7684\u53ef\u89c6\u5316\u4f53\u9a8c</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e9b\u5f3a\u5927\u7684\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u76f4\u89c2\u5730\u7406\u89e3\u548c\u5206\u6790\u590d\u6742\u7684\u8d85\u56fe\u7ed3\u6784\uff01\ud83c\udfa8</p>"},{"location":"zh/visualization/advanced-customization/","title":"\u9ad8\u7ea7\u5b9a\u5236\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5c06\u6df1\u5165\u63a2\u8ba8 Hypergraph-DB \u53ef\u89c6\u5316\u7684\u9ad8\u7ea7\u5b9a\u5236\u529f\u80fd\uff0c\u5e2e\u52a9\u60a8\u521b\u5efa\u72ec\u7279\u4e14\u4e13\u4e1a\u7684\u8d85\u56fe\u53ef\u89c6\u5316\u6548\u679c\u3002</p>"},{"location":"zh/visualization/advanced-customization/#_2","title":"\u9ad8\u7ea7\u6837\u5f0f\u7cfb\u7edf","text":""},{"location":"zh/visualization/advanced-customization/#_3","title":"\ud83c\udfa8 \u52a8\u6001\u6837\u5f0f\u5f15\u64ce","text":""},{"location":"zh/visualization/advanced-customization/#_4","title":"\u57fa\u4e8e\u6570\u636e\u7684\u6837\u5f0f\u6620\u5c04","text":"<pre><code>class StyleMapper {\n    constructor(visualization) {\n        this.viz = visualization;\n        this.mappings = new Map();\n    }\n\n    // \u521b\u5efa\u6837\u5f0f\u6620\u5c04\u89c4\u5219\n    createMapping(property, attribute, scale) {\n        const mapping = {\n            property,    // \u89c6\u89c9\u5c5e\u6027 (color, size, opacity)\n            attribute,   // \u6570\u636e\u5c5e\u6027 (degree, weight, type)\n            scale        // \u7f29\u653e\u51fd\u6570\n        };\n\n        this.mappings.set(property, mapping);\n        return this;\n    }\n\n    // \u5e94\u7528\u6837\u5f0f\u6620\u5c04\n    applyMappings(elements) {\n        elements.forEach(element =&gt; {\n            this.mappings.forEach((mapping, property) =&gt; {\n                const value = element.data[mapping.attribute];\n                const mappedValue = mapping.scale(value);\n                element.style[property] = mappedValue;\n            });\n        });\n    }\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nconst mapper = new StyleMapper(visualization);\n\n// \u6839\u636e\u5ea6\u6570\u6620\u5c04\u8282\u70b9\u5927\u5c0f\nmapper.createMapping('size', 'degree', \n    d3.scaleLinear().domain([1, 20]).range([5, 30])\n);\n\n// \u6839\u636e\u7c7b\u578b\u6620\u5c04\u8282\u70b9\u989c\u8272\nmapper.createMapping('color', 'type', \n    d3.scaleOrdinal()\n      .domain(['researcher', 'institution', 'paper'])\n      .range(['#e74c3c', '#3498db', '#2ecc71'])\n);\n\n// \u6839\u636e\u6743\u91cd\u6620\u5c04\u8fb9\u900f\u660e\u5ea6\nmapper.createMapping('opacity', 'weight',\n    d3.scaleLinear().domain([0, 1]).range([0.3, 1.0])\n);\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_5","title":"\u6761\u4ef6\u6837\u5f0f\u7cfb\u7edf","text":"<pre><code>class ConditionalStyles {\n    constructor() {\n        this.rules = [];\n    }\n\n    addRule(condition, styles) {\n        this.rules.push({ condition, styles });\n        return this;\n    }\n\n    applyRules(element) {\n        let appliedStyles = {};\n\n        this.rules.forEach(rule =&gt; {\n            if (rule.condition(element)) {\n                Object.assign(appliedStyles, rule.styles);\n            }\n        });\n\n        return appliedStyles;\n    }\n}\n\n// \u521b\u5efa\u6761\u4ef6\u6837\u5f0f\u89c4\u5219\nconst conditionalStyles = new ConditionalStyles()\n    .addRule(\n        element =&gt; element.degree &gt; 10,\n        { size: 25, color: '#e74c3c', strokeWidth: 3 }\n    )\n    .addRule(\n        element =&gt; element.type === 'important',\n        { glow: true, pulsate: true }\n    )\n    .addRule(\n        element =&gt; element.selected,\n        { stroke: '#f39c12', strokeWidth: 4 }\n    );\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_6","title":"\ud83c\udf08 \u6e10\u53d8\u548c\u7eb9\u7406","text":""},{"location":"zh/visualization/advanced-customization/#svg","title":"SVG \u6e10\u53d8\u5b9a\u4e49","text":"<pre><code>function createGradients(svg) {\n    const defs = svg.append('defs');\n\n    // \u5f84\u5411\u6e10\u53d8\n    const radialGradient = defs.append('radialGradient')\n        .attr('id', 'node-gradient')\n        .attr('cx', '30%')\n        .attr('cy', '30%');\n\n    radialGradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', '#ffffff')\n        .attr('stop-opacity', 0.8);\n\n    radialGradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', '#3498db')\n        .attr('stop-opacity', 1);\n\n    // \u7ebf\u6027\u6e10\u53d8\n    const linearGradient = defs.append('linearGradient')\n        .attr('id', 'edge-gradient')\n        .attr('x1', '0%').attr('y1', '0%')\n        .attr('x2', '100%').attr('y2', '0%');\n\n    linearGradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', '#e74c3c')\n        .attr('stop-opacity', 0.8);\n\n    linearGradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', '#9b59b6')\n        .attr('stop-opacity', 0.8);\n}\n\n// \u5e94\u7528\u6e10\u53d8\nnodes.style('fill', 'url(#node-gradient)');\nedges.style('stroke', 'url(#edge-gradient)');\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_7","title":"\u7eb9\u7406\u6a21\u5f0f","text":"<pre><code>function createPatterns(svg) {\n    const defs = svg.select('defs');\n\n    // \u521b\u5efa\u70b9\u72b6\u7eb9\u7406\n    const dotPattern = defs.append('pattern')\n        .attr('id', 'dots')\n        .attr('patternUnits', 'userSpaceOnUse')\n        .attr('width', 10)\n        .attr('height', 10);\n\n    dotPattern.append('circle')\n        .attr('cx', 5)\n        .attr('cy', 5)\n        .attr('r', 2)\n        .attr('fill', '#34495e')\n        .attr('opacity', 0.3);\n\n    // \u521b\u5efa\u6761\u7eb9\u7eb9\u7406\n    const stripePattern = defs.append('pattern')\n        .attr('id', 'stripes')\n        .attr('patternUnits', 'userSpaceOnUse')\n        .attr('width', 8)\n        .attr('height', 8)\n        .attr('patternTransform', 'rotate(45)');\n\n    stripePattern.append('rect')\n        .attr('width', 4)\n        .attr('height', 8)\n        .attr('fill', '#ecf0f1');\n\n    stripePattern.append('rect')\n        .attr('x', 4)\n        .attr('width', 4)\n        .attr('height', 8)\n        .attr('fill', '#bdc3c7');\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_8","title":"\u9ad8\u7ea7\u52a8\u753b\u7cfb\u7edf","text":""},{"location":"zh/visualization/advanced-customization/#_9","title":"\ud83c\udfac \u5173\u952e\u5e27\u52a8\u753b","text":""},{"location":"zh/visualization/advanced-customization/#_10","title":"\u590d\u6742\u8fc7\u6e21\u52a8\u753b","text":"<pre><code>class AnimationEngine {\n    constructor() {\n        this.animations = new Map();\n        this.timeline = gsap.timeline();\n    }\n\n    // \u521b\u5efa\u8282\u70b9\u51fa\u73b0\u52a8\u753b\n    animateNodeEntry(nodes) {\n        return gsap.fromTo(nodes.nodes(), \n            {\n                scale: 0,\n                opacity: 0,\n                rotation: 180\n            },\n            {\n                scale: 1,\n                opacity: 1,\n                rotation: 0,\n                duration: 0.8,\n                ease: \"back.out(1.7)\",\n                stagger: 0.1\n            }\n        );\n    }\n\n    // \u521b\u5efa\u8fb9\u7ed8\u5236\u52a8\u753b\n    animateEdgeDrawing(edges) {\n        // \u8bbe\u7f6e\u521d\u59cb\u8def\u5f84\u957f\u5ea6\u4e3a0\n        edges.each(function() {\n            const pathLength = this.getTotalLength();\n            d3.select(this)\n                .attr('stroke-dasharray', pathLength)\n                .attr('stroke-dashoffset', pathLength);\n        });\n\n        // \u52a8\u753b\u7ed8\u5236\u8def\u5f84\n        return gsap.to(edges.nodes(), {\n            strokeDashoffset: 0,\n            duration: 1.5,\n            ease: \"power2.inOut\",\n            stagger: 0.05\n        });\n    }\n\n    // \u521b\u5efa\u529b\u5f15\u5bfc\u5e03\u5c40\u52a8\u753b\n    animateLayoutTransition(nodes, newPositions) {\n        const tween = gsap.to({}, {\n            duration: 2,\n            ease: \"power2.inOut\",\n            onUpdate: function() {\n                const progress = this.progress();\n                nodes.each(function(d, i) {\n                    const startPos = { x: d.x, y: d.y };\n                    const endPos = newPositions[i];\n\n                    d.x = startPos.x + (endPos.x - startPos.x) * progress;\n                    d.y = startPos.y + (endPos.y - startPos.y) * progress;\n\n                    d3.select(this)\n                        .attr('transform', `translate(${d.x}, ${d.y})`);\n                });\n            }\n        });\n\n        return tween;\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_11","title":"\u4ea4\u4e92\u5f0f\u52a8\u753b\u53cd\u9988","text":"<pre><code>class InteractionAnimations {\n    // \u9f20\u6807\u60ac\u505c\u6548\u679c\n    static setupHoverEffects(elements) {\n        elements\n            .on('mouseenter', function(event, d) {\n                gsap.to(this, {\n                    scale: 1.2,\n                    duration: 0.2,\n                    ease: \"power2.out\"\n                });\n\n                // \u6dfb\u52a0\u53d1\u5149\u6548\u679c\n                gsap.to(this, {\n                    filter: 'drop-shadow(0 0 10px rgba(52, 152, 219, 0.8))',\n                    duration: 0.2\n                });\n            })\n            .on('mouseleave', function(event, d) {\n                gsap.to(this, {\n                    scale: 1,\n                    filter: 'none',\n                    duration: 0.2,\n                    ease: \"power2.out\"\n                });\n            });\n    }\n\n    // \u70b9\u51fb\u53cd\u9988\u52a8\u753b\n    static setupClickEffects(elements) {\n        elements.on('click', function(event, d) {\n            // \u521b\u5efa\u6d9f\u6f2a\u6548\u679c\n            const ripple = d3.select(this.parentNode)\n                .append('circle')\n                .attr('class', 'ripple')\n                .attr('cx', d.x)\n                .attr('cy', d.y)\n                .attr('r', 0)\n                .style('fill', 'none')\n                .style('stroke', '#3498db')\n                .style('stroke-width', 2)\n                .style('opacity', 1);\n\n            gsap.to(ripple.node(), {\n                attr: { r: 50 },\n                opacity: 0,\n                duration: 0.6,\n                ease: \"power2.out\",\n                onComplete: () =&gt; ripple.remove()\n            });\n        });\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_12","title":"\ud83c\udf0a \u7269\u7406\u52a8\u753b","text":""},{"location":"zh/visualization/advanced-customization/#_13","title":"\u7c92\u5b50\u7cfb\u7edf","text":"<pre><code>class ParticleSystem {\n    constructor(canvas, count = 100) {\n        this.canvas = canvas;\n        this.particles = [];\n        this.createParticles(count);\n    }\n\n    createParticles(count) {\n        for (let i = 0; i &lt; count; i++) {\n            this.particles.push({\n                x: Math.random() * this.canvas.width,\n                y: Math.random() * this.canvas.height,\n                vx: (Math.random() - 0.5) * 2,\n                vy: (Math.random() - 0.5) * 2,\n                radius: Math.random() * 3 + 1,\n                opacity: Math.random() * 0.5 + 0.2,\n                color: d3.interpolateViridis(Math.random())\n            });\n        }\n    }\n\n    update() {\n        this.particles.forEach(particle =&gt; {\n            particle.x += particle.vx;\n            particle.y += particle.vy;\n\n            // \u8fb9\u754c\u53cd\u5f39\n            if (particle.x &lt; 0 || particle.x &gt; this.canvas.width) {\n                particle.vx *= -1;\n            }\n            if (particle.y &lt; 0 || particle.y &gt; this.canvas.height) {\n                particle.vy *= -1;\n            }\n\n            // \u91cd\u529b\u548c\u6469\u64e6\n            particle.vy += 0.01; // \u91cd\u529b\n            particle.vx *= 0.99; // \u6469\u64e6\n            particle.vy *= 0.99;\n        });\n    }\n\n    render(context) {\n        this.particles.forEach(particle =&gt; {\n            context.globalAlpha = particle.opacity;\n            context.fillStyle = particle.color;\n            context.beginPath();\n            context.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\n            context.fill();\n        });\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#3d","title":"3D \u53ef\u89c6\u5316","text":""},{"location":"zh/visualization/advanced-customization/#webgl","title":"\ud83c\udf10 WebGL \u96c6\u6210","text":""},{"location":"zh/visualization/advanced-customization/#threejs","title":"Three.js \u57fa\u7840\u8bbe\u7f6e","text":"<pre><code>class Hypergraph3D {\n    constructor(container) {\n        this.container = container;\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, \n            window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n\n        this.init();\n    }\n\n    init() {\n        // \u8bbe\u7f6e\u6e32\u67d3\u5668\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setClearColor(0xffffff);\n        this.container.appendChild(this.renderer.domElement);\n\n        // \u8bbe\u7f6e\u76f8\u673a\u4f4d\u7f6e\n        this.camera.position.set(0, 0, 100);\n\n        // \u6dfb\u52a0\u5149\u6e90\n        const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n        this.scene.add(ambientLight);\n\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        directionalLight.position.set(50, 50, 50);\n        this.scene.add(directionalLight);\n\n        this.animate();\n    }\n\n    createNode(data) {\n        const geometry = new THREE.SphereGeometry(data.size || 5, 32, 32);\n        const material = new THREE.MeshLambertMaterial({ \n            color: data.color || 0x3498db \n        });\n        const mesh = new THREE.Mesh(geometry, material);\n\n        mesh.position.set(data.x || 0, data.y || 0, data.z || 0);\n        mesh.userData = data;\n\n        this.scene.add(mesh);\n        return mesh;\n    }\n\n    createEdge(source, target, data) {\n        const geometry = new THREE.BufferGeometry();\n        const vertices = new Float32Array([\n            source.x, source.y, source.z,\n            target.x, target.y, target.z\n        ]);\n\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n        const material = new THREE.LineBasicMaterial({ \n            color: data.color || 0x95a5a6,\n            linewidth: data.width || 1\n        });\n\n        const line = new THREE.Line(geometry, material);\n        line.userData = data;\n\n        this.scene.add(line);\n        return line;\n    }\n\n    animate() {\n        requestAnimationFrame(() =&gt; this.animate());\n        this.controls.update();\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#3d_1","title":"3D \u5e03\u5c40\u7b97\u6cd5","text":"<pre><code>class ForceDirected3D {\n    constructor(nodes, edges) {\n        this.nodes = nodes;\n        this.edges = edges;\n        this.alpha = 0.3;\n        this.alphaDecay = 0.02;\n    }\n\n    step() {\n        // \u65a5\u529b\u8ba1\u7b97\n        for (let i = 0; i &lt; this.nodes.length; i++) {\n            for (let j = i + 1; j &lt; this.nodes.length; j++) {\n                const nodeA = this.nodes[i];\n                const nodeB = this.nodes[j];\n\n                const dx = nodeB.x - nodeA.x;\n                const dy = nodeB.y - nodeA.y;\n                const dz = nodeB.z - nodeA.z;\n\n                const distance = Math.sqrt(dx*dx + dy*dy + dz*dz) + 0.01;\n                const force = -50 / (distance * distance);\n\n                const fx = (dx / distance) * force;\n                const fy = (dy / distance) * force;\n                const fz = (dz / distance) * force;\n\n                nodeA.vx -= fx;\n                nodeA.vy -= fy;\n                nodeA.vz -= fz;\n                nodeB.vx += fx;\n                nodeB.vy += fy;\n                nodeB.vz += fz;\n            }\n        }\n\n        // \u5f15\u529b\u8ba1\u7b97\n        this.edges.forEach(edge =&gt; {\n            const source = edge.source;\n            const target = edge.target;\n\n            const dx = target.x - source.x;\n            const dy = target.y - source.y;\n            const dz = target.z - source.z;\n\n            const distance = Math.sqrt(dx*dx + dy*dy + dz*dz);\n            const force = distance * 0.01;\n\n            const fx = (dx / distance) * force;\n            const fy = (dy / distance) * force;\n            const fz = (dz / distance) * force;\n\n            source.vx += fx;\n            source.vy += fy;\n            source.vz += fz;\n            target.vx -= fx;\n            target.vy -= fy;\n            target.vz -= fz;\n        });\n\n        // \u4f4d\u7f6e\u66f4\u65b0\n        this.nodes.forEach(node =&gt; {\n            node.vx *= 0.9; // \u963b\u5c3c\n            node.vy *= 0.9;\n            node.vz *= 0.9;\n\n            node.x += node.vx * this.alpha;\n            node.y += node.vy * this.alpha;\n            node.z += node.vz * this.alpha;\n        });\n\n        this.alpha *= (1 - this.alphaDecay);\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_14","title":"\u81ea\u5b9a\u4e49\u5e03\u5c40\u7b97\u6cd5","text":""},{"location":"zh/visualization/advanced-customization/#_15","title":"\ud83e\udde0 \u673a\u5668\u5b66\u4e60\u9a71\u52a8\u5e03\u5c40","text":""},{"location":"zh/visualization/advanced-customization/#t-sne","title":"t-SNE \u5e03\u5c40","text":"<pre><code>class TSNELayout {\n    constructor(nodes, options = {}) {\n        this.nodes = nodes;\n        this.perplexity = options.perplexity || 30;\n        this.learningRate = options.learningRate || 200;\n        this.maxIterations = options.maxIterations || 1000;\n\n        this.similarities = this.computeSimilarities();\n        this.positions = this.initializePositions();\n    }\n\n    computeSimilarities() {\n        const n = this.nodes.length;\n        const similarities = new Array(n).fill(null).map(() =&gt; new Array(n).fill(0));\n\n        // \u8ba1\u7b97\u8282\u70b9\u7279\u5f81\u76f8\u4f3c\u5ea6\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = 0; j &lt; n; j++) {\n                if (i !== j) {\n                    similarities[i][j] = this.featureSimilarity(\n                        this.nodes[i], this.nodes[j]\n                    );\n                }\n            }\n        }\n\n        return similarities;\n    }\n\n    featureSimilarity(nodeA, nodeB) {\n        // \u57fa\u4e8e\u8282\u70b9\u5c5e\u6027\u8ba1\u7b97\u76f8\u4f3c\u5ea6\n        const features = ['degree', 'betweenness', 'clustering'];\n        let similarity = 0;\n\n        features.forEach(feature =&gt; {\n            const diff = Math.abs((nodeA[feature] || 0) - (nodeB[feature] || 0));\n            similarity += Math.exp(-diff);\n        });\n\n        return similarity / features.length;\n    }\n\n    initializePositions() {\n        return this.nodes.map(() =&gt; ({\n            x: (Math.random() - 0.5) * 100,\n            y: (Math.random() - 0.5) * 100\n        }));\n    }\n\n    run() {\n        for (let iter = 0; iter &lt; this.maxIterations; iter++) {\n            this.updatePositions();\n\n            if (iter % 100 === 0) {\n                console.log(`t-SNE iteration ${iter}`);\n            }\n        }\n\n        return this.positions;\n    }\n\n    updatePositions() {\n        const n = this.nodes.length;\n        const gradients = new Array(n).fill(null).map(() =&gt; ({ x: 0, y: 0 }));\n\n        // \u8ba1\u7b97\u68af\u5ea6\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = 0; j &lt; n; j++) {\n                if (i !== j) {\n                    const dx = this.positions[i].x - this.positions[j].x;\n                    const dy = this.positions[i].y - this.positions[j].y;\n                    const dist = Math.sqrt(dx*dx + dy*dy) + 1e-8;\n\n                    const similarity = this.similarities[i][j];\n                    const attraction = similarity / dist;\n                    const repulsion = 1 / (dist * dist);\n\n                    const force = attraction - repulsion;\n\n                    gradients[i].x += force * dx / dist;\n                    gradients[i].y += force * dy / dist;\n                }\n            }\n        }\n\n        // \u66f4\u65b0\u4f4d\u7f6e\n        for (let i = 0; i &lt; n; i++) {\n            this.positions[i].x += gradients[i].x * this.learningRate;\n            this.positions[i].y += gradients[i].y * this.learningRate;\n        }\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_16","title":"\u5c42\u6b21\u805a\u7c7b\u5e03\u5c40","text":"<pre><code>class HierarchicalLayout {\n    constructor(nodes, edges) {\n        this.nodes = nodes;\n        this.edges = edges;\n        this.clusters = this.performClustering();\n    }\n\n    performClustering() {\n        // \u4f7f\u7528\u5c42\u6b21\u805a\u7c7b\u7b97\u6cd5\n        let clusters = this.nodes.map((node, i) =&gt; ({\n            id: i,\n            nodes: [node],\n            center: { x: node.x, y: node.y },\n            level: 0\n        }));\n\n        while (clusters.length &gt; 1) {\n            const { cluster1, cluster2 } = this.findClosestClusters(clusters);\n            const mergedCluster = this.mergeClusters(cluster1, cluster2);\n\n            clusters = clusters.filter(c =&gt; c !== cluster1 &amp;&amp; c !== cluster2);\n            clusters.push(mergedCluster);\n        }\n\n        return clusters[0];\n    }\n\n    findClosestClusters(clusters) {\n        let minDistance = Infinity;\n        let closest = { cluster1: null, cluster2: null };\n\n        for (let i = 0; i &lt; clusters.length; i++) {\n            for (let j = i + 1; j &lt; clusters.length; j++) {\n                const distance = this.clusterDistance(clusters[i], clusters[j]);\n                if (distance &lt; minDistance) {\n                    minDistance = distance;\n                    closest = { cluster1: clusters[i], cluster2: clusters[j] };\n                }\n            }\n        }\n\n        return closest;\n    }\n\n    clusterDistance(cluster1, cluster2) {\n        const dx = cluster1.center.x - cluster2.center.x;\n        const dy = cluster1.center.y - cluster2.center.y;\n        return Math.sqrt(dx*dx + dy*dy);\n    }\n\n    mergeClusters(cluster1, cluster2) {\n        const allNodes = [...cluster1.nodes, ...cluster2.nodes];\n        const centerX = allNodes.reduce((sum, node) =&gt; sum + node.x, 0) / allNodes.length;\n        const centerY = allNodes.reduce((sum, node) =&gt; sum + node.y, 0) / allNodes.length;\n\n        return {\n            id: `${cluster1.id}-${cluster2.id}`,\n            nodes: allNodes,\n            center: { x: centerX, y: centerY },\n            level: Math.max(cluster1.level, cluster2.level) + 1,\n            children: [cluster1, cluster2]\n        };\n    }\n\n    generateLayout() {\n        return this.layoutCluster(this.clusters, 0, 0, 400);\n    }\n\n    layoutCluster(cluster, centerX, centerY, radius) {\n        if (cluster.nodes.length === 1) {\n            cluster.nodes[0].x = centerX;\n            cluster.nodes[0].y = centerY;\n            return;\n        }\n\n        if (cluster.children) {\n            const angleStep = (2 * Math.PI) / cluster.children.length;\n\n            cluster.children.forEach((child, i) =&gt; {\n                const angle = i * angleStep;\n                const childX = centerX + Math.cos(angle) * radius * 0.5;\n                const childY = centerY + Math.sin(angle) * radius * 0.5;\n\n                this.layoutCluster(child, childX, childY, radius * 0.5);\n            });\n        }\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_17","title":"\u4ea4\u4e92\u5f0f\u6570\u636e\u63a2\u7d22","text":""},{"location":"zh/visualization/advanced-customization/#_18","title":"\ud83d\udd0d \u591a\u7ef4\u6570\u636e\u8fc7\u6ee4","text":""},{"location":"zh/visualization/advanced-customization/#_19","title":"\u52a8\u6001\u8fc7\u6ee4\u5668\u7ec4\u4ef6","text":"<pre><code>class MultiDimensionalFilter {\n    constructor(data, container) {\n        this.data = data;\n        this.container = container;\n        this.filters = new Map();\n        this.callbacks = [];\n\n        this.createFilterUI();\n    }\n\n    createFilterUI() {\n        const filterPanel = d3.select(this.container)\n            .append('div')\n            .attr('class', 'filter-panel');\n\n        // \u5206\u6790\u6570\u636e\u5c5e\u6027\n        const attributes = this.analyzeAttributes();\n\n        attributes.forEach(attr =&gt; {\n            this.createAttributeFilter(filterPanel, attr);\n        });\n    }\n\n    analyzeAttributes() {\n        const attributes = [];\n        const sample = this.data[0];\n\n        Object.keys(sample).forEach(key =&gt; {\n            const values = this.data.map(d =&gt; d[key]);\n            const uniqueValues = [...new Set(values)];\n\n            const attribute = {\n                name: key,\n                type: this.detectType(values),\n                values: uniqueValues,\n                min: Math.min(...values.filter(v =&gt; typeof v === 'number')),\n                max: Math.max(...values.filter(v =&gt; typeof v === 'number'))\n            };\n\n            attributes.push(attribute);\n        });\n\n        return attributes;\n    }\n\n    createAttributeFilter(panel, attribute) {\n        const filterGroup = panel.append('div')\n            .attr('class', 'filter-group');\n\n        filterGroup.append('label')\n            .text(attribute.name);\n\n        if (attribute.type === 'categorical') {\n            this.createCategoricalFilter(filterGroup, attribute);\n        } else if (attribute.type === 'numerical') {\n            this.createNumericalFilter(filterGroup, attribute);\n        } else if (attribute.type === 'temporal') {\n            this.createTemporalFilter(filterGroup, attribute);\n        }\n    }\n\n    createCategoricalFilter(container, attribute) {\n        const checkboxGroup = container.append('div')\n            .attr('class', 'checkbox-group');\n\n        const checkboxes = checkboxGroup.selectAll('.checkbox')\n            .data(attribute.values)\n            .enter()\n            .append('label')\n            .attr('class', 'checkbox');\n\n        checkboxes.append('input')\n            .attr('type', 'checkbox')\n            .attr('checked', true)\n            .on('change', (event, d) =&gt; {\n                this.updateFilter(attribute.name, d, event.target.checked);\n            });\n\n        checkboxes.append('span')\n            .text(d =&gt; d);\n    }\n\n    createNumericalFilter(container, attribute) {\n        const sliderContainer = container.append('div')\n            .attr('class', 'slider-container');\n\n        const slider = sliderContainer.append('input')\n            .attr('type', 'range')\n            .attr('min', attribute.min)\n            .attr('max', attribute.max)\n            .attr('value', attribute.max)\n            .attr('step', (attribute.max - attribute.min) / 100)\n            .on('input', (event) =&gt; {\n                this.updateFilter(attribute.name, 'max', +event.target.value);\n            });\n\n        sliderContainer.append('span')\n            .attr('class', 'slider-value')\n            .text(attribute.max);\n    }\n\n    updateFilter(attribute, value, enabled) {\n        if (!this.filters.has(attribute)) {\n            this.filters.set(attribute, new Set());\n        }\n\n        const filter = this.filters.get(attribute);\n\n        if (enabled) {\n            filter.add(value);\n        } else {\n            filter.delete(value);\n        }\n\n        this.applyFilters();\n    }\n\n    applyFilters() {\n        const filteredData = this.data.filter(item =&gt; {\n            return Array.from(this.filters.entries()).every(([attr, values]) =&gt; {\n                if (values.size === 0) return true;\n                return values.has(item[attr]);\n            });\n        });\n\n        this.callbacks.forEach(callback =&gt; callback(filteredData));\n    }\n\n    onFilterChange(callback) {\n        this.callbacks.push(callback);\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_20","title":"\ud83d\udcca \u5b9e\u65f6\u6570\u636e\u7ed1\u5b9a","text":""},{"location":"zh/visualization/advanced-customization/#_21","title":"\u6570\u636e\u6d41\u53ef\u89c6\u5316","text":"<pre><code>class RealTimeHypergraph {\n    constructor(container) {\n        this.container = container;\n        this.data = { nodes: [], edges: [] };\n        this.updateQueue = [];\n        this.isAnimating = false;\n\n        this.visualization = new HypergraphVisualization(container);\n        this.startUpdateLoop();\n    }\n\n    // \u6dfb\u52a0\u6570\u636e\u66f4\u65b0\u5230\u961f\u5217\n    queueUpdate(update) {\n        this.updateQueue.push({\n            ...update,\n            timestamp: Date.now()\n        });\n    }\n\n    // \u5f00\u59cb\u66f4\u65b0\u5faa\u73af\n    startUpdateLoop() {\n        const processUpdates = () =&gt; {\n            if (this.updateQueue.length &gt; 0 &amp;&amp; !this.isAnimating) {\n                this.processNextUpdate();\n            }\n            requestAnimationFrame(processUpdates);\n        };\n\n        processUpdates();\n    }\n\n    // \u5904\u7406\u4e0b\u4e00\u4e2a\u66f4\u65b0\n    processNextUpdate() {\n        if (this.updateQueue.length === 0) return;\n\n        this.isAnimating = true;\n        const update = this.updateQueue.shift();\n\n        switch (update.type) {\n            case 'addNode':\n                this.animateNodeAddition(update.data);\n                break;\n            case 'removeNode':\n                this.animateNodeRemoval(update.data);\n                break;\n            case 'addEdge':\n                this.animateEdgeAddition(update.data);\n                break;\n            case 'removeEdge':\n                this.animateEdgeRemoval(update.data);\n                break;\n            case 'updateNode':\n                this.animateNodeUpdate(update.data);\n                break;\n        }\n    }\n\n    animateNodeAddition(nodeData) {\n        // \u6dfb\u52a0\u8282\u70b9\u5230\u6570\u636e\n        this.data.nodes.push(nodeData);\n\n        // \u521b\u5efaDOM\u5143\u7d20\n        const node = this.visualization.createNode(nodeData);\n\n        // \u5165\u573a\u52a8\u753b\n        gsap.fromTo(node, \n            { scale: 0, opacity: 0 },\n            { \n                scale: 1, \n                opacity: 1, \n                duration: 0.5,\n                ease: \"back.out(1.7)\",\n                onComplete: () =&gt; {\n                    this.isAnimating = false;\n                }\n            }\n        );\n    }\n\n    animateNodeRemoval(nodeId) {\n        const nodeIndex = this.data.nodes.findIndex(n =&gt; n.id === nodeId);\n        if (nodeIndex === -1) return;\n\n        const node = this.visualization.getNodeElement(nodeId);\n\n        // \u9000\u573a\u52a8\u753b\n        gsap.to(node, {\n            scale: 0,\n            opacity: 0,\n            duration: 0.3,\n            ease: \"power2.in\",\n            onComplete: () =&gt; {\n                // \u79fb\u9664\u6570\u636e\u548cDOM\n                this.data.nodes.splice(nodeIndex, 1);\n                node.remove();\n                this.isAnimating = false;\n            }\n        });\n    }\n\n    // WebSocket \u8fde\u63a5\u5b9e\u65f6\u6570\u636e\n    connectWebSocket(url) {\n        this.ws = new WebSocket(url);\n\n        this.ws.onmessage = (event) =&gt; {\n            const update = JSON.parse(event.data);\n            this.queueUpdate(update);\n        };\n\n        this.ws.onopen = () =&gt; {\n            console.log('WebSocket connected');\n        };\n\n        this.ws.onclose = () =&gt; {\n            console.log('WebSocket disconnected');\n            // \u5c1d\u8bd5\u91cd\u8fde\n            setTimeout(() =&gt; this.connectWebSocket(url), 5000);\n        };\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_22","title":"\u6027\u80fd\u4f18\u5316\u6280\u672f","text":""},{"location":"zh/visualization/advanced-customization/#lod","title":"\u26a1 \u865a\u62df\u5316\u548cLOD","text":""},{"location":"zh/visualization/advanced-customization/#_23","title":"\u89c6\u53e3\u88c1\u526a","text":"<pre><code>class ViewportCulling {\n    constructor(visualization) {\n        this.viz = visualization;\n        this.viewportBounds = null;\n        this.margin = 100; // \u89c6\u53e3\u8fb9\u8ddd\n    }\n\n    updateViewportBounds() {\n        const transform = this.viz.getTransform();\n        const { width, height } = this.viz.getSize();\n\n        this.viewportBounds = {\n            left: -transform.x / transform.k - this.margin,\n            top: -transform.y / transform.k - this.margin,\n            right: (-transform.x + width) / transform.k + this.margin,\n            bottom: (-transform.y + height) / transform.k + this.margin\n        };\n    }\n\n    isInViewport(element) {\n        if (!this.viewportBounds) return true;\n\n        const { left, top, right, bottom } = this.viewportBounds;\n\n        return element.x &gt;= left &amp;&amp; element.x &lt;= right &amp;&amp;\n               element.y &gt;= top &amp;&amp; element.y &lt;= bottom;\n    }\n\n    filterVisibleElements(elements) {\n        this.updateViewportBounds();\n        return elements.filter(element =&gt; this.isInViewport(element));\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_24","title":"\u7ec6\u8282\u5c42\u6b21\u63a7\u5236","text":"<pre><code>class LevelOfDetail {\n    constructor() {\n        this.thresholds = [\n            { scale: 0.1, level: 'minimal' },\n            { scale: 0.5, level: 'low' },\n            { scale: 1.0, level: 'medium' },\n            { scale: 2.0, level: 'high' },\n            { scale: 5.0, level: 'maximum' }\n        ];\n    }\n\n    getLODLevel(scale) {\n        for (let i = this.thresholds.length - 1; i &gt;= 0; i--) {\n            if (scale &gt;= this.thresholds[i].scale) {\n                return this.thresholds[i].level;\n            }\n        }\n        return 'minimal';\n    }\n\n    applyLOD(elements, scale) {\n        const level = this.getLODLevel(scale);\n\n        elements.forEach(element =&gt; {\n            switch (level) {\n                case 'minimal':\n                    this.applyMinimalLOD(element);\n                    break;\n                case 'low':\n                    this.applyLowLOD(element);\n                    break;\n                case 'medium':\n                    this.applyMediumLOD(element);\n                    break;\n                case 'high':\n                    this.applyHighLOD(element);\n                    break;\n                case 'maximum':\n                    this.applyMaximumLOD(element);\n                    break;\n            }\n        });\n    }\n\n    applyMinimalLOD(element) {\n        // \u6700\u7b80\u663e\u793a\uff1a\u53ea\u663e\u793a\u57fa\u672c\u5f62\u72b6\n        element.style.display = element.important ? 'block' : 'none';\n        element.querySelector('.label').style.display = 'none';\n        element.querySelector('.details').style.display = 'none';\n    }\n\n    applyMaximumLOD(element) {\n        // \u6700\u8be6\u7ec6\u663e\u793a\uff1a\u663e\u793a\u6240\u6709\u7ec6\u8282\n        element.style.display = 'block';\n        element.querySelector('.label').style.display = 'block';\n        element.querySelector('.details').style.display = 'block';\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#web-workers","title":"\ud83c\udfc3 Web Workers \u5e76\u884c\u8ba1\u7b97","text":""},{"location":"zh/visualization/advanced-customization/#worker","title":"\u5e03\u5c40\u8ba1\u7b97 Worker","text":"<pre><code>// layout-worker.js\nclass LayoutWorker {\n    constructor() {\n        self.onmessage = this.handleMessage.bind(this);\n    }\n\n    handleMessage(event) {\n        const { type, data } = event.data;\n\n        switch (type) {\n            case 'forceLayout':\n                this.computeForceLayout(data);\n                break;\n            case 'clustering':\n                this.computeClustering(data);\n                break;\n        }\n    }\n\n    computeForceLayout(data) {\n        const { nodes, edges, iterations } = data;\n\n        for (let i = 0; i &lt; iterations; i++) {\n            // \u529b\u5f15\u5bfc\u8ba1\u7b97\n            this.applyForces(nodes, edges);\n\n            // \u5b9a\u671f\u62a5\u544a\u8fdb\u5ea6\n            if (i % 10 === 0) {\n                self.postMessage({\n                    type: 'progress',\n                    iteration: i,\n                    total: iterations\n                });\n            }\n        }\n\n        // \u8fd4\u56de\u7ed3\u679c\n        self.postMessage({\n            type: 'layoutComplete',\n            positions: nodes.map(n =&gt; ({ id: n.id, x: n.x, y: n.y }))\n        });\n    }\n\n    applyForces(nodes, edges) {\n        // \u91cd\u7f6e\u529b\n        nodes.forEach(node =&gt; {\n            node.fx = 0;\n            node.fy = 0;\n        });\n\n        // \u8ba1\u7b97\u65a5\u529b\n        for (let i = 0; i &lt; nodes.length; i++) {\n            for (let j = i + 1; j &lt; nodes.length; j++) {\n                const nodeA = nodes[i];\n                const nodeB = nodes[j];\n\n                const dx = nodeB.x - nodeA.x;\n                const dy = nodeB.y - nodeA.y;\n                const distance = Math.sqrt(dx*dx + dy*dy) + 0.01;\n\n                const force = -1000 / (distance * distance);\n                const fx = (dx / distance) * force;\n                const fy = (dy / distance) * force;\n\n                nodeA.fx -= fx;\n                nodeA.fy -= fy;\n                nodeB.fx += fx;\n                nodeB.fy += fy;\n            }\n        }\n\n        // \u8ba1\u7b97\u5f15\u529b\n        edges.forEach(edge =&gt; {\n            const source = nodes.find(n =&gt; n.id === edge.source);\n            const target = nodes.find(n =&gt; n.id === edge.target);\n\n            const dx = target.x - source.x;\n            const dy = target.y - source.y;\n            const distance = Math.sqrt(dx*dx + dy*dy);\n\n            const force = distance * 0.01;\n            const fx = (dx / distance) * force;\n            const fy = (dy / distance) * force;\n\n            source.fx += fx;\n            source.fy += fy;\n            target.fx -= fx;\n            target.fy -= fy;\n        });\n\n        // \u66f4\u65b0\u4f4d\u7f6e\n        nodes.forEach(node =&gt; {\n            node.x += node.fx * 0.01;\n            node.y += node.fy * 0.01;\n        });\n    }\n}\n\nnew LayoutWorker();\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#worker_1","title":"\u4e3b\u7ebf\u7a0b\u4f7f\u7528 Worker","text":"<pre><code>class ParallelLayoutEngine {\n    constructor() {\n        this.worker = new Worker('layout-worker.js');\n        this.worker.onmessage = this.handleWorkerMessage.bind(this);\n    }\n\n    computeLayout(nodes, edges, callback) {\n        this.layoutCallback = callback;\n\n        this.worker.postMessage({\n            type: 'forceLayout',\n            data: {\n                nodes: nodes.map(n =&gt; ({ \n                    id: n.id, \n                    x: n.x, \n                    y: n.y \n                })),\n                edges: edges.map(e =&gt; ({ \n                    source: e.source.id, \n                    target: e.target.id \n                })),\n                iterations: 500\n            }\n        });\n    }\n\n    handleWorkerMessage(event) {\n        const { type, data } = event.data;\n\n        switch (type) {\n            case 'progress':\n                console.log(`Layout progress: ${data.iteration}/${data.total}`);\n                break;\n            case 'layoutComplete':\n                this.layoutCallback(data.positions);\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"zh/visualization/advanced-customization/#_25","title":"\u4e0b\u4e00\u6b65","text":"<p>\u60a8\u73b0\u5728\u5df2\u7ecf\u638c\u63e1\u4e86 Hypergraph-DB \u7684\u9ad8\u7ea7\u5b9a\u5236\u6280\u5de7\uff01\u63a5\u4e0b\u6765\u53ef\u4ee5\uff1a</p> <ol> <li>\ud83d\ude80 \u5c06\u8fd9\u4e9b\u6280\u672f\u5e94\u7528\u5230\u5b9e\u9645\u9879\u76ee\u4e2d</li> <li>\ud83d\udcd6 \u67e5\u770b API \u53c2\u8003\u6587\u6863</li> <li>\ud83d\udca1 \u63a2\u7d22 \u5b9e\u9645\u5e94\u7528\u793a\u4f8b</li> <li>\ud83e\udd1d \u53c2\u4e0e \u793e\u533a\u8ba8\u8bba</li> </ol> <p>\u521b\u5efa\u4ee4\u4eba\u60ca\u53f9\u7684\u8d85\u56fe\u53ef\u89c6\u5316\u4f53\u9a8c\uff01</p>"},{"location":"zh/visualization/basic-operations/","title":"\u57fa\u7840\u64cd\u4f5c\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5c06\u5e26\u60a8\u4e86\u89e3 Hypergraph-DB \u53ef\u89c6\u5316\u754c\u9762\u7684\u57fa\u7840\u64cd\u4f5c\uff0c\u8ba9\u60a8\u80fd\u591f\u6709\u6548\u5730\u6d4f\u89c8\u548c\u4ea4\u4e92\u8d85\u56fe\u6570\u636e\u3002</p>"},{"location":"zh/visualization/basic-operations/#_2","title":"\u754c\u9762\u6982\u89c8","text":""},{"location":"zh/visualization/basic-operations/#_3","title":"\u4e3b\u754c\u9762\u5e03\u5c40","text":"<p>\u53ef\u89c6\u5316\u754c\u9762\u91c7\u7528\u73b0\u4ee3\u5316\u7684 Web \u8bbe\u8ba1\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u533a\u57df\uff1a</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              \u6807\u9898\u680f                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u5de5\u5177\u680f  \u2502                             \u2502\n\u2502         \u2502         \u753b\u5e03\u533a\u57df              \u2502\n\u2502  \u63a7\u5236\u9762\u677f \u2502                             \u2502\n\u2502         \u2502                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              \u72b6\u6001\u680f                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_4","title":"\u6838\u5fc3\u7ec4\u4ef6","text":""},{"location":"zh/visualization/basic-operations/#1-canvas","title":"1. \u753b\u5e03\u533a\u57df (Canvas)","text":"<ul> <li>\u529f\u80fd: \u663e\u793a\u8d85\u56fe\u7684\u53ef\u89c6\u5316\u5185\u5bb9</li> <li>\u7279\u70b9: \u652f\u6301\u7f29\u653e\u3001\u5e73\u79fb\u3001\u4ea4\u4e92</li> <li>\u64cd\u4f5c: \u9f20\u6807\u62d6\u62fd\u3001\u6eda\u8f6e\u7f29\u653e</li> </ul>"},{"location":"zh/visualization/basic-operations/#2-toolbar","title":"2. \u5de5\u5177\u680f (Toolbar)","text":"<ul> <li>\u7f29\u653e\u63a7\u5236: \u653e\u5927/\u7f29\u5c0f/\u9002\u5e94\u5c4f\u5e55</li> <li>\u89c6\u56fe\u9009\u9879: \u5207\u6362\u663e\u793a\u6a21\u5f0f</li> <li>\u5bfc\u51fa\u529f\u80fd: \u4fdd\u5b58\u4e3a\u56fe\u50cf\u6216\u6570\u636e</li> </ul>"},{"location":"zh/visualization/basic-operations/#3-control-panel","title":"3. \u63a7\u5236\u9762\u677f (Control Panel)","text":"<ul> <li>\u56fe\u5f62\u8bbe\u7f6e: \u8c03\u6574\u8282\u70b9\u3001\u8fb9\u7684\u6837\u5f0f</li> <li>\u5e03\u5c40\u9009\u9879: \u9009\u62e9\u4e0d\u540c\u7684\u5e03\u5c40\u7b97\u6cd5</li> <li>\u8fc7\u6ee4\u5668: \u9690\u85cf/\u663e\u793a\u7279\u5b9a\u5143\u7d20</li> </ul>"},{"location":"zh/visualization/basic-operations/#4-status-bar","title":"4. \u72b6\u6001\u680f (Status Bar)","text":"<ul> <li>\u7edf\u8ba1\u4fe1\u606f: \u663e\u793a\u8d85\u70b9\u3001\u8d85\u8fb9\u6570\u91cf</li> <li>\u6027\u80fd\u6307\u6807: \u6e32\u67d3\u65f6\u95f4\u3001\u5185\u5b58\u4f7f\u7528</li> <li>\u5f53\u524d\u72b6\u6001: \u64cd\u4f5c\u63d0\u793a\u3001\u9519\u8bef\u4fe1\u606f</li> </ul>"},{"location":"zh/visualization/basic-operations/#_5","title":"\u57fa\u7840\u4ea4\u4e92\u64cd\u4f5c","text":""},{"location":"zh/visualization/basic-operations/#_6","title":"\u5bfc\u822a\u64cd\u4f5c","text":""},{"location":"zh/visualization/basic-operations/#zoom","title":"\ud83d\udd0d \u7f29\u653e (Zoom)","text":"<ul> <li>\u6eda\u8f6e\u7f29\u653e: \u9f20\u6807\u6eda\u8f6e\u4e0a\u4e0b\u6eda\u52a8</li> <li>\u5de5\u5177\u680f\u6309\u94ae: \u70b9\u51fb <code>+</code> / <code>-</code> \u6309\u94ae</li> <li>\u5feb\u6377\u952e: <code>Ctrl + \u6eda\u8f6e</code> (\u66f4\u7cbe\u7ec6\u63a7\u5236)</li> <li>\u53cc\u51fb\u7f29\u653e: \u53cc\u51fb\u8282\u70b9\u5feb\u901f\u805a\u7126</li> </ul> <pre><code>// \u7a0b\u5e8f\u5316\u7f29\u653e\u793a\u4f8b\nvisualization.zoomTo(1.5);  // \u7f29\u653e\u52301.5\u500d\nvisualization.zoomFit();    // \u9002\u5e94\u5c4f\u5e55\n</code></pre>"},{"location":"zh/visualization/basic-operations/#pan","title":"\ud83e\udd1a \u5e73\u79fb (Pan)","text":"<ul> <li>\u9f20\u6807\u62d6\u62fd: \u6309\u4f4f\u7a7a\u767d\u533a\u57df\u62d6\u52a8</li> <li>\u952e\u76d8\u5bfc\u822a: \u65b9\u5411\u952e\u5fae\u8c03\u4f4d\u7f6e</li> <li>\u89e6\u6478\u8bbe\u5907: \u5355\u6307\u62d6\u52a8</li> </ul> <pre><code>// \u7a0b\u5e8f\u5316\u5e73\u79fb\u793a\u4f8b\nvisualization.panTo(100, 100);  // \u5e73\u79fb\u5230\u5750\u6807(100,100)\nvisualization.center();          // \u5c45\u4e2d\u663e\u793a\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_7","title":"\u9009\u62e9\u64cd\u4f5c","text":""},{"location":"zh/visualization/basic-operations/#_8","title":"\u5355\u9009","text":"<ul> <li>\u70b9\u51fb\u8282\u70b9: \u9009\u62e9\u5355\u4e2a\u8d85\u70b9</li> <li>\u70b9\u51fb\u8fb9: \u9009\u62e9\u5355\u4e2a\u8d85\u8fb9</li> <li>\u9ad8\u4eae\u663e\u793a: \u9009\u4e2d\u5143\u7d20\u4f1a\u7a81\u51fa\u663e\u793a</li> </ul>"},{"location":"zh/visualization/basic-operations/#_9","title":"\u591a\u9009","text":"<ul> <li>Ctrl + \u70b9\u51fb: \u6dfb\u52a0\u5230\u9009\u62e9\u96c6\u5408</li> <li>Shift + \u70b9\u51fb: \u8303\u56f4\u9009\u62e9</li> <li>\u6846\u9009: \u62d6\u62fd\u9009\u62e9\u591a\u4e2a\u5143\u7d20</li> </ul>"},{"location":"zh/visualization/basic-operations/#_10","title":"\u53d6\u6d88\u9009\u62e9","text":"<ul> <li>\u70b9\u51fb\u7a7a\u767d: \u6e05\u9664\u6240\u6709\u9009\u62e9</li> <li>Esc \u952e: \u5feb\u901f\u6e05\u9664\u9009\u62e9</li> <li>\u53f3\u952e\u83dc\u5355: \u9009\u62e9\"\u53d6\u6d88\u9009\u62e9\"</li> </ul>"},{"location":"zh/visualization/basic-operations/#_11","title":"\u67e5\u770b\u64cd\u4f5c","text":""},{"location":"zh/visualization/basic-operations/#_12","title":"\ud83d\udd0d \u8be6\u7ec6\u4fe1\u606f\u67e5\u770b","text":"<ul> <li>\u60ac\u505c\u63d0\u793a: \u9f20\u6807\u60ac\u505c\u663e\u793a\u57fa\u7840\u4fe1\u606f</li> <li>\u53f3\u952e\u83dc\u5355: \u67e5\u770b\u8be6\u7ec6\u5c5e\u6027</li> <li>\u4fe1\u606f\u9762\u677f: \u5728\u4fa7\u8fb9\u680f\u663e\u793a\u5b8c\u6574\u4fe1\u606f</li> </ul> <pre><code>// \u83b7\u53d6\u8282\u70b9\u4fe1\u606f\u793a\u4f8b\nconst nodeInfo = visualization.getNodeInfo(nodeId);\nconsole.log(nodeInfo);\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_13","title":"\ud83d\udcca \u7edf\u8ba1\u4fe1\u606f","text":"<ul> <li>\u5168\u5c40\u7edf\u8ba1: \u603b\u4f53\u8d85\u70b9\u3001\u8d85\u8fb9\u6570\u91cf</li> <li>\u9009\u62e9\u7edf\u8ba1: \u5f53\u524d\u9009\u62e9\u7684\u5143\u7d20\u4fe1\u606f</li> <li>\u6027\u80fd\u6307\u6807: \u6e32\u67d3\u6027\u80fd\u548c\u8d44\u6e90\u4f7f\u7528</li> </ul>"},{"location":"zh/visualization/basic-operations/#_14","title":"\u53ef\u89c6\u5316\u5143\u7d20","text":""},{"location":"zh/visualization/basic-operations/#hypervertices","title":"\u8d85\u70b9 (Hypervertices)","text":""},{"location":"zh/visualization/basic-operations/#_15","title":"\u89c6\u89c9\u8868\u793a","text":"<ul> <li>\u5f62\u72b6: \u5706\u5f62\u6216\u591a\u8fb9\u5f62\u8282\u70b9</li> <li>\u989c\u8272: \u8868\u793a\u7c7b\u522b\u6216\u5c5e\u6027</li> <li>\u5927\u5c0f: \u53cd\u6620\u91cd\u8981\u6027\u6216\u5ea6\u6570</li> <li>\u6807\u7b7e: \u663e\u793a\u8282\u70b9\u540d\u79f0\u6216ID</li> </ul>"},{"location":"zh/visualization/basic-operations/#_16","title":"\u4ea4\u4e92\u529f\u80fd","text":"<ul> <li>\u5355\u51fb: \u9009\u62e9\u8282\u70b9</li> <li>\u53cc\u51fb: \u5c55\u5f00/\u6298\u53e0\u8fde\u63a5</li> <li>\u53f3\u952e: \u663e\u793a\u4e0a\u4e0b\u6587\u83dc\u5355</li> <li>\u62d6\u62fd: \u79fb\u52a8\u8282\u70b9\u4f4d\u7f6e</li> </ul>"},{"location":"zh/visualization/basic-operations/#hyperedges","title":"\u8d85\u8fb9 (Hyperedges)","text":""},{"location":"zh/visualization/basic-operations/#_17","title":"\u89c6\u89c9\u8868\u793a","text":"<ul> <li>\u8d85\u8fb9\u53ef\u89c6\u5316: \u4f7f\u7528\u8f6e\u5ed3\u6216\u533a\u57df\u8868\u793a</li> <li>\u8fde\u63a5\u7ebf: \u663e\u793a\u8d85\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u989c\u8272\u7f16\u7801: \u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u8d85\u8fb9</li> <li>\u539a\u5ea6: \u8868\u793a\u6743\u91cd\u6216\u91cd\u8981\u6027</li> </ul>"},{"location":"zh/visualization/basic-operations/#_18","title":"\u4ea4\u4e92\u529f\u80fd","text":"<ul> <li>\u70b9\u51fb: \u9009\u62e9\u8d85\u8fb9</li> <li>\u9ad8\u4eae: \u663e\u793a\u76f8\u5173\u8054\u7684\u8d85\u70b9</li> <li>\u60ac\u505c: \u663e\u793a\u8d85\u8fb9\u4fe1\u606f</li> </ul>"},{"location":"zh/visualization/basic-operations/#_19","title":"\u5e03\u5c40\u7b97\u6cd5","text":""},{"location":"zh/visualization/basic-operations/#force-directed","title":"\ud83d\udccd \u529b\u5f15\u5bfc\u5e03\u5c40 (Force-Directed)","text":"<ul> <li>\u7279\u70b9: \u52a8\u6001\u5e73\u8861\uff0c\u81ea\u7136\u5206\u5e03</li> <li>\u9002\u7528: \u4e2d\u7b49\u89c4\u6a21\u8d85\u56fe</li> <li>\u53c2\u6570: \u5f15\u529b\u3001\u65a5\u529b\u3001\u963b\u5c3c\u7cfb\u6570</li> </ul> <pre><code>visualization.setLayout('force', {\n    strength: 0.8,\n    distance: 100,\n    iterations: 300\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#circular","title":"\ud83d\udd04 \u5706\u5f62\u5e03\u5c40 (Circular)","text":"<ul> <li>\u7279\u70b9: \u8282\u70b9\u6392\u5217\u5728\u5706\u5468\u4e0a</li> <li>\u9002\u7528: \u663e\u793a\u5c42\u6b21\u5173\u7cfb</li> <li>\u53c2\u6570: \u534a\u5f84\u3001\u8d77\u59cb\u89d2\u5ea6</li> </ul> <pre><code>visualization.setLayout('circular', {\n    radius: 200,\n    startAngle: 0\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#hierarchical","title":"\ud83d\udcca \u5c42\u6b21\u5e03\u5c40 (Hierarchical)","text":"<ul> <li>\u7279\u70b9: \u5206\u5c42\u663e\u793a</li> <li>\u9002\u7528: \u6811\u72b6\u6216DAG\u7ed3\u6784</li> <li>\u53c2\u6570: \u5c42\u95f4\u8ddd\u3001\u8282\u70b9\u95f4\u8ddd</li> </ul> <pre><code>visualization.setLayout('hierarchical', {\n    direction: 'TB',  // \u4ece\u4e0a\u5230\u4e0b\n    levelSeparation: 50,\n    nodeSeparation: 30\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#manual","title":"\ud83c\udfaf \u624b\u52a8\u5e03\u5c40 (Manual)","text":"<ul> <li>\u7279\u70b9: \u7528\u6237\u81ea\u5b9a\u4e49\u4f4d\u7f6e</li> <li>\u9002\u7528: \u7cbe\u786e\u63a7\u5236\u663e\u793a</li> <li>\u64cd\u4f5c: \u62d6\u62fd\u8282\u70b9\u5230\u6307\u5b9a\u4f4d\u7f6e</li> </ul>"},{"location":"zh/visualization/basic-operations/#_20","title":"\u6837\u5f0f\u81ea\u5b9a\u4e49","text":""},{"location":"zh/visualization/basic-operations/#_21","title":"\u8282\u70b9\u6837\u5f0f","text":""},{"location":"zh/visualization/basic-operations/#_22","title":"\u57fa\u7840\u5c5e\u6027","text":"<pre><code>visualization.setNodeStyle({\n    size: 10,          // \u8282\u70b9\u5927\u5c0f\n    color: '#3498db',  // \u8282\u70b9\u989c\u8272\n    stroke: '#2c3e50', // \u8fb9\u6846\u989c\u8272\n    strokeWidth: 2,    // \u8fb9\u6846\u5bbd\u5ea6\n    opacity: 0.8       // \u900f\u660e\u5ea6\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_23","title":"\u6761\u4ef6\u6837\u5f0f","text":"<pre><code>visualization.setNodeStyle(node =&gt; {\n    if (node.degree &gt; 5) {\n        return { size: 15, color: '#e74c3c' };\n    }\n    return { size: 10, color: '#3498db' };\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_24","title":"\u8fb9\u6837\u5f0f","text":""},{"location":"zh/visualization/basic-operations/#_25","title":"\u57fa\u7840\u5c5e\u6027","text":"<pre><code>visualization.setEdgeStyle({\n    width: 2,          // \u8fb9\u5bbd\u5ea6\n    color: '#95a5a6',  // \u8fb9\u989c\u8272\n    opacity: 0.6,      // \u900f\u660e\u5ea6\n    curvature: 0.3     // \u5f2f\u66f2\u5ea6\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_26","title":"\u52a8\u6001\u6837\u5f0f","text":"<pre><code>visualization.setEdgeStyle(edge =&gt; {\n    return {\n        width: Math.log(edge.weight + 1) * 2,\n        color: edge.type === 'strong' ? '#e74c3c' : '#95a5a6'\n    };\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_27","title":"\u8fc7\u6ee4\u548c\u641c\u7d22","text":""},{"location":"zh/visualization/basic-operations/#_28","title":"\ud83d\udd0d \u5143\u7d20\u8fc7\u6ee4","text":""},{"location":"zh/visualization/basic-operations/#_29","title":"\u6309\u5c5e\u6027\u8fc7\u6ee4","text":"<pre><code>// \u9690\u85cf\u5ea6\u6570\u5c0f\u4e8e3\u7684\u8282\u70b9\nvisualization.filterNodes(node =&gt; node.degree &gt;= 3);\n\n// \u53ea\u663e\u793a\u7279\u5b9a\u7c7b\u578b\u7684\u8d85\u8fb9\nvisualization.filterEdges(edge =&gt; edge.type === 'collaboration');\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_30","title":"\u6309\u503c\u8303\u56f4\u8fc7\u6ee4","text":"<pre><code>// \u663e\u793a\u6743\u91cd\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u8fb9\nvisualization.filterEdges(edge =&gt; \n    edge.weight &gt;= 0.5 &amp;&amp; edge.weight &lt;= 1.0\n);\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_31","title":"\ud83d\udd0e \u641c\u7d22\u529f\u80fd","text":""},{"location":"zh/visualization/basic-operations/#_32","title":"\u6587\u672c\u641c\u7d22","text":"<pre><code>// \u641c\u7d22\u8282\u70b9\u6807\u7b7e\nconst results = visualization.searchNodes('research');\n\n// \u9ad8\u4eae\u641c\u7d22\u7ed3\u679c\nvisualization.highlightNodes(results);\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_33","title":"\u9ad8\u7ea7\u641c\u7d22","text":"<pre><code>// \u590d\u5408\u6761\u4ef6\u641c\u7d22\nconst results = visualization.search({\n    nodeLabel: { contains: 'lab' },\n    degree: { min: 3, max: 10 },\n    type: 'researcher'\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_34","title":"\u5bfc\u51fa\u529f\u80fd","text":""},{"location":"zh/visualization/basic-operations/#_35","title":"\ud83d\udcf7 \u56fe\u50cf\u5bfc\u51fa","text":""},{"location":"zh/visualization/basic-operations/#png","title":"PNG \u683c\u5f0f","text":"<pre><code>visualization.exportPNG({\n    width: 1920,\n    height: 1080,\n    quality: 0.9,\n    background: '#ffffff'\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#svg","title":"SVG \u683c\u5f0f","text":"<pre><code>visualization.exportSVG({\n    includeStyles: true,\n    embedFonts: true\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_36","title":"\ud83d\udcca \u6570\u636e\u5bfc\u51fa","text":""},{"location":"zh/visualization/basic-operations/#json","title":"JSON \u683c\u5f0f","text":"<pre><code>const data = visualization.exportData('json');\nconsole.log(data);\n</code></pre>"},{"location":"zh/visualization/basic-operations/#csv","title":"CSV \u683c\u5f0f","text":"<pre><code>visualization.exportData('csv', {\n    nodes: true,\n    edges: true,\n    attributes: ['degree', 'type', 'weight']\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_37","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"zh/visualization/basic-operations/#_38","title":"\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406","text":""},{"location":"zh/visualization/basic-operations/#lod-level-of-detail","title":"\u7ea7\u8054\u663e\u793a (LOD - Level of Detail)","text":"<pre><code>visualization.enableLOD({\n    nodeThreshold: 1000,  // \u8d85\u8fc71000\u4e2a\u8282\u70b9\u65f6\u7b80\u5316\u663e\u793a\n    edgeThreshold: 5000,  // \u8d85\u8fc75000\u6761\u8fb9\u65f6\u7b80\u5316\u663e\u793a\n    simplificationLevel: 0.5\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_39","title":"\u865a\u62df\u5316\u6e32\u67d3","text":"<pre><code>visualization.enableVirtualization({\n    viewportMargin: 100,  // \u89c6\u53e3\u8fb9\u8ddd\n    updateFrequency: 16   // \u66f4\u65b0\u9891\u7387(ms)\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_40","title":"\u6e32\u67d3\u4f18\u5316","text":""},{"location":"zh/visualization/basic-operations/#_41","title":"\u5e27\u7387\u63a7\u5236","text":"<pre><code>visualization.setRenderOptions({\n    targetFPS: 60,        // \u76ee\u6807\u5e27\u7387\n    adaptiveQuality: true, // \u81ea\u9002\u5e94\u8d28\u91cf\n    maxNodes: 10000       // \u6700\u5927\u8282\u70b9\u6570\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_42","title":"\u5feb\u6377\u952e\u53c2\u8003","text":""},{"location":"zh/visualization/basic-operations/#_43","title":"\u5bfc\u822a\u5feb\u6377\u952e","text":"<ul> <li><code>\u7a7a\u683c + \u62d6\u62fd</code>: \u5e73\u79fb\u89c6\u56fe</li> <li><code>Ctrl + \u6eda\u8f6e</code>: \u7cbe\u786e\u7f29\u653e</li> <li><code>Ctrl + 0</code>: \u91cd\u7f6e\u7f29\u653e</li> <li><code>Ctrl + 1</code>: \u9002\u5e94\u5c4f\u5e55</li> </ul>"},{"location":"zh/visualization/basic-operations/#_44","title":"\u9009\u62e9\u5feb\u6377\u952e","text":"<ul> <li><code>Ctrl + A</code>: \u5168\u9009</li> <li><code>Ctrl + D</code>: \u53d6\u6d88\u9009\u62e9</li> <li><code>Ctrl + I</code>: \u53cd\u9009</li> <li><code>Delete</code>: \u5220\u9664\u9009\u4e2d\u5143\u7d20</li> </ul>"},{"location":"zh/visualization/basic-operations/#_45","title":"\u89c6\u56fe\u5feb\u6377\u952e","text":"<ul> <li><code>F</code>: \u9002\u5e94\u5c4f\u5e55</li> <li><code>H</code>: \u5207\u6362\u9690\u85cf/\u663e\u793a</li> <li><code>L</code>: \u5207\u6362\u6807\u7b7e\u663e\u793a</li> <li><code>G</code>: \u5207\u6362\u7f51\u683c\u663e\u793a</li> </ul>"},{"location":"zh/visualization/basic-operations/#_46","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/visualization/basic-operations/#_47","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"zh/visualization/basic-operations/#_48","title":"\u6027\u80fd\u95ee\u9898","text":"<ul> <li>\u75c7\u72b6: \u6e32\u67d3\u7f13\u6162\u3001\u5361\u987f</li> <li>\u89e3\u51b3: \u542f\u7528LOD\u3001\u51cf\u5c11\u8282\u70b9\u6570\u91cf\u3001\u5173\u95ed\u52a8\u753b</li> </ul>"},{"location":"zh/visualization/basic-operations/#_49","title":"\u663e\u793a\u95ee\u9898","text":"<ul> <li>\u75c7\u72b6: \u5143\u7d20\u91cd\u53e0\u3001\u5e03\u5c40\u6df7\u4e71</li> <li>\u89e3\u51b3: \u91cd\u65b0\u5e94\u7528\u5e03\u5c40\u3001\u8c03\u6574\u53c2\u6570\u3001\u624b\u52a8\u8c03\u6574</li> </ul>"},{"location":"zh/visualization/basic-operations/#_50","title":"\u4ea4\u4e92\u95ee\u9898","text":"<ul> <li>\u75c7\u72b6: \u70b9\u51fb\u65e0\u54cd\u5e94\u3001\u9009\u62e9\u9519\u8bef</li> <li>\u89e3\u51b3: \u68c0\u67e5\u5143\u7d20\u5c42\u7ea7\u3001\u6e05\u9664\u7f13\u5b58\u3001\u91cd\u65b0\u52a0\u8f7d</li> </ul>"},{"location":"zh/visualization/basic-operations/#_51","title":"\u8c03\u8bd5\u6280\u5de7","text":""},{"location":"zh/visualization/basic-operations/#_52","title":"\u5f00\u53d1\u8005\u5de5\u5177","text":"<pre><code>// \u542f\u7528\u8c03\u8bd5\u6a21\u5f0f\nvisualization.enableDebug(true);\n\n// \u67e5\u770b\u6027\u80fd\u7edf\u8ba1\nconsole.log(visualization.getPerformanceStats());\n\n// \u68c0\u67e5\u5143\u7d20\u72b6\u6001\nconsole.log(visualization.getElementState(elementId));\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_53","title":"\u65e5\u5fd7\u8bb0\u5f55","text":"<pre><code>// \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\nvisualization.setLogLevel('debug');\n\n// \u76d1\u542c\u4e8b\u4ef6\nvisualization.on('error', (error) =&gt; {\n    console.error('Visualization error:', error);\n});\n</code></pre>"},{"location":"zh/visualization/basic-operations/#_54","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u638c\u63e1\u4e86\u57fa\u7840\u64cd\u4f5c\uff0c\u53ef\u4ee5\uff1a</p> <ol> <li>\ud83d\udcd6 \u67e5\u770b \u754c\u9762\u6307\u5357 \u4e86\u89e3\u8be6\u7ec6\u529f\u80fd</li> <li>\ud83c\udfa8 \u5b66\u4e60 \u9ad8\u7ea7\u5b9a\u5236 \u6280\u5de7</li> <li>\ud83d\udca1 \u63a2\u7d22 \u5b9e\u9645\u793a\u4f8b</li> <li>\ud83d\udd27 \u4e86\u89e3 API \u53c2\u8003</li> </ol> <p>\u5f00\u59cb\u60a8\u7684\u8d85\u56fe\u53ef\u89c6\u5316\u4e4b\u65c5\u5427\uff01</p>"}]}